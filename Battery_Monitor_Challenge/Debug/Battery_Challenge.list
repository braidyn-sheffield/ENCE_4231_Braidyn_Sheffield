
Battery_Challenge.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009428  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080095b0  080095b0  0000a5b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095cc  080095cc  0000b07c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080095cc  080095cc  0000a5cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080095d4  080095d4  0000b07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095d4  080095d4  0000a5d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080095d8  080095d8  0000a5d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  080095dc  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b07c  2**0
                  CONTENTS
 10 .bss          00000a18  2000007c  2000007c  0000b07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000a94  20000a94  0000b07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016776  00000000  00000000  0000b0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003710  00000000  00000000  00021822  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013c8  00000000  00000000  00024f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f47  00000000  00000000  00026300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024a5f  00000000  00000000  00027247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019c31  00000000  00000000  0004bca6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dcfc8  00000000  00000000  000658d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014289f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005764  00000000  00000000  001428e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  00148048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009598 	.word	0x08009598

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08009598 	.word	0x08009598

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <map>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

float map(int x, int in_min, int in_max, float out_min, float out_max)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b087      	sub	sp, #28
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6178      	str	r0, [r7, #20]
 80004fc:	6139      	str	r1, [r7, #16]
 80004fe:	60fa      	str	r2, [r7, #12]
 8000500:	ed87 0a02 	vstr	s0, [r7, #8]
 8000504:	edc7 0a01 	vstr	s1, [r7, #4]
    return ((float)(x - in_min) * (out_max - out_min)) / (in_max - in_min) + out_min;
 8000508:	697a      	ldr	r2, [r7, #20]
 800050a:	693b      	ldr	r3, [r7, #16]
 800050c:	1ad3      	subs	r3, r2, r3
 800050e:	ee07 3a90 	vmov	s15, r3
 8000512:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000516:	edd7 6a01 	vldr	s13, [r7, #4]
 800051a:	edd7 7a02 	vldr	s15, [r7, #8]
 800051e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000522:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000526:	68fa      	ldr	r2, [r7, #12]
 8000528:	693b      	ldr	r3, [r7, #16]
 800052a:	1ad3      	subs	r3, r2, r3
 800052c:	ee07 3a90 	vmov	s15, r3
 8000530:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000534:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000538:	edd7 7a02 	vldr	s15, [r7, #8]
 800053c:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000540:	eeb0 0a67 	vmov.f32	s0, s15
 8000544:	371c      	adds	r7, #28
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
	...

08000550 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000554:	f000 fcd8 	bl	8000f08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000558:	f000 f89c 	bl	8000694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800055c:	f000 f9fa 	bl	8000954 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000560:	f000 f954 	bl	800080c <MX_I2C1_Init>
  MX_USB_HOST_Init();
 8000564:	f008 fbc2 	bl	8008cec <MX_USB_HOST_Init>
  MX_TIM2_Init();
 8000568:	f000 f97e 	bl	8000868 <MX_TIM2_Init>
  MX_ADC1_Init();
 800056c:	f000 f8fc 	bl	8000768 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000570:	2100      	movs	r1, #0
 8000572:	4840      	ldr	r0, [pc, #256]	@ (8000674 <main+0x124>)
 8000574:	f004 fbe2 	bl	8004d3c <HAL_TIM_PWM_Start>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  // --- Read ADC ---
	  HAL_ADC_Start(&hadc1);
 8000578:	483f      	ldr	r0, [pc, #252]	@ (8000678 <main+0x128>)
 800057a:	f000 fd9f 	bl	80010bc <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 100);
 800057e:	2164      	movs	r1, #100	@ 0x64
 8000580:	483d      	ldr	r0, [pc, #244]	@ (8000678 <main+0x128>)
 8000582:	f000 fea0 	bl	80012c6 <HAL_ADC_PollForConversion>
	  gADC_Value = HAL_ADC_GetValue(&hadc1);
 8000586:	483c      	ldr	r0, [pc, #240]	@ (8000678 <main+0x128>)
 8000588:	f000 ff28 	bl	80013dc <HAL_ADC_GetValue>
 800058c:	4603      	mov	r3, r0
 800058e:	b29a      	uxth	r2, r3
 8000590:	4b3a      	ldr	r3, [pc, #232]	@ (800067c <main+0x12c>)
 8000592:	801a      	strh	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc1);
 8000594:	4838      	ldr	r0, [pc, #224]	@ (8000678 <main+0x128>)
 8000596:	f000 fe63 	bl	8001260 <HAL_ADC_Stop>

	  // --- Calculate voltage ---
	  gADC_Voltage = map(gADC_Value, 0, 4095, 0.0f, 12.0f);
 800059a:	4b38      	ldr	r3, [pc, #224]	@ (800067c <main+0x12c>)
 800059c:	881b      	ldrh	r3, [r3, #0]
 800059e:	eef2 0a08 	vmov.f32	s1, #40	@ 0x41400000  12.0
 80005a2:	ed9f 0a37 	vldr	s0, [pc, #220]	@ 8000680 <main+0x130>
 80005a6:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80005aa:	2100      	movs	r1, #0
 80005ac:	4618      	mov	r0, r3
 80005ae:	f7ff ffa1 	bl	80004f4 <map>
 80005b2:	eef0 7a40 	vmov.f32	s15, s0
 80005b6:	4b33      	ldr	r3, [pc, #204]	@ (8000684 <main+0x134>)
 80005b8:	edc3 7a00 	vstr	s15, [r3]

	  // --- Hysteresis: Enter or exit lockout mode ---
	  if (gADC_Voltage <= 6.5f)
 80005bc:	4b31      	ldr	r3, [pc, #196]	@ (8000684 <main+0x134>)
 80005be:	edd3 7a00 	vldr	s15, [r3]
 80005c2:	eeb1 7a0a 	vmov.f32	s14, #26	@ 0x40d00000  6.5
 80005c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005ce:	d803      	bhi.n	80005d8 <main+0x88>
	  {
		  gLowVoltage = 1;
 80005d0:	4b2d      	ldr	r3, [pc, #180]	@ (8000688 <main+0x138>)
 80005d2:	2201      	movs	r2, #1
 80005d4:	801a      	strh	r2, [r3, #0]
 80005d6:	e00c      	b.n	80005f2 <main+0xa2>
	  }
	  else if (gADC_Voltage >= 7.0f)
 80005d8:	4b2a      	ldr	r3, [pc, #168]	@ (8000684 <main+0x134>)
 80005da:	edd3 7a00 	vldr	s15, [r3]
 80005de:	eeb1 7a0c 	vmov.f32	s14, #28	@ 0x40e00000  7.0
 80005e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005ea:	db02      	blt.n	80005f2 <main+0xa2>
	  {
		  gLowVoltage = 0;
 80005ec:	4b26      	ldr	r3, [pc, #152]	@ (8000688 <main+0x138>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	801a      	strh	r2, [r3, #0]
	  }

	  // --- Control output based on state ---
	  if (gLowVoltage)
 80005f2:	4b25      	ldr	r3, [pc, #148]	@ (8000688 <main+0x138>)
 80005f4:	881b      	ldrh	r3, [r3, #0]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d004      	beq.n	8000604 <main+0xb4>
	  {
		  // Force motor OFF (LED full ON)
	      __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 80005fa:	4b1e      	ldr	r3, [pc, #120]	@ (8000674 <main+0x124>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	2200      	movs	r2, #0
 8000600:	635a      	str	r2, [r3, #52]	@ 0x34
 8000602:	e034      	b.n	800066e <main+0x11e>
	  }
	  else
	  {
		  // Handle button press for mode control
	      if (HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin) == GPIO_PIN_RESET)
 8000604:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000608:	4820      	ldr	r0, [pc, #128]	@ (800068c <main+0x13c>)
 800060a:	f001 fbc1 	bl	8001d90 <HAL_GPIO_ReadPin>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d110      	bne.n	8000636 <main+0xe6>
	      {
	    	  gMode++;
 8000614:	4b1e      	ldr	r3, [pc, #120]	@ (8000690 <main+0x140>)
 8000616:	881b      	ldrh	r3, [r3, #0]
 8000618:	3301      	adds	r3, #1
 800061a:	b29a      	uxth	r2, r3
 800061c:	4b1c      	ldr	r3, [pc, #112]	@ (8000690 <main+0x140>)
 800061e:	801a      	strh	r2, [r3, #0]
	          if (gMode >= 3)
 8000620:	4b1b      	ldr	r3, [pc, #108]	@ (8000690 <main+0x140>)
 8000622:	881b      	ldrh	r3, [r3, #0]
 8000624:	2b02      	cmp	r3, #2
 8000626:	d902      	bls.n	800062e <main+0xde>
	          {
	        	  gMode = 0;
 8000628:	4b19      	ldr	r3, [pc, #100]	@ (8000690 <main+0x140>)
 800062a:	2200      	movs	r2, #0
 800062c:	801a      	strh	r2, [r3, #0]
	          }

	           HAL_Delay(300); // Debounce
 800062e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000632:	f000 fcdb 	bl	8000fec <HAL_Delay>
	          }
	      switch (gMode)
 8000636:	4b16      	ldr	r3, [pc, #88]	@ (8000690 <main+0x140>)
 8000638:	881b      	ldrh	r3, [r3, #0]
 800063a:	2b02      	cmp	r3, #2
 800063c:	d011      	beq.n	8000662 <main+0x112>
 800063e:	2b02      	cmp	r3, #2
 8000640:	dc15      	bgt.n	800066e <main+0x11e>
 8000642:	2b00      	cmp	r3, #0
 8000644:	d002      	beq.n	800064c <main+0xfc>
 8000646:	2b01      	cmp	r3, #1
 8000648:	d005      	beq.n	8000656 <main+0x106>
 800064a:	e010      	b.n	800066e <main+0x11e>
	      	      {
	      	          	  case 0:
	      	          		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0); // OFF
 800064c:	4b09      	ldr	r3, [pc, #36]	@ (8000674 <main+0x124>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	2200      	movs	r2, #0
 8000652:	635a      	str	r2, [r3, #52]	@ 0x34
	      	                  break;
 8000654:	e00b      	b.n	800066e <main+0x11e>
	      	              case 1:
	      	            	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1250); // Low speed
 8000656:	4b07      	ldr	r3, [pc, #28]	@ (8000674 <main+0x124>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 800065e:	635a      	str	r2, [r3, #52]	@ 0x34
	      	                  break;
 8000660:	e005      	b.n	800066e <main+0x11e>
	      	              case 2:
	      	            	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 4000); // Medium speed
 8000662:	4b04      	ldr	r3, [pc, #16]	@ (8000674 <main+0x124>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 800066a:	635a      	str	r2, [r3, #52]	@ 0x34
	      	                  break;
 800066c:	bf00      	nop
	      	           }
	      }

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800066e:	f008 fb63 	bl	8008d38 <MX_USB_HOST_Process>
	  HAL_ADC_Start(&hadc1);
 8000672:	e781      	b.n	8000578 <main+0x28>
 8000674:	20000134 	.word	0x20000134
 8000678:	20000098 	.word	0x20000098
 800067c:	2000017c 	.word	0x2000017c
 8000680:	00000000 	.word	0x00000000
 8000684:	20000180 	.word	0x20000180
 8000688:	20000186 	.word	0x20000186
 800068c:	40020800 	.word	0x40020800
 8000690:	20000184 	.word	0x20000184

08000694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b094      	sub	sp, #80	@ 0x50
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	f107 0320 	add.w	r3, r7, #32
 800069e:	2230      	movs	r2, #48	@ 0x30
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f008 feea 	bl	800947c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a8:	f107 030c 	add.w	r3, r7, #12
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b8:	2300      	movs	r3, #0
 80006ba:	60bb      	str	r3, [r7, #8]
 80006bc:	4b28      	ldr	r3, [pc, #160]	@ (8000760 <SystemClock_Config+0xcc>)
 80006be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c0:	4a27      	ldr	r2, [pc, #156]	@ (8000760 <SystemClock_Config+0xcc>)
 80006c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80006c8:	4b25      	ldr	r3, [pc, #148]	@ (8000760 <SystemClock_Config+0xcc>)
 80006ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006d0:	60bb      	str	r3, [r7, #8]
 80006d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d4:	2300      	movs	r3, #0
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	4b22      	ldr	r3, [pc, #136]	@ (8000764 <SystemClock_Config+0xd0>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a21      	ldr	r2, [pc, #132]	@ (8000764 <SystemClock_Config+0xd0>)
 80006de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006e2:	6013      	str	r3, [r2, #0]
 80006e4:	4b1f      	ldr	r3, [pc, #124]	@ (8000764 <SystemClock_Config+0xd0>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006f0:	2301      	movs	r3, #1
 80006f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006f4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006f8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fa:	2302      	movs	r3, #2
 80006fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006fe:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000702:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000704:	2308      	movs	r3, #8
 8000706:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000708:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800070c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800070e:	2302      	movs	r3, #2
 8000710:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000712:	2307      	movs	r3, #7
 8000714:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000716:	f107 0320 	add.w	r3, r7, #32
 800071a:	4618      	mov	r0, r3
 800071c:	f003 fde2 	bl	80042e4 <HAL_RCC_OscConfig>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000726:	f000 fa31 	bl	8000b8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072a:	230f      	movs	r3, #15
 800072c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800072e:	2302      	movs	r3, #2
 8000730:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000732:	2300      	movs	r3, #0
 8000734:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000736:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800073a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800073c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000740:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000742:	f107 030c 	add.w	r3, r7, #12
 8000746:	2105      	movs	r1, #5
 8000748:	4618      	mov	r0, r3
 800074a:	f004 f843 	bl	80047d4 <HAL_RCC_ClockConfig>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000754:	f000 fa1a 	bl	8000b8c <Error_Handler>
  }
}
 8000758:	bf00      	nop
 800075a:	3750      	adds	r7, #80	@ 0x50
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	40023800 	.word	0x40023800
 8000764:	40007000 	.word	0x40007000

08000768 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800076e:	463b      	mov	r3, r7
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800077a:	4b21      	ldr	r3, [pc, #132]	@ (8000800 <MX_ADC1_Init+0x98>)
 800077c:	4a21      	ldr	r2, [pc, #132]	@ (8000804 <MX_ADC1_Init+0x9c>)
 800077e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000780:	4b1f      	ldr	r3, [pc, #124]	@ (8000800 <MX_ADC1_Init+0x98>)
 8000782:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000786:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000788:	4b1d      	ldr	r3, [pc, #116]	@ (8000800 <MX_ADC1_Init+0x98>)
 800078a:	2200      	movs	r2, #0
 800078c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800078e:	4b1c      	ldr	r3, [pc, #112]	@ (8000800 <MX_ADC1_Init+0x98>)
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000794:	4b1a      	ldr	r3, [pc, #104]	@ (8000800 <MX_ADC1_Init+0x98>)
 8000796:	2200      	movs	r2, #0
 8000798:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800079a:	4b19      	ldr	r3, [pc, #100]	@ (8000800 <MX_ADC1_Init+0x98>)
 800079c:	2200      	movs	r2, #0
 800079e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007a2:	4b17      	ldr	r3, [pc, #92]	@ (8000800 <MX_ADC1_Init+0x98>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007a8:	4b15      	ldr	r3, [pc, #84]	@ (8000800 <MX_ADC1_Init+0x98>)
 80007aa:	4a17      	ldr	r2, [pc, #92]	@ (8000808 <MX_ADC1_Init+0xa0>)
 80007ac:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007ae:	4b14      	ldr	r3, [pc, #80]	@ (8000800 <MX_ADC1_Init+0x98>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007b4:	4b12      	ldr	r3, [pc, #72]	@ (8000800 <MX_ADC1_Init+0x98>)
 80007b6:	2201      	movs	r2, #1
 80007b8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007ba:	4b11      	ldr	r3, [pc, #68]	@ (8000800 <MX_ADC1_Init+0x98>)
 80007bc:	2200      	movs	r2, #0
 80007be:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000800 <MX_ADC1_Init+0x98>)
 80007c4:	2201      	movs	r2, #1
 80007c6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007c8:	480d      	ldr	r0, [pc, #52]	@ (8000800 <MX_ADC1_Init+0x98>)
 80007ca:	f000 fc33 	bl	8001034 <HAL_ADC_Init>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80007d4:	f000 f9da 	bl	8000b8c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007d8:	2301      	movs	r3, #1
 80007da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007dc:	2301      	movs	r3, #1
 80007de:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80007e0:	2307      	movs	r3, #7
 80007e2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007e4:	463b      	mov	r3, r7
 80007e6:	4619      	mov	r1, r3
 80007e8:	4805      	ldr	r0, [pc, #20]	@ (8000800 <MX_ADC1_Init+0x98>)
 80007ea:	f000 fe05 	bl	80013f8 <HAL_ADC_ConfigChannel>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007f4:	f000 f9ca 	bl	8000b8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007f8:	bf00      	nop
 80007fa:	3710      	adds	r7, #16
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20000098 	.word	0x20000098
 8000804:	40012000 	.word	0x40012000
 8000808:	0f000001 	.word	0x0f000001

0800080c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000810:	4b12      	ldr	r3, [pc, #72]	@ (800085c <MX_I2C1_Init+0x50>)
 8000812:	4a13      	ldr	r2, [pc, #76]	@ (8000860 <MX_I2C1_Init+0x54>)
 8000814:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000816:	4b11      	ldr	r3, [pc, #68]	@ (800085c <MX_I2C1_Init+0x50>)
 8000818:	4a12      	ldr	r2, [pc, #72]	@ (8000864 <MX_I2C1_Init+0x58>)
 800081a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800081c:	4b0f      	ldr	r3, [pc, #60]	@ (800085c <MX_I2C1_Init+0x50>)
 800081e:	2200      	movs	r2, #0
 8000820:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000822:	4b0e      	ldr	r3, [pc, #56]	@ (800085c <MX_I2C1_Init+0x50>)
 8000824:	2200      	movs	r2, #0
 8000826:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000828:	4b0c      	ldr	r3, [pc, #48]	@ (800085c <MX_I2C1_Init+0x50>)
 800082a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800082e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000830:	4b0a      	ldr	r3, [pc, #40]	@ (800085c <MX_I2C1_Init+0x50>)
 8000832:	2200      	movs	r2, #0
 8000834:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000836:	4b09      	ldr	r3, [pc, #36]	@ (800085c <MX_I2C1_Init+0x50>)
 8000838:	2200      	movs	r2, #0
 800083a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800083c:	4b07      	ldr	r3, [pc, #28]	@ (800085c <MX_I2C1_Init+0x50>)
 800083e:	2200      	movs	r2, #0
 8000840:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000842:	4b06      	ldr	r3, [pc, #24]	@ (800085c <MX_I2C1_Init+0x50>)
 8000844:	2200      	movs	r2, #0
 8000846:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000848:	4804      	ldr	r0, [pc, #16]	@ (800085c <MX_I2C1_Init+0x50>)
 800084a:	f003 fc07 	bl	800405c <HAL_I2C_Init>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000854:	f000 f99a 	bl	8000b8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000858:	bf00      	nop
 800085a:	bd80      	pop	{r7, pc}
 800085c:	200000e0 	.word	0x200000e0
 8000860:	40005400 	.word	0x40005400
 8000864:	000186a0 	.word	0x000186a0

08000868 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b08e      	sub	sp, #56	@ 0x38
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800086e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]
 8000878:	609a      	str	r2, [r3, #8]
 800087a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800087c:	f107 0320 	add.w	r3, r7, #32
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000886:	1d3b      	adds	r3, r7, #4
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
 8000890:	60da      	str	r2, [r3, #12]
 8000892:	611a      	str	r2, [r3, #16]
 8000894:	615a      	str	r2, [r3, #20]
 8000896:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000898:	4b2d      	ldr	r3, [pc, #180]	@ (8000950 <MX_TIM2_Init+0xe8>)
 800089a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800089e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8399;
 80008a0:	4b2b      	ldr	r3, [pc, #172]	@ (8000950 <MX_TIM2_Init+0xe8>)
 80008a2:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80008a6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a8:	4b29      	ldr	r3, [pc, #164]	@ (8000950 <MX_TIM2_Init+0xe8>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4999;
 80008ae:	4b28      	ldr	r3, [pc, #160]	@ (8000950 <MX_TIM2_Init+0xe8>)
 80008b0:	f241 3287 	movw	r2, #4999	@ 0x1387
 80008b4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008b6:	4b26      	ldr	r3, [pc, #152]	@ (8000950 <MX_TIM2_Init+0xe8>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008bc:	4b24      	ldr	r3, [pc, #144]	@ (8000950 <MX_TIM2_Init+0xe8>)
 80008be:	2200      	movs	r2, #0
 80008c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008c2:	4823      	ldr	r0, [pc, #140]	@ (8000950 <MX_TIM2_Init+0xe8>)
 80008c4:	f004 f992 	bl	8004bec <HAL_TIM_Base_Init>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80008ce:	f000 f95d 	bl	8000b8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008d8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008dc:	4619      	mov	r1, r3
 80008de:	481c      	ldr	r0, [pc, #112]	@ (8000950 <MX_TIM2_Init+0xe8>)
 80008e0:	f004 fbb6 	bl	8005050 <HAL_TIM_ConfigClockSource>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80008ea:	f000 f94f 	bl	8000b8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80008ee:	4818      	ldr	r0, [pc, #96]	@ (8000950 <MX_TIM2_Init+0xe8>)
 80008f0:	f004 f9cb 	bl	8004c8a <HAL_TIM_PWM_Init>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80008fa:	f000 f947 	bl	8000b8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80008fe:	2320      	movs	r3, #32
 8000900:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000902:	2300      	movs	r3, #0
 8000904:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000906:	f107 0320 	add.w	r3, r7, #32
 800090a:	4619      	mov	r1, r3
 800090c:	4810      	ldr	r0, [pc, #64]	@ (8000950 <MX_TIM2_Init+0xe8>)
 800090e:	f004 ff83 	bl	8005818 <HAL_TIMEx_MasterConfigSynchronization>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000918:	f000 f938 	bl	8000b8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800091c:	2360      	movs	r3, #96	@ 0x60
 800091e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1;
 8000920:	2301      	movs	r3, #1
 8000922:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000924:	2300      	movs	r3, #0
 8000926:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000928:	2300      	movs	r3, #0
 800092a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800092c:	1d3b      	adds	r3, r7, #4
 800092e:	2200      	movs	r2, #0
 8000930:	4619      	mov	r1, r3
 8000932:	4807      	ldr	r0, [pc, #28]	@ (8000950 <MX_TIM2_Init+0xe8>)
 8000934:	f004 faca 	bl	8004ecc <HAL_TIM_PWM_ConfigChannel>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800093e:	f000 f925 	bl	8000b8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000942:	4803      	ldr	r0, [pc, #12]	@ (8000950 <MX_TIM2_Init+0xe8>)
 8000944:	f000 f9fc 	bl	8000d40 <HAL_TIM_MspPostInit>

}
 8000948:	bf00      	nop
 800094a:	3738      	adds	r7, #56	@ 0x38
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20000134 	.word	0x20000134

08000954 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b08c      	sub	sp, #48	@ 0x30
 8000958:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095a:	f107 031c 	add.w	r3, r7, #28
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	605a      	str	r2, [r3, #4]
 8000964:	609a      	str	r2, [r3, #8]
 8000966:	60da      	str	r2, [r3, #12]
 8000968:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	61bb      	str	r3, [r7, #24]
 800096e:	4b81      	ldr	r3, [pc, #516]	@ (8000b74 <MX_GPIO_Init+0x220>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000972:	4a80      	ldr	r2, [pc, #512]	@ (8000b74 <MX_GPIO_Init+0x220>)
 8000974:	f043 0310 	orr.w	r3, r3, #16
 8000978:	6313      	str	r3, [r2, #48]	@ 0x30
 800097a:	4b7e      	ldr	r3, [pc, #504]	@ (8000b74 <MX_GPIO_Init+0x220>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097e:	f003 0310 	and.w	r3, r3, #16
 8000982:	61bb      	str	r3, [r7, #24]
 8000984:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	617b      	str	r3, [r7, #20]
 800098a:	4b7a      	ldr	r3, [pc, #488]	@ (8000b74 <MX_GPIO_Init+0x220>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098e:	4a79      	ldr	r2, [pc, #484]	@ (8000b74 <MX_GPIO_Init+0x220>)
 8000990:	f043 0304 	orr.w	r3, r3, #4
 8000994:	6313      	str	r3, [r2, #48]	@ 0x30
 8000996:	4b77      	ldr	r3, [pc, #476]	@ (8000b74 <MX_GPIO_Init+0x220>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099a:	f003 0304 	and.w	r3, r3, #4
 800099e:	617b      	str	r3, [r7, #20]
 80009a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	613b      	str	r3, [r7, #16]
 80009a6:	4b73      	ldr	r3, [pc, #460]	@ (8000b74 <MX_GPIO_Init+0x220>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009aa:	4a72      	ldr	r2, [pc, #456]	@ (8000b74 <MX_GPIO_Init+0x220>)
 80009ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009b2:	4b70      	ldr	r3, [pc, #448]	@ (8000b74 <MX_GPIO_Init+0x220>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009ba:	613b      	str	r3, [r7, #16]
 80009bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	60fb      	str	r3, [r7, #12]
 80009c2:	4b6c      	ldr	r3, [pc, #432]	@ (8000b74 <MX_GPIO_Init+0x220>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c6:	4a6b      	ldr	r2, [pc, #428]	@ (8000b74 <MX_GPIO_Init+0x220>)
 80009c8:	f043 0301 	orr.w	r3, r3, #1
 80009cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ce:	4b69      	ldr	r3, [pc, #420]	@ (8000b74 <MX_GPIO_Init+0x220>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d2:	f003 0301 	and.w	r3, r3, #1
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	60bb      	str	r3, [r7, #8]
 80009de:	4b65      	ldr	r3, [pc, #404]	@ (8000b74 <MX_GPIO_Init+0x220>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e2:	4a64      	ldr	r2, [pc, #400]	@ (8000b74 <MX_GPIO_Init+0x220>)
 80009e4:	f043 0302 	orr.w	r3, r3, #2
 80009e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ea:	4b62      	ldr	r3, [pc, #392]	@ (8000b74 <MX_GPIO_Init+0x220>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ee:	f003 0302 	and.w	r3, r3, #2
 80009f2:	60bb      	str	r3, [r7, #8]
 80009f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	607b      	str	r3, [r7, #4]
 80009fa:	4b5e      	ldr	r3, [pc, #376]	@ (8000b74 <MX_GPIO_Init+0x220>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fe:	4a5d      	ldr	r2, [pc, #372]	@ (8000b74 <MX_GPIO_Init+0x220>)
 8000a00:	f043 0308 	orr.w	r3, r3, #8
 8000a04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a06:	4b5b      	ldr	r3, [pc, #364]	@ (8000b74 <MX_GPIO_Init+0x220>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0a:	f003 0308 	and.w	r3, r3, #8
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000a12:	2200      	movs	r2, #0
 8000a14:	2108      	movs	r1, #8
 8000a16:	4858      	ldr	r0, [pc, #352]	@ (8000b78 <MX_GPIO_Init+0x224>)
 8000a18:	f001 f9d2 	bl	8001dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	2101      	movs	r1, #1
 8000a20:	4856      	ldr	r0, [pc, #344]	@ (8000b7c <MX_GPIO_Init+0x228>)
 8000a22:	f001 f9cd 	bl	8001dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a26:	2200      	movs	r2, #0
 8000a28:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000a2c:	4854      	ldr	r0, [pc, #336]	@ (8000b80 <MX_GPIO_Init+0x22c>)
 8000a2e:	f001 f9c7 	bl	8001dc0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000a32:	2308      	movs	r3, #8
 8000a34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a36:	2301      	movs	r3, #1
 8000a38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000a42:	f107 031c 	add.w	r3, r7, #28
 8000a46:	4619      	mov	r1, r3
 8000a48:	484b      	ldr	r0, [pc, #300]	@ (8000b78 <MX_GPIO_Init+0x224>)
 8000a4a:	f001 f805 	bl	8001a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a52:	2301      	movs	r3, #1
 8000a54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a5e:	f107 031c 	add.w	r3, r7, #28
 8000a62:	4619      	mov	r1, r3
 8000a64:	4845      	ldr	r0, [pc, #276]	@ (8000b7c <MX_GPIO_Init+0x228>)
 8000a66:	f000 fff7 	bl	8001a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000a6a:	2308      	movs	r3, #8
 8000a6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a76:	2300      	movs	r3, #0
 8000a78:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a7a:	2305      	movs	r3, #5
 8000a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000a7e:	f107 031c 	add.w	r3, r7, #28
 8000a82:	4619      	mov	r1, r3
 8000a84:	483d      	ldr	r0, [pc, #244]	@ (8000b7c <MX_GPIO_Init+0x228>)
 8000a86:	f000 ffe7 	bl	8001a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a8e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000a92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a98:	f107 031c 	add.w	r3, r7, #28
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4839      	ldr	r0, [pc, #228]	@ (8000b84 <MX_GPIO_Init+0x230>)
 8000aa0:	f000 ffda 	bl	8001a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000aa4:	2304      	movs	r3, #4
 8000aa6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000ab0:	f107 031c 	add.w	r3, r7, #28
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4834      	ldr	r0, [pc, #208]	@ (8000b88 <MX_GPIO_Init+0x234>)
 8000ab8:	f000 ffce 	bl	8001a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000abc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ac0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aca:	2300      	movs	r3, #0
 8000acc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ace:	2305      	movs	r3, #5
 8000ad0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000ad2:	f107 031c 	add.w	r3, r7, #28
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	482b      	ldr	r0, [pc, #172]	@ (8000b88 <MX_GPIO_Init+0x234>)
 8000ada:	f000 ffbd 	bl	8001a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000ade:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000ae2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aec:	2300      	movs	r3, #0
 8000aee:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000af0:	f107 031c 	add.w	r3, r7, #28
 8000af4:	4619      	mov	r1, r3
 8000af6:	4822      	ldr	r0, [pc, #136]	@ (8000b80 <MX_GPIO_Init+0x22c>)
 8000af8:	f000 ffae 	bl	8001a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000afc:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000b00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b02:	2302      	movs	r3, #2
 8000b04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b0e:	2306      	movs	r3, #6
 8000b10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b12:	f107 031c 	add.w	r3, r7, #28
 8000b16:	4619      	mov	r1, r3
 8000b18:	4818      	ldr	r0, [pc, #96]	@ (8000b7c <MX_GPIO_Init+0x228>)
 8000b1a:	f000 ff9d 	bl	8001a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000b1e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b24:	2300      	movs	r3, #0
 8000b26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000b2c:	f107 031c 	add.w	r3, r7, #28
 8000b30:	4619      	mov	r1, r3
 8000b32:	4812      	ldr	r0, [pc, #72]	@ (8000b7c <MX_GPIO_Init+0x228>)
 8000b34:	f000 ff90 	bl	8001a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b38:	2320      	movs	r3, #32
 8000b3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b44:	f107 031c 	add.w	r3, r7, #28
 8000b48:	4619      	mov	r1, r3
 8000b4a:	480d      	ldr	r0, [pc, #52]	@ (8000b80 <MX_GPIO_Init+0x22c>)
 8000b4c:	f000 ff84 	bl	8001a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000b50:	2302      	movs	r3, #2
 8000b52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b54:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000b58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000b5e:	f107 031c 	add.w	r3, r7, #28
 8000b62:	4619      	mov	r1, r3
 8000b64:	4804      	ldr	r0, [pc, #16]	@ (8000b78 <MX_GPIO_Init+0x224>)
 8000b66:	f000 ff77 	bl	8001a58 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b6a:	bf00      	nop
 8000b6c:	3730      	adds	r7, #48	@ 0x30
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40023800 	.word	0x40023800
 8000b78:	40021000 	.word	0x40021000
 8000b7c:	40020800 	.word	0x40020800
 8000b80:	40020c00 	.word	0x40020c00
 8000b84:	40020000 	.word	0x40020000
 8000b88:	40020400 	.word	0x40020400

08000b8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b90:	b672      	cpsid	i
}
 8000b92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b94:	bf00      	nop
 8000b96:	e7fd      	b.n	8000b94 <Error_Handler+0x8>

08000b98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	607b      	str	r3, [r7, #4]
 8000ba2:	4b10      	ldr	r3, [pc, #64]	@ (8000be4 <HAL_MspInit+0x4c>)
 8000ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ba6:	4a0f      	ldr	r2, [pc, #60]	@ (8000be4 <HAL_MspInit+0x4c>)
 8000ba8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bac:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bae:	4b0d      	ldr	r3, [pc, #52]	@ (8000be4 <HAL_MspInit+0x4c>)
 8000bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bb6:	607b      	str	r3, [r7, #4]
 8000bb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	603b      	str	r3, [r7, #0]
 8000bbe:	4b09      	ldr	r3, [pc, #36]	@ (8000be4 <HAL_MspInit+0x4c>)
 8000bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc2:	4a08      	ldr	r2, [pc, #32]	@ (8000be4 <HAL_MspInit+0x4c>)
 8000bc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bca:	4b06      	ldr	r3, [pc, #24]	@ (8000be4 <HAL_MspInit+0x4c>)
 8000bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bd2:	603b      	str	r3, [r7, #0]
 8000bd4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bd6:	2007      	movs	r0, #7
 8000bd8:	f000 fefc 	bl	80019d4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bdc:	bf00      	nop
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	40023800 	.word	0x40023800

08000be8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b08a      	sub	sp, #40	@ 0x28
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf0:	f107 0314 	add.w	r3, r7, #20
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
 8000bfe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a17      	ldr	r2, [pc, #92]	@ (8000c64 <HAL_ADC_MspInit+0x7c>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d127      	bne.n	8000c5a <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	613b      	str	r3, [r7, #16]
 8000c0e:	4b16      	ldr	r3, [pc, #88]	@ (8000c68 <HAL_ADC_MspInit+0x80>)
 8000c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c12:	4a15      	ldr	r2, [pc, #84]	@ (8000c68 <HAL_ADC_MspInit+0x80>)
 8000c14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c18:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c1a:	4b13      	ldr	r3, [pc, #76]	@ (8000c68 <HAL_ADC_MspInit+0x80>)
 8000c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c22:	613b      	str	r3, [r7, #16]
 8000c24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c68 <HAL_ADC_MspInit+0x80>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2e:	4a0e      	ldr	r2, [pc, #56]	@ (8000c68 <HAL_ADC_MspInit+0x80>)
 8000c30:	f043 0301 	orr.w	r3, r3, #1
 8000c34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c36:	4b0c      	ldr	r3, [pc, #48]	@ (8000c68 <HAL_ADC_MspInit+0x80>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c42:	2302      	movs	r3, #2
 8000c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c46:	2303      	movs	r3, #3
 8000c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	4805      	ldr	r0, [pc, #20]	@ (8000c6c <HAL_ADC_MspInit+0x84>)
 8000c56:	f000 feff 	bl	8001a58 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000c5a:	bf00      	nop
 8000c5c:	3728      	adds	r7, #40	@ 0x28
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40012000 	.word	0x40012000
 8000c68:	40023800 	.word	0x40023800
 8000c6c:	40020000 	.word	0x40020000

08000c70 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b08a      	sub	sp, #40	@ 0x28
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c78:	f107 0314 	add.w	r3, r7, #20
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
 8000c86:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a19      	ldr	r2, [pc, #100]	@ (8000cf4 <HAL_I2C_MspInit+0x84>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d12c      	bne.n	8000cec <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	613b      	str	r3, [r7, #16]
 8000c96:	4b18      	ldr	r3, [pc, #96]	@ (8000cf8 <HAL_I2C_MspInit+0x88>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9a:	4a17      	ldr	r2, [pc, #92]	@ (8000cf8 <HAL_I2C_MspInit+0x88>)
 8000c9c:	f043 0302 	orr.w	r3, r3, #2
 8000ca0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ca2:	4b15      	ldr	r3, [pc, #84]	@ (8000cf8 <HAL_I2C_MspInit+0x88>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca6:	f003 0302 	and.w	r3, r3, #2
 8000caa:	613b      	str	r3, [r7, #16]
 8000cac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000cae:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000cb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cb4:	2312      	movs	r3, #18
 8000cb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cc0:	2304      	movs	r3, #4
 8000cc2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc4:	f107 0314 	add.w	r3, r7, #20
 8000cc8:	4619      	mov	r1, r3
 8000cca:	480c      	ldr	r0, [pc, #48]	@ (8000cfc <HAL_I2C_MspInit+0x8c>)
 8000ccc:	f000 fec4 	bl	8001a58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	4b08      	ldr	r3, [pc, #32]	@ (8000cf8 <HAL_I2C_MspInit+0x88>)
 8000cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd8:	4a07      	ldr	r2, [pc, #28]	@ (8000cf8 <HAL_I2C_MspInit+0x88>)
 8000cda:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000cde:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ce0:	4b05      	ldr	r3, [pc, #20]	@ (8000cf8 <HAL_I2C_MspInit+0x88>)
 8000ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ce4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ce8:	60fb      	str	r3, [r7, #12]
 8000cea:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000cec:	bf00      	nop
 8000cee:	3728      	adds	r7, #40	@ 0x28
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40005400 	.word	0x40005400
 8000cf8:	40023800 	.word	0x40023800
 8000cfc:	40020400 	.word	0x40020400

08000d00 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b085      	sub	sp, #20
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d10:	d10d      	bne.n	8000d2e <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	4b09      	ldr	r3, [pc, #36]	@ (8000d3c <HAL_TIM_Base_MspInit+0x3c>)
 8000d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d1a:	4a08      	ldr	r2, [pc, #32]	@ (8000d3c <HAL_TIM_Base_MspInit+0x3c>)
 8000d1c:	f043 0301 	orr.w	r3, r3, #1
 8000d20:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d22:	4b06      	ldr	r3, [pc, #24]	@ (8000d3c <HAL_TIM_Base_MspInit+0x3c>)
 8000d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d26:	f003 0301 	and.w	r3, r3, #1
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000d2e:	bf00      	nop
 8000d30:	3714      	adds	r7, #20
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	40023800 	.word	0x40023800

08000d40 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b088      	sub	sp, #32
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d48:	f107 030c 	add.w	r3, r7, #12
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	60da      	str	r2, [r3, #12]
 8000d56:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d60:	d11d      	bne.n	8000d9e <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	60bb      	str	r3, [r7, #8]
 8000d66:	4b10      	ldr	r3, [pc, #64]	@ (8000da8 <HAL_TIM_MspPostInit+0x68>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6a:	4a0f      	ldr	r2, [pc, #60]	@ (8000da8 <HAL_TIM_MspPostInit+0x68>)
 8000d6c:	f043 0301 	orr.w	r3, r3, #1
 8000d70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d72:	4b0d      	ldr	r3, [pc, #52]	@ (8000da8 <HAL_TIM_MspPostInit+0x68>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d76:	f003 0301 	and.w	r3, r3, #1
 8000d7a:	60bb      	str	r3, [r7, #8]
 8000d7c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000d7e:	2320      	movs	r3, #32
 8000d80:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d82:	2302      	movs	r3, #2
 8000d84:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d92:	f107 030c 	add.w	r3, r7, #12
 8000d96:	4619      	mov	r1, r3
 8000d98:	4804      	ldr	r0, [pc, #16]	@ (8000dac <HAL_TIM_MspPostInit+0x6c>)
 8000d9a:	f000 fe5d 	bl	8001a58 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000d9e:	bf00      	nop
 8000da0:	3720      	adds	r7, #32
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40023800 	.word	0x40023800
 8000dac:	40020000 	.word	0x40020000

08000db0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000db4:	bf00      	nop
 8000db6:	e7fd      	b.n	8000db4 <NMI_Handler+0x4>

08000db8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dbc:	bf00      	nop
 8000dbe:	e7fd      	b.n	8000dbc <HardFault_Handler+0x4>

08000dc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dc4:	bf00      	nop
 8000dc6:	e7fd      	b.n	8000dc4 <MemManage_Handler+0x4>

08000dc8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dcc:	bf00      	nop
 8000dce:	e7fd      	b.n	8000dcc <BusFault_Handler+0x4>

08000dd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dd4:	bf00      	nop
 8000dd6:	e7fd      	b.n	8000dd4 <UsageFault_Handler+0x4>

08000dd8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr

08000de6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000de6:	b480      	push	{r7}
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr

08000e02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e06:	f000 f8d1 	bl	8000fac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
	...

08000e10 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000e14:	4802      	ldr	r0, [pc, #8]	@ (8000e20 <OTG_FS_IRQHandler+0x10>)
 8000e16:	f001 facd 	bl	80023b4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	2000056c 	.word	0x2000056c

08000e24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e2c:	4a14      	ldr	r2, [pc, #80]	@ (8000e80 <_sbrk+0x5c>)
 8000e2e:	4b15      	ldr	r3, [pc, #84]	@ (8000e84 <_sbrk+0x60>)
 8000e30:	1ad3      	subs	r3, r2, r3
 8000e32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e38:	4b13      	ldr	r3, [pc, #76]	@ (8000e88 <_sbrk+0x64>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d102      	bne.n	8000e46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e40:	4b11      	ldr	r3, [pc, #68]	@ (8000e88 <_sbrk+0x64>)
 8000e42:	4a12      	ldr	r2, [pc, #72]	@ (8000e8c <_sbrk+0x68>)
 8000e44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e46:	4b10      	ldr	r3, [pc, #64]	@ (8000e88 <_sbrk+0x64>)
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d207      	bcs.n	8000e64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e54:	f008 fb2a 	bl	80094ac <__errno>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	220c      	movs	r2, #12
 8000e5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e62:	e009      	b.n	8000e78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e64:	4b08      	ldr	r3, [pc, #32]	@ (8000e88 <_sbrk+0x64>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e6a:	4b07      	ldr	r3, [pc, #28]	@ (8000e88 <_sbrk+0x64>)
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4413      	add	r3, r2
 8000e72:	4a05      	ldr	r2, [pc, #20]	@ (8000e88 <_sbrk+0x64>)
 8000e74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e76:	68fb      	ldr	r3, [r7, #12]
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3718      	adds	r7, #24
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20020000 	.word	0x20020000
 8000e84:	00000400 	.word	0x00000400
 8000e88:	20000188 	.word	0x20000188
 8000e8c:	20000a98 	.word	0x20000a98

08000e90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e94:	4b06      	ldr	r3, [pc, #24]	@ (8000eb0 <SystemInit+0x20>)
 8000e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e9a:	4a05      	ldr	r2, [pc, #20]	@ (8000eb0 <SystemInit+0x20>)
 8000e9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ea0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000eb4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000eec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000eb8:	f7ff ffea 	bl	8000e90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ebc:	480c      	ldr	r0, [pc, #48]	@ (8000ef0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ebe:	490d      	ldr	r1, [pc, #52]	@ (8000ef4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ec0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ef8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ec2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ec4:	e002      	b.n	8000ecc <LoopCopyDataInit>

08000ec6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ec6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ec8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eca:	3304      	adds	r3, #4

08000ecc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ecc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ece:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ed0:	d3f9      	bcc.n	8000ec6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ed2:	4a0a      	ldr	r2, [pc, #40]	@ (8000efc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ed4:	4c0a      	ldr	r4, [pc, #40]	@ (8000f00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ed6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ed8:	e001      	b.n	8000ede <LoopFillZerobss>

08000eda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000edc:	3204      	adds	r2, #4

08000ede <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ede:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ee0:	d3fb      	bcc.n	8000eda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ee2:	f008 fae9 	bl	80094b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ee6:	f7ff fb33 	bl	8000550 <main>
  bx  lr    
 8000eea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000eec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ef0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ef4:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000ef8:	080095dc 	.word	0x080095dc
  ldr r2, =_sbss
 8000efc:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000f00:	20000a94 	.word	0x20000a94

08000f04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f04:	e7fe      	b.n	8000f04 <ADC_IRQHandler>
	...

08000f08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000f48 <HAL_Init+0x40>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a0d      	ldr	r2, [pc, #52]	@ (8000f48 <HAL_Init+0x40>)
 8000f12:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f18:	4b0b      	ldr	r3, [pc, #44]	@ (8000f48 <HAL_Init+0x40>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a0a      	ldr	r2, [pc, #40]	@ (8000f48 <HAL_Init+0x40>)
 8000f1e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f24:	4b08      	ldr	r3, [pc, #32]	@ (8000f48 <HAL_Init+0x40>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a07      	ldr	r2, [pc, #28]	@ (8000f48 <HAL_Init+0x40>)
 8000f2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f30:	2003      	movs	r0, #3
 8000f32:	f000 fd4f 	bl	80019d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f36:	2000      	movs	r0, #0
 8000f38:	f000 f808 	bl	8000f4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f3c:	f7ff fe2c 	bl	8000b98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f40:	2300      	movs	r3, #0
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40023c00 	.word	0x40023c00

08000f4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f54:	4b12      	ldr	r3, [pc, #72]	@ (8000fa0 <HAL_InitTick+0x54>)
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	4b12      	ldr	r3, [pc, #72]	@ (8000fa4 <HAL_InitTick+0x58>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f000 fd67 	bl	8001a3e <HAL_SYSTICK_Config>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
 8000f78:	e00e      	b.n	8000f98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2b0f      	cmp	r3, #15
 8000f7e:	d80a      	bhi.n	8000f96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f80:	2200      	movs	r2, #0
 8000f82:	6879      	ldr	r1, [r7, #4]
 8000f84:	f04f 30ff 	mov.w	r0, #4294967295
 8000f88:	f000 fd2f 	bl	80019ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f8c:	4a06      	ldr	r2, [pc, #24]	@ (8000fa8 <HAL_InitTick+0x5c>)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f92:	2300      	movs	r3, #0
 8000f94:	e000      	b.n	8000f98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	20000000 	.word	0x20000000
 8000fa4:	20000008 	.word	0x20000008
 8000fa8:	20000004 	.word	0x20000004

08000fac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fb0:	4b06      	ldr	r3, [pc, #24]	@ (8000fcc <HAL_IncTick+0x20>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	4b06      	ldr	r3, [pc, #24]	@ (8000fd0 <HAL_IncTick+0x24>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4413      	add	r3, r2
 8000fbc:	4a04      	ldr	r2, [pc, #16]	@ (8000fd0 <HAL_IncTick+0x24>)
 8000fbe:	6013      	str	r3, [r2, #0]
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	20000008 	.word	0x20000008
 8000fd0:	2000018c 	.word	0x2000018c

08000fd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fd8:	4b03      	ldr	r3, [pc, #12]	@ (8000fe8 <HAL_GetTick+0x14>)
 8000fda:	681b      	ldr	r3, [r3, #0]
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	2000018c 	.word	0x2000018c

08000fec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ff4:	f7ff ffee 	bl	8000fd4 <HAL_GetTick>
 8000ff8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001004:	d005      	beq.n	8001012 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001006:	4b0a      	ldr	r3, [pc, #40]	@ (8001030 <HAL_Delay+0x44>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	461a      	mov	r2, r3
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	4413      	add	r3, r2
 8001010:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001012:	bf00      	nop
 8001014:	f7ff ffde 	bl	8000fd4 <HAL_GetTick>
 8001018:	4602      	mov	r2, r0
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	68fa      	ldr	r2, [r7, #12]
 8001020:	429a      	cmp	r2, r3
 8001022:	d8f7      	bhi.n	8001014 <HAL_Delay+0x28>
  {
  }
}
 8001024:	bf00      	nop
 8001026:	bf00      	nop
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20000008 	.word	0x20000008

08001034 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800103c:	2300      	movs	r3, #0
 800103e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d101      	bne.n	800104a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e033      	b.n	80010b2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800104e:	2b00      	cmp	r3, #0
 8001050:	d109      	bne.n	8001066 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f7ff fdc8 	bl	8000be8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2200      	movs	r2, #0
 800105c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2200      	movs	r2, #0
 8001062:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800106a:	f003 0310 	and.w	r3, r3, #16
 800106e:	2b00      	cmp	r3, #0
 8001070:	d118      	bne.n	80010a4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001076:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800107a:	f023 0302 	bic.w	r3, r3, #2
 800107e:	f043 0202 	orr.w	r2, r3, #2
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f000 fad8 	bl	800163c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2200      	movs	r2, #0
 8001090:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001096:	f023 0303 	bic.w	r3, r3, #3
 800109a:	f043 0201 	orr.w	r2, r3, #1
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	641a      	str	r2, [r3, #64]	@ 0x40
 80010a2:	e001      	b.n	80010a8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010a4:	2301      	movs	r3, #1
 80010a6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2200      	movs	r2, #0
 80010ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
	...

080010bc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80010bc:	b480      	push	{r7}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80010c4:	2300      	movs	r3, #0
 80010c6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d101      	bne.n	80010d6 <HAL_ADC_Start+0x1a>
 80010d2:	2302      	movs	r3, #2
 80010d4:	e0b2      	b.n	800123c <HAL_ADC_Start+0x180>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2201      	movs	r2, #1
 80010da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	f003 0301 	and.w	r3, r3, #1
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d018      	beq.n	800111e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	689a      	ldr	r2, [r3, #8]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f042 0201 	orr.w	r2, r2, #1
 80010fa:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80010fc:	4b52      	ldr	r3, [pc, #328]	@ (8001248 <HAL_ADC_Start+0x18c>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a52      	ldr	r2, [pc, #328]	@ (800124c <HAL_ADC_Start+0x190>)
 8001102:	fba2 2303 	umull	r2, r3, r2, r3
 8001106:	0c9a      	lsrs	r2, r3, #18
 8001108:	4613      	mov	r3, r2
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	4413      	add	r3, r2
 800110e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001110:	e002      	b.n	8001118 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	3b01      	subs	r3, #1
 8001116:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d1f9      	bne.n	8001112 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	f003 0301 	and.w	r3, r3, #1
 8001128:	2b01      	cmp	r3, #1
 800112a:	d17a      	bne.n	8001222 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001130:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001134:	f023 0301 	bic.w	r3, r3, #1
 8001138:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800114a:	2b00      	cmp	r3, #0
 800114c:	d007      	beq.n	800115e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001152:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001156:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001162:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001166:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800116a:	d106      	bne.n	800117a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001170:	f023 0206 	bic.w	r2, r3, #6
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	645a      	str	r2, [r3, #68]	@ 0x44
 8001178:	e002      	b.n	8001180 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2200      	movs	r2, #0
 800117e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2200      	movs	r2, #0
 8001184:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001188:	4b31      	ldr	r3, [pc, #196]	@ (8001250 <HAL_ADC_Start+0x194>)
 800118a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001194:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f003 031f 	and.w	r3, r3, #31
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d12a      	bne.n	80011f8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a2b      	ldr	r2, [pc, #172]	@ (8001254 <HAL_ADC_Start+0x198>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d015      	beq.n	80011d8 <HAL_ADC_Start+0x11c>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a29      	ldr	r2, [pc, #164]	@ (8001258 <HAL_ADC_Start+0x19c>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d105      	bne.n	80011c2 <HAL_ADC_Start+0x106>
 80011b6:	4b26      	ldr	r3, [pc, #152]	@ (8001250 <HAL_ADC_Start+0x194>)
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f003 031f 	and.w	r3, r3, #31
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d00a      	beq.n	80011d8 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a25      	ldr	r2, [pc, #148]	@ (800125c <HAL_ADC_Start+0x1a0>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d136      	bne.n	800123a <HAL_ADC_Start+0x17e>
 80011cc:	4b20      	ldr	r3, [pc, #128]	@ (8001250 <HAL_ADC_Start+0x194>)
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f003 0310 	and.w	r3, r3, #16
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d130      	bne.n	800123a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d129      	bne.n	800123a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	689a      	ldr	r2, [r3, #8]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80011f4:	609a      	str	r2, [r3, #8]
 80011f6:	e020      	b.n	800123a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a15      	ldr	r2, [pc, #84]	@ (8001254 <HAL_ADC_Start+0x198>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d11b      	bne.n	800123a <HAL_ADC_Start+0x17e>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800120c:	2b00      	cmp	r3, #0
 800120e:	d114      	bne.n	800123a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	689a      	ldr	r2, [r3, #8]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	e00b      	b.n	800123a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001226:	f043 0210 	orr.w	r2, r3, #16
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001232:	f043 0201 	orr.w	r2, r3, #1
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800123a:	2300      	movs	r3, #0
}
 800123c:	4618      	mov	r0, r3
 800123e:	3714      	adds	r7, #20
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	20000000 	.word	0x20000000
 800124c:	431bde83 	.word	0x431bde83
 8001250:	40012300 	.word	0x40012300
 8001254:	40012000 	.word	0x40012000
 8001258:	40012100 	.word	0x40012100
 800125c:	40012200 	.word	0x40012200

08001260 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800126e:	2b01      	cmp	r3, #1
 8001270:	d101      	bne.n	8001276 <HAL_ADC_Stop+0x16>
 8001272:	2302      	movs	r3, #2
 8001274:	e021      	b.n	80012ba <HAL_ADC_Stop+0x5a>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2201      	movs	r2, #1
 800127a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	689a      	ldr	r2, [r3, #8]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f022 0201 	bic.w	r2, r2, #1
 800128c:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	f003 0301 	and.w	r3, r3, #1
 8001298:	2b00      	cmp	r3, #0
 800129a:	d109      	bne.n	80012b0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80012a4:	f023 0301 	bic.w	r3, r3, #1
 80012a8:	f043 0201 	orr.w	r2, r3, #1
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2200      	movs	r2, #0
 80012b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80012b8:	2300      	movs	r3, #0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr

080012c6 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b084      	sub	sp, #16
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
 80012ce:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80012d0:	2300      	movs	r3, #0
 80012d2:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012e2:	d113      	bne.n	800130c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80012ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80012f2:	d10b      	bne.n	800130c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f8:	f043 0220 	orr.w	r2, r3, #32
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2200      	movs	r2, #0
 8001304:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001308:	2301      	movs	r3, #1
 800130a:	e063      	b.n	80013d4 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800130c:	f7ff fe62 	bl	8000fd4 <HAL_GetTick>
 8001310:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001312:	e021      	b.n	8001358 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800131a:	d01d      	beq.n	8001358 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d007      	beq.n	8001332 <HAL_ADC_PollForConversion+0x6c>
 8001322:	f7ff fe57 	bl	8000fd4 <HAL_GetTick>
 8001326:	4602      	mov	r2, r0
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	683a      	ldr	r2, [r7, #0]
 800132e:	429a      	cmp	r2, r3
 8001330:	d212      	bcs.n	8001358 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 0302 	and.w	r3, r3, #2
 800133c:	2b02      	cmp	r3, #2
 800133e:	d00b      	beq.n	8001358 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001344:	f043 0204 	orr.w	r2, r3, #4
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2200      	movs	r2, #0
 8001350:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001354:	2303      	movs	r3, #3
 8001356:	e03d      	b.n	80013d4 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	2b02      	cmp	r3, #2
 8001364:	d1d6      	bne.n	8001314 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f06f 0212 	mvn.w	r2, #18
 800136e:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001374:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d123      	bne.n	80013d2 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800138e:	2b00      	cmp	r3, #0
 8001390:	d11f      	bne.n	80013d2 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001398:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800139c:	2b00      	cmp	r3, #0
 800139e:	d006      	beq.n	80013ae <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d111      	bne.n	80013d2 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d105      	bne.n	80013d2 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ca:	f043 0201 	orr.w	r2, r3, #1
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80013d2:	2300      	movs	r3, #0
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3710      	adds	r7, #16
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}

080013dc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
	...

080013f8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001402:	2300      	movs	r3, #0
 8001404:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800140c:	2b01      	cmp	r3, #1
 800140e:	d101      	bne.n	8001414 <HAL_ADC_ConfigChannel+0x1c>
 8001410:	2302      	movs	r3, #2
 8001412:	e105      	b.n	8001620 <HAL_ADC_ConfigChannel+0x228>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2201      	movs	r2, #1
 8001418:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2b09      	cmp	r3, #9
 8001422:	d925      	bls.n	8001470 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	68d9      	ldr	r1, [r3, #12]
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	b29b      	uxth	r3, r3
 8001430:	461a      	mov	r2, r3
 8001432:	4613      	mov	r3, r2
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	4413      	add	r3, r2
 8001438:	3b1e      	subs	r3, #30
 800143a:	2207      	movs	r2, #7
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	43da      	mvns	r2, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	400a      	ands	r2, r1
 8001448:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	68d9      	ldr	r1, [r3, #12]
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	689a      	ldr	r2, [r3, #8]
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	b29b      	uxth	r3, r3
 800145a:	4618      	mov	r0, r3
 800145c:	4603      	mov	r3, r0
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	4403      	add	r3, r0
 8001462:	3b1e      	subs	r3, #30
 8001464:	409a      	lsls	r2, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	430a      	orrs	r2, r1
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	e022      	b.n	80014b6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	6919      	ldr	r1, [r3, #16]
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	b29b      	uxth	r3, r3
 800147c:	461a      	mov	r2, r3
 800147e:	4613      	mov	r3, r2
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	4413      	add	r3, r2
 8001484:	2207      	movs	r2, #7
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	43da      	mvns	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	400a      	ands	r2, r1
 8001492:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	6919      	ldr	r1, [r3, #16]
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	689a      	ldr	r2, [r3, #8]
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	4618      	mov	r0, r3
 80014a6:	4603      	mov	r3, r0
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	4403      	add	r3, r0
 80014ac:	409a      	lsls	r2, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	430a      	orrs	r2, r1
 80014b4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	2b06      	cmp	r3, #6
 80014bc:	d824      	bhi.n	8001508 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685a      	ldr	r2, [r3, #4]
 80014c8:	4613      	mov	r3, r2
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	4413      	add	r3, r2
 80014ce:	3b05      	subs	r3, #5
 80014d0:	221f      	movs	r2, #31
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	43da      	mvns	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	400a      	ands	r2, r1
 80014de:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	b29b      	uxth	r3, r3
 80014ec:	4618      	mov	r0, r3
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685a      	ldr	r2, [r3, #4]
 80014f2:	4613      	mov	r3, r2
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	4413      	add	r3, r2
 80014f8:	3b05      	subs	r3, #5
 80014fa:	fa00 f203 	lsl.w	r2, r0, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	430a      	orrs	r2, r1
 8001504:	635a      	str	r2, [r3, #52]	@ 0x34
 8001506:	e04c      	b.n	80015a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	2b0c      	cmp	r3, #12
 800150e:	d824      	bhi.n	800155a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685a      	ldr	r2, [r3, #4]
 800151a:	4613      	mov	r3, r2
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	4413      	add	r3, r2
 8001520:	3b23      	subs	r3, #35	@ 0x23
 8001522:	221f      	movs	r2, #31
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	43da      	mvns	r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	400a      	ands	r2, r1
 8001530:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	b29b      	uxth	r3, r3
 800153e:	4618      	mov	r0, r3
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685a      	ldr	r2, [r3, #4]
 8001544:	4613      	mov	r3, r2
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	4413      	add	r3, r2
 800154a:	3b23      	subs	r3, #35	@ 0x23
 800154c:	fa00 f203 	lsl.w	r2, r0, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	430a      	orrs	r2, r1
 8001556:	631a      	str	r2, [r3, #48]	@ 0x30
 8001558:	e023      	b.n	80015a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685a      	ldr	r2, [r3, #4]
 8001564:	4613      	mov	r3, r2
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	4413      	add	r3, r2
 800156a:	3b41      	subs	r3, #65	@ 0x41
 800156c:	221f      	movs	r2, #31
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	43da      	mvns	r2, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	400a      	ands	r2, r1
 800157a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	b29b      	uxth	r3, r3
 8001588:	4618      	mov	r0, r3
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685a      	ldr	r2, [r3, #4]
 800158e:	4613      	mov	r3, r2
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	4413      	add	r3, r2
 8001594:	3b41      	subs	r3, #65	@ 0x41
 8001596:	fa00 f203 	lsl.w	r2, r0, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	430a      	orrs	r2, r1
 80015a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015a2:	4b22      	ldr	r3, [pc, #136]	@ (800162c <HAL_ADC_ConfigChannel+0x234>)
 80015a4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a21      	ldr	r2, [pc, #132]	@ (8001630 <HAL_ADC_ConfigChannel+0x238>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d109      	bne.n	80015c4 <HAL_ADC_ConfigChannel+0x1cc>
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2b12      	cmp	r3, #18
 80015b6:	d105      	bne.n	80015c4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a19      	ldr	r2, [pc, #100]	@ (8001630 <HAL_ADC_ConfigChannel+0x238>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d123      	bne.n	8001616 <HAL_ADC_ConfigChannel+0x21e>
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2b10      	cmp	r3, #16
 80015d4:	d003      	beq.n	80015de <HAL_ADC_ConfigChannel+0x1e6>
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2b11      	cmp	r3, #17
 80015dc:	d11b      	bne.n	8001616 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	2b10      	cmp	r3, #16
 80015f0:	d111      	bne.n	8001616 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80015f2:	4b10      	ldr	r3, [pc, #64]	@ (8001634 <HAL_ADC_ConfigChannel+0x23c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a10      	ldr	r2, [pc, #64]	@ (8001638 <HAL_ADC_ConfigChannel+0x240>)
 80015f8:	fba2 2303 	umull	r2, r3, r2, r3
 80015fc:	0c9a      	lsrs	r2, r3, #18
 80015fe:	4613      	mov	r3, r2
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	4413      	add	r3, r2
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001608:	e002      	b.n	8001610 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	3b01      	subs	r3, #1
 800160e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1f9      	bne.n	800160a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800161e:	2300      	movs	r3, #0
}
 8001620:	4618      	mov	r0, r3
 8001622:	3714      	adds	r7, #20
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	40012300 	.word	0x40012300
 8001630:	40012000 	.word	0x40012000
 8001634:	20000000 	.word	0x20000000
 8001638:	431bde83 	.word	0x431bde83

0800163c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001644:	4b79      	ldr	r3, [pc, #484]	@ (800182c <ADC_Init+0x1f0>)
 8001646:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	685a      	ldr	r2, [r3, #4]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	431a      	orrs	r2, r3
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	685a      	ldr	r2, [r3, #4]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001670:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	6859      	ldr	r1, [r3, #4]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	691b      	ldr	r3, [r3, #16]
 800167c:	021a      	lsls	r2, r3, #8
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	430a      	orrs	r2, r1
 8001684:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	685a      	ldr	r2, [r3, #4]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001694:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	6859      	ldr	r1, [r3, #4]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	689a      	ldr	r2, [r3, #8]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	430a      	orrs	r2, r1
 80016a6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	689a      	ldr	r2, [r3, #8]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80016b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	6899      	ldr	r1, [r3, #8]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	68da      	ldr	r2, [r3, #12]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	430a      	orrs	r2, r1
 80016c8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016ce:	4a58      	ldr	r2, [pc, #352]	@ (8001830 <ADC_Init+0x1f4>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d022      	beq.n	800171a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	689a      	ldr	r2, [r3, #8]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80016e2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	6899      	ldr	r1, [r3, #8]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	430a      	orrs	r2, r1
 80016f4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	689a      	ldr	r2, [r3, #8]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001704:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	6899      	ldr	r1, [r3, #8]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	430a      	orrs	r2, r1
 8001716:	609a      	str	r2, [r3, #8]
 8001718:	e00f      	b.n	800173a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	689a      	ldr	r2, [r3, #8]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001728:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	689a      	ldr	r2, [r3, #8]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001738:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	689a      	ldr	r2, [r3, #8]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f022 0202 	bic.w	r2, r2, #2
 8001748:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	6899      	ldr	r1, [r3, #8]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	7e1b      	ldrb	r3, [r3, #24]
 8001754:	005a      	lsls	r2, r3, #1
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	430a      	orrs	r2, r1
 800175c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d01b      	beq.n	80017a0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	685a      	ldr	r2, [r3, #4]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001776:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	685a      	ldr	r2, [r3, #4]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001786:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	6859      	ldr	r1, [r3, #4]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001792:	3b01      	subs	r3, #1
 8001794:	035a      	lsls	r2, r3, #13
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	430a      	orrs	r2, r1
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	e007      	b.n	80017b0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	685a      	ldr	r2, [r3, #4]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80017ae:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80017be:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	69db      	ldr	r3, [r3, #28]
 80017ca:	3b01      	subs	r3, #1
 80017cc:	051a      	lsls	r2, r3, #20
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	430a      	orrs	r2, r1
 80017d4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	689a      	ldr	r2, [r3, #8]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80017e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	6899      	ldr	r1, [r3, #8]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80017f2:	025a      	lsls	r2, r3, #9
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	430a      	orrs	r2, r1
 80017fa:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	689a      	ldr	r2, [r3, #8]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800180a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	6899      	ldr	r1, [r3, #8]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	695b      	ldr	r3, [r3, #20]
 8001816:	029a      	lsls	r2, r3, #10
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	430a      	orrs	r2, r1
 800181e:	609a      	str	r2, [r3, #8]
}
 8001820:	bf00      	nop
 8001822:	3714      	adds	r7, #20
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	40012300 	.word	0x40012300
 8001830:	0f000001 	.word	0x0f000001

08001834 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001834:	b480      	push	{r7}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f003 0307 	and.w	r3, r3, #7
 8001842:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001844:	4b0c      	ldr	r3, [pc, #48]	@ (8001878 <__NVIC_SetPriorityGrouping+0x44>)
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800184a:	68ba      	ldr	r2, [r7, #8]
 800184c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001850:	4013      	ands	r3, r2
 8001852:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800185c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001860:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001864:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001866:	4a04      	ldr	r2, [pc, #16]	@ (8001878 <__NVIC_SetPriorityGrouping+0x44>)
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	60d3      	str	r3, [r2, #12]
}
 800186c:	bf00      	nop
 800186e:	3714      	adds	r7, #20
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	e000ed00 	.word	0xe000ed00

0800187c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001880:	4b04      	ldr	r3, [pc, #16]	@ (8001894 <__NVIC_GetPriorityGrouping+0x18>)
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	0a1b      	lsrs	r3, r3, #8
 8001886:	f003 0307 	and.w	r3, r3, #7
}
 800188a:	4618      	mov	r0, r3
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	e000ed00 	.word	0xe000ed00

08001898 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	4603      	mov	r3, r0
 80018a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	db0b      	blt.n	80018c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018aa:	79fb      	ldrb	r3, [r7, #7]
 80018ac:	f003 021f 	and.w	r2, r3, #31
 80018b0:	4907      	ldr	r1, [pc, #28]	@ (80018d0 <__NVIC_EnableIRQ+0x38>)
 80018b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b6:	095b      	lsrs	r3, r3, #5
 80018b8:	2001      	movs	r0, #1
 80018ba:	fa00 f202 	lsl.w	r2, r0, r2
 80018be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018c2:	bf00      	nop
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	e000e100 	.word	0xe000e100

080018d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	6039      	str	r1, [r7, #0]
 80018de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	db0a      	blt.n	80018fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	b2da      	uxtb	r2, r3
 80018ec:	490c      	ldr	r1, [pc, #48]	@ (8001920 <__NVIC_SetPriority+0x4c>)
 80018ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f2:	0112      	lsls	r2, r2, #4
 80018f4:	b2d2      	uxtb	r2, r2
 80018f6:	440b      	add	r3, r1
 80018f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018fc:	e00a      	b.n	8001914 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	b2da      	uxtb	r2, r3
 8001902:	4908      	ldr	r1, [pc, #32]	@ (8001924 <__NVIC_SetPriority+0x50>)
 8001904:	79fb      	ldrb	r3, [r7, #7]
 8001906:	f003 030f 	and.w	r3, r3, #15
 800190a:	3b04      	subs	r3, #4
 800190c:	0112      	lsls	r2, r2, #4
 800190e:	b2d2      	uxtb	r2, r2
 8001910:	440b      	add	r3, r1
 8001912:	761a      	strb	r2, [r3, #24]
}
 8001914:	bf00      	nop
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	e000e100 	.word	0xe000e100
 8001924:	e000ed00 	.word	0xe000ed00

08001928 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001928:	b480      	push	{r7}
 800192a:	b089      	sub	sp, #36	@ 0x24
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f003 0307 	and.w	r3, r3, #7
 800193a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	f1c3 0307 	rsb	r3, r3, #7
 8001942:	2b04      	cmp	r3, #4
 8001944:	bf28      	it	cs
 8001946:	2304      	movcs	r3, #4
 8001948:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	3304      	adds	r3, #4
 800194e:	2b06      	cmp	r3, #6
 8001950:	d902      	bls.n	8001958 <NVIC_EncodePriority+0x30>
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	3b03      	subs	r3, #3
 8001956:	e000      	b.n	800195a <NVIC_EncodePriority+0x32>
 8001958:	2300      	movs	r3, #0
 800195a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800195c:	f04f 32ff 	mov.w	r2, #4294967295
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	43da      	mvns	r2, r3
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	401a      	ands	r2, r3
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001970:	f04f 31ff 	mov.w	r1, #4294967295
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	fa01 f303 	lsl.w	r3, r1, r3
 800197a:	43d9      	mvns	r1, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001980:	4313      	orrs	r3, r2
         );
}
 8001982:	4618      	mov	r0, r3
 8001984:	3724      	adds	r7, #36	@ 0x24
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
	...

08001990 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	3b01      	subs	r3, #1
 800199c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019a0:	d301      	bcc.n	80019a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019a2:	2301      	movs	r3, #1
 80019a4:	e00f      	b.n	80019c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019a6:	4a0a      	ldr	r2, [pc, #40]	@ (80019d0 <SysTick_Config+0x40>)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	3b01      	subs	r3, #1
 80019ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ae:	210f      	movs	r1, #15
 80019b0:	f04f 30ff 	mov.w	r0, #4294967295
 80019b4:	f7ff ff8e 	bl	80018d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019b8:	4b05      	ldr	r3, [pc, #20]	@ (80019d0 <SysTick_Config+0x40>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019be:	4b04      	ldr	r3, [pc, #16]	@ (80019d0 <SysTick_Config+0x40>)
 80019c0:	2207      	movs	r2, #7
 80019c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	e000e010 	.word	0xe000e010

080019d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f7ff ff29 	bl	8001834 <__NVIC_SetPriorityGrouping>
}
 80019e2:	bf00      	nop
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b086      	sub	sp, #24
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	4603      	mov	r3, r0
 80019f2:	60b9      	str	r1, [r7, #8]
 80019f4:	607a      	str	r2, [r7, #4]
 80019f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019f8:	2300      	movs	r3, #0
 80019fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019fc:	f7ff ff3e 	bl	800187c <__NVIC_GetPriorityGrouping>
 8001a00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	68b9      	ldr	r1, [r7, #8]
 8001a06:	6978      	ldr	r0, [r7, #20]
 8001a08:	f7ff ff8e 	bl	8001928 <NVIC_EncodePriority>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a12:	4611      	mov	r1, r2
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff ff5d 	bl	80018d4 <__NVIC_SetPriority>
}
 8001a1a:	bf00      	nop
 8001a1c:	3718      	adds	r7, #24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b082      	sub	sp, #8
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	4603      	mov	r3, r0
 8001a2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff ff31 	bl	8001898 <__NVIC_EnableIRQ>
}
 8001a36:	bf00      	nop
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b082      	sub	sp, #8
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f7ff ffa2 	bl	8001990 <SysTick_Config>
 8001a4c:	4603      	mov	r3, r0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
	...

08001a58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b089      	sub	sp, #36	@ 0x24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a62:	2300      	movs	r3, #0
 8001a64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a66:	2300      	movs	r3, #0
 8001a68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a6e:	2300      	movs	r3, #0
 8001a70:	61fb      	str	r3, [r7, #28]
 8001a72:	e16b      	b.n	8001d4c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a74:	2201      	movs	r2, #1
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	697a      	ldr	r2, [r7, #20]
 8001a84:	4013      	ands	r3, r2
 8001a86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a88:	693a      	ldr	r2, [r7, #16]
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	f040 815a 	bne.w	8001d46 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f003 0303 	and.w	r3, r3, #3
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d005      	beq.n	8001aaa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d130      	bne.n	8001b0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	2203      	movs	r2, #3
 8001ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aba:	43db      	mvns	r3, r3
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	68da      	ldr	r2, [r3, #12]
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	4013      	ands	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	091b      	lsrs	r3, r3, #4
 8001af6:	f003 0201 	and.w	r2, r3, #1
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f003 0303 	and.w	r3, r3, #3
 8001b14:	2b03      	cmp	r3, #3
 8001b16:	d017      	beq.n	8001b48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	2203      	movs	r2, #3
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	689a      	ldr	r2, [r3, #8]
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f003 0303 	and.w	r3, r3, #3
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d123      	bne.n	8001b9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	08da      	lsrs	r2, r3, #3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	3208      	adds	r2, #8
 8001b5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	f003 0307 	and.w	r3, r3, #7
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	220f      	movs	r2, #15
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	43db      	mvns	r3, r3
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	4013      	ands	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	691a      	ldr	r2, [r3, #16]
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	f003 0307 	and.w	r3, r3, #7
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	08da      	lsrs	r2, r3, #3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	3208      	adds	r2, #8
 8001b96:	69b9      	ldr	r1, [r7, #24]
 8001b98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	2203      	movs	r2, #3
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	43db      	mvns	r3, r3
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f003 0203 	and.w	r2, r3, #3
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	f000 80b4 	beq.w	8001d46 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bde:	2300      	movs	r3, #0
 8001be0:	60fb      	str	r3, [r7, #12]
 8001be2:	4b60      	ldr	r3, [pc, #384]	@ (8001d64 <HAL_GPIO_Init+0x30c>)
 8001be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001be6:	4a5f      	ldr	r2, [pc, #380]	@ (8001d64 <HAL_GPIO_Init+0x30c>)
 8001be8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bec:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bee:	4b5d      	ldr	r3, [pc, #372]	@ (8001d64 <HAL_GPIO_Init+0x30c>)
 8001bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bf2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bf6:	60fb      	str	r3, [r7, #12]
 8001bf8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bfa:	4a5b      	ldr	r2, [pc, #364]	@ (8001d68 <HAL_GPIO_Init+0x310>)
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	089b      	lsrs	r3, r3, #2
 8001c00:	3302      	adds	r3, #2
 8001c02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	f003 0303 	and.w	r3, r3, #3
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	220f      	movs	r2, #15
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	43db      	mvns	r3, r3
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a52      	ldr	r2, [pc, #328]	@ (8001d6c <HAL_GPIO_Init+0x314>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d02b      	beq.n	8001c7e <HAL_GPIO_Init+0x226>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a51      	ldr	r2, [pc, #324]	@ (8001d70 <HAL_GPIO_Init+0x318>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d025      	beq.n	8001c7a <HAL_GPIO_Init+0x222>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a50      	ldr	r2, [pc, #320]	@ (8001d74 <HAL_GPIO_Init+0x31c>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d01f      	beq.n	8001c76 <HAL_GPIO_Init+0x21e>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a4f      	ldr	r2, [pc, #316]	@ (8001d78 <HAL_GPIO_Init+0x320>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d019      	beq.n	8001c72 <HAL_GPIO_Init+0x21a>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a4e      	ldr	r2, [pc, #312]	@ (8001d7c <HAL_GPIO_Init+0x324>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d013      	beq.n	8001c6e <HAL_GPIO_Init+0x216>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a4d      	ldr	r2, [pc, #308]	@ (8001d80 <HAL_GPIO_Init+0x328>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d00d      	beq.n	8001c6a <HAL_GPIO_Init+0x212>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a4c      	ldr	r2, [pc, #304]	@ (8001d84 <HAL_GPIO_Init+0x32c>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d007      	beq.n	8001c66 <HAL_GPIO_Init+0x20e>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a4b      	ldr	r2, [pc, #300]	@ (8001d88 <HAL_GPIO_Init+0x330>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d101      	bne.n	8001c62 <HAL_GPIO_Init+0x20a>
 8001c5e:	2307      	movs	r3, #7
 8001c60:	e00e      	b.n	8001c80 <HAL_GPIO_Init+0x228>
 8001c62:	2308      	movs	r3, #8
 8001c64:	e00c      	b.n	8001c80 <HAL_GPIO_Init+0x228>
 8001c66:	2306      	movs	r3, #6
 8001c68:	e00a      	b.n	8001c80 <HAL_GPIO_Init+0x228>
 8001c6a:	2305      	movs	r3, #5
 8001c6c:	e008      	b.n	8001c80 <HAL_GPIO_Init+0x228>
 8001c6e:	2304      	movs	r3, #4
 8001c70:	e006      	b.n	8001c80 <HAL_GPIO_Init+0x228>
 8001c72:	2303      	movs	r3, #3
 8001c74:	e004      	b.n	8001c80 <HAL_GPIO_Init+0x228>
 8001c76:	2302      	movs	r3, #2
 8001c78:	e002      	b.n	8001c80 <HAL_GPIO_Init+0x228>
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e000      	b.n	8001c80 <HAL_GPIO_Init+0x228>
 8001c7e:	2300      	movs	r3, #0
 8001c80:	69fa      	ldr	r2, [r7, #28]
 8001c82:	f002 0203 	and.w	r2, r2, #3
 8001c86:	0092      	lsls	r2, r2, #2
 8001c88:	4093      	lsls	r3, r2
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c90:	4935      	ldr	r1, [pc, #212]	@ (8001d68 <HAL_GPIO_Init+0x310>)
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	089b      	lsrs	r3, r3, #2
 8001c96:	3302      	adds	r3, #2
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c9e:	4b3b      	ldr	r3, [pc, #236]	@ (8001d8c <HAL_GPIO_Init+0x334>)
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	4013      	ands	r3, r2
 8001cac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d003      	beq.n	8001cc2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cc2:	4a32      	ldr	r2, [pc, #200]	@ (8001d8c <HAL_GPIO_Init+0x334>)
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cc8:	4b30      	ldr	r3, [pc, #192]	@ (8001d8c <HAL_GPIO_Init+0x334>)
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d003      	beq.n	8001cec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cec:	4a27      	ldr	r2, [pc, #156]	@ (8001d8c <HAL_GPIO_Init+0x334>)
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cf2:	4b26      	ldr	r3, [pc, #152]	@ (8001d8c <HAL_GPIO_Init+0x334>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	43db      	mvns	r3, r3
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d003      	beq.n	8001d16 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d16:	4a1d      	ldr	r2, [pc, #116]	@ (8001d8c <HAL_GPIO_Init+0x334>)
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d1c:	4b1b      	ldr	r3, [pc, #108]	@ (8001d8c <HAL_GPIO_Init+0x334>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	43db      	mvns	r3, r3
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d003      	beq.n	8001d40 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d40:	4a12      	ldr	r2, [pc, #72]	@ (8001d8c <HAL_GPIO_Init+0x334>)
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	3301      	adds	r3, #1
 8001d4a:	61fb      	str	r3, [r7, #28]
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	2b0f      	cmp	r3, #15
 8001d50:	f67f ae90 	bls.w	8001a74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d54:	bf00      	nop
 8001d56:	bf00      	nop
 8001d58:	3724      	adds	r7, #36	@ 0x24
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	40023800 	.word	0x40023800
 8001d68:	40013800 	.word	0x40013800
 8001d6c:	40020000 	.word	0x40020000
 8001d70:	40020400 	.word	0x40020400
 8001d74:	40020800 	.word	0x40020800
 8001d78:	40020c00 	.word	0x40020c00
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	40021400 	.word	0x40021400
 8001d84:	40021800 	.word	0x40021800
 8001d88:	40021c00 	.word	0x40021c00
 8001d8c:	40013c00 	.word	0x40013c00

08001d90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	460b      	mov	r3, r1
 8001d9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	691a      	ldr	r2, [r3, #16]
 8001da0:	887b      	ldrh	r3, [r7, #2]
 8001da2:	4013      	ands	r3, r2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d002      	beq.n	8001dae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001da8:	2301      	movs	r3, #1
 8001daa:	73fb      	strb	r3, [r7, #15]
 8001dac:	e001      	b.n	8001db2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dae:	2300      	movs	r3, #0
 8001db0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3714      	adds	r7, #20
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	460b      	mov	r3, r1
 8001dca:	807b      	strh	r3, [r7, #2]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dd0:	787b      	ldrb	r3, [r7, #1]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d003      	beq.n	8001dde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dd6:	887a      	ldrh	r2, [r7, #2]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ddc:	e003      	b.n	8001de6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dde:	887b      	ldrh	r3, [r7, #2]
 8001de0:	041a      	lsls	r2, r3, #16
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	619a      	str	r2, [r3, #24]
}
 8001de6:	bf00      	nop
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr

08001df2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b086      	sub	sp, #24
 8001df6:	af02      	add	r7, sp, #8
 8001df8:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d101      	bne.n	8001e04 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e059      	b.n	8001eb8 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d106      	bne.n	8001e24 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f006 ffc2 	bl	8008da8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2203      	movs	r2, #3
 8001e28:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e32:	d102      	bne.n	8001e3a <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f003 fddb 	bl	80059fa <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6818      	ldr	r0, [r3, #0]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	7c1a      	ldrb	r2, [r3, #16]
 8001e4c:	f88d 2000 	strb.w	r2, [sp]
 8001e50:	3304      	adds	r3, #4
 8001e52:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e54:	f003 fd5c 	bl	8005910 <USB_CoreInit>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d005      	beq.n	8001e6a <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2202      	movs	r2, #2
 8001e62:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e026      	b.n	8001eb8 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2101      	movs	r1, #1
 8001e70:	4618      	mov	r0, r3
 8001e72:	f003 fdd3 	bl	8005a1c <USB_SetCurrentMode>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d005      	beq.n	8001e88 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2202      	movs	r2, #2
 8001e80:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e017      	b.n	8001eb8 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6818      	ldr	r0, [r3, #0]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	7c1a      	ldrb	r2, [r3, #16]
 8001e90:	f88d 2000 	strb.w	r2, [sp]
 8001e94:	3304      	adds	r3, #4
 8001e96:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e98:	f003 ff76 	bl	8005d88 <USB_HostInit>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d005      	beq.n	8001eae <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2202      	movs	r2, #2
 8001ea6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e004      	b.n	8001eb8 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8001eb6:	2300      	movs	r3, #0
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3710      	adds	r7, #16
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001ec0:	b590      	push	{r4, r7, lr}
 8001ec2:	b08b      	sub	sp, #44	@ 0x2c
 8001ec4:	af04      	add	r7, sp, #16
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	4608      	mov	r0, r1
 8001eca:	4611      	mov	r1, r2
 8001ecc:	461a      	mov	r2, r3
 8001ece:	4603      	mov	r3, r0
 8001ed0:	70fb      	strb	r3, [r7, #3]
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	70bb      	strb	r3, [r7, #2]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8001eda:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001edc:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d101      	bne.n	8001eec <HAL_HCD_HC_Init+0x2c>
 8001ee8:	2302      	movs	r3, #2
 8001eea:	e09d      	b.n	8002028 <HAL_HCD_HC_Init+0x168>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8001ef4:	78fa      	ldrb	r2, [r7, #3]
 8001ef6:	6879      	ldr	r1, [r7, #4]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	011b      	lsls	r3, r3, #4
 8001efc:	1a9b      	subs	r3, r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	440b      	add	r3, r1
 8001f02:	3319      	adds	r3, #25
 8001f04:	2200      	movs	r2, #0
 8001f06:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001f08:	78fa      	ldrb	r2, [r7, #3]
 8001f0a:	6879      	ldr	r1, [r7, #4]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	011b      	lsls	r3, r3, #4
 8001f10:	1a9b      	subs	r3, r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	440b      	add	r3, r1
 8001f16:	3314      	adds	r3, #20
 8001f18:	787a      	ldrb	r2, [r7, #1]
 8001f1a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001f1c:	78fa      	ldrb	r2, [r7, #3]
 8001f1e:	6879      	ldr	r1, [r7, #4]
 8001f20:	4613      	mov	r3, r2
 8001f22:	011b      	lsls	r3, r3, #4
 8001f24:	1a9b      	subs	r3, r3, r2
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	440b      	add	r3, r1
 8001f2a:	3315      	adds	r3, #21
 8001f2c:	78fa      	ldrb	r2, [r7, #3]
 8001f2e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001f30:	78fa      	ldrb	r2, [r7, #3]
 8001f32:	6879      	ldr	r1, [r7, #4]
 8001f34:	4613      	mov	r3, r2
 8001f36:	011b      	lsls	r3, r3, #4
 8001f38:	1a9b      	subs	r3, r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	440b      	add	r3, r1
 8001f3e:	3326      	adds	r3, #38	@ 0x26
 8001f40:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001f44:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001f46:	78fa      	ldrb	r2, [r7, #3]
 8001f48:	78bb      	ldrb	r3, [r7, #2]
 8001f4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001f4e:	b2d8      	uxtb	r0, r3
 8001f50:	6879      	ldr	r1, [r7, #4]
 8001f52:	4613      	mov	r3, r2
 8001f54:	011b      	lsls	r3, r3, #4
 8001f56:	1a9b      	subs	r3, r3, r2
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	440b      	add	r3, r1
 8001f5c:	3316      	adds	r3, #22
 8001f5e:	4602      	mov	r2, r0
 8001f60:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8001f62:	78fb      	ldrb	r3, [r7, #3]
 8001f64:	4619      	mov	r1, r3
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f000 fbc8 	bl	80026fc <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8001f6c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	da0a      	bge.n	8001f8a <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001f74:	78fa      	ldrb	r2, [r7, #3]
 8001f76:	6879      	ldr	r1, [r7, #4]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	011b      	lsls	r3, r3, #4
 8001f7c:	1a9b      	subs	r3, r3, r2
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	440b      	add	r3, r1
 8001f82:	3317      	adds	r3, #23
 8001f84:	2201      	movs	r2, #1
 8001f86:	701a      	strb	r2, [r3, #0]
 8001f88:	e009      	b.n	8001f9e <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001f8a:	78fa      	ldrb	r2, [r7, #3]
 8001f8c:	6879      	ldr	r1, [r7, #4]
 8001f8e:	4613      	mov	r3, r2
 8001f90:	011b      	lsls	r3, r3, #4
 8001f92:	1a9b      	subs	r3, r3, r2
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	440b      	add	r3, r1
 8001f98:	3317      	adds	r3, #23
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f004 f854 	bl	8006050 <USB_GetHostSpeed>
 8001fa8:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8001faa:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d10b      	bne.n	8001fca <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8001fb2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d107      	bne.n	8001fca <HAL_HCD_HC_Init+0x10a>
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d104      	bne.n	8001fca <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	2bbc      	cmp	r3, #188	@ 0xbc
 8001fc4:	d901      	bls.n	8001fca <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8001fc6:	23bc      	movs	r3, #188	@ 0xbc
 8001fc8:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8001fca:	78fa      	ldrb	r2, [r7, #3]
 8001fcc:	6879      	ldr	r1, [r7, #4]
 8001fce:	4613      	mov	r3, r2
 8001fd0:	011b      	lsls	r3, r3, #4
 8001fd2:	1a9b      	subs	r3, r3, r2
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	440b      	add	r3, r1
 8001fd8:	3318      	adds	r3, #24
 8001fda:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001fde:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8001fe0:	78fa      	ldrb	r2, [r7, #3]
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	b298      	uxth	r0, r3
 8001fe6:	6879      	ldr	r1, [r7, #4]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	011b      	lsls	r3, r3, #4
 8001fec:	1a9b      	subs	r3, r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	440b      	add	r3, r1
 8001ff2:	3328      	adds	r3, #40	@ 0x28
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6818      	ldr	r0, [r3, #0]
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	787c      	ldrb	r4, [r7, #1]
 8002002:	78ba      	ldrb	r2, [r7, #2]
 8002004:	78f9      	ldrb	r1, [r7, #3]
 8002006:	9302      	str	r3, [sp, #8]
 8002008:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800200c:	9301      	str	r3, [sp, #4]
 800200e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002012:	9300      	str	r3, [sp, #0]
 8002014:	4623      	mov	r3, r4
 8002016:	f004 f843 	bl	80060a0 <USB_HC_Init>
 800201a:	4603      	mov	r3, r0
 800201c:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002026:	7bfb      	ldrb	r3, [r7, #15]
}
 8002028:	4618      	mov	r0, r3
 800202a:	371c      	adds	r7, #28
 800202c:	46bd      	mov	sp, r7
 800202e:	bd90      	pop	{r4, r7, pc}

08002030 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	460b      	mov	r3, r1
 800203a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800203c:	2300      	movs	r3, #0
 800203e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002046:	2b01      	cmp	r3, #1
 8002048:	d101      	bne.n	800204e <HAL_HCD_HC_Halt+0x1e>
 800204a:	2302      	movs	r3, #2
 800204c:	e00f      	b.n	800206e <HAL_HCD_HC_Halt+0x3e>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2201      	movs	r2, #1
 8002052:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	78fa      	ldrb	r2, [r7, #3]
 800205c:	4611      	mov	r1, r2
 800205e:	4618      	mov	r0, r3
 8002060:	f004 fbd5 	bl	800680e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800206c:	7bfb      	ldrb	r3, [r7, #15]
}
 800206e:	4618      	mov	r0, r3
 8002070:	3710      	adds	r7, #16
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
	...

08002078 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	4608      	mov	r0, r1
 8002082:	4611      	mov	r1, r2
 8002084:	461a      	mov	r2, r3
 8002086:	4603      	mov	r3, r0
 8002088:	70fb      	strb	r3, [r7, #3]
 800208a:	460b      	mov	r3, r1
 800208c:	70bb      	strb	r3, [r7, #2]
 800208e:	4613      	mov	r3, r2
 8002090:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002092:	78fa      	ldrb	r2, [r7, #3]
 8002094:	6879      	ldr	r1, [r7, #4]
 8002096:	4613      	mov	r3, r2
 8002098:	011b      	lsls	r3, r3, #4
 800209a:	1a9b      	subs	r3, r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	440b      	add	r3, r1
 80020a0:	3317      	adds	r3, #23
 80020a2:	78ba      	ldrb	r2, [r7, #2]
 80020a4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80020a6:	78fa      	ldrb	r2, [r7, #3]
 80020a8:	6879      	ldr	r1, [r7, #4]
 80020aa:	4613      	mov	r3, r2
 80020ac:	011b      	lsls	r3, r3, #4
 80020ae:	1a9b      	subs	r3, r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	440b      	add	r3, r1
 80020b4:	3326      	adds	r3, #38	@ 0x26
 80020b6:	787a      	ldrb	r2, [r7, #1]
 80020b8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80020ba:	7c3b      	ldrb	r3, [r7, #16]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d114      	bne.n	80020ea <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80020c0:	78fa      	ldrb	r2, [r7, #3]
 80020c2:	6879      	ldr	r1, [r7, #4]
 80020c4:	4613      	mov	r3, r2
 80020c6:	011b      	lsls	r3, r3, #4
 80020c8:	1a9b      	subs	r3, r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	440b      	add	r3, r1
 80020ce:	332a      	adds	r3, #42	@ 0x2a
 80020d0:	2203      	movs	r2, #3
 80020d2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80020d4:	78fa      	ldrb	r2, [r7, #3]
 80020d6:	6879      	ldr	r1, [r7, #4]
 80020d8:	4613      	mov	r3, r2
 80020da:	011b      	lsls	r3, r3, #4
 80020dc:	1a9b      	subs	r3, r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	440b      	add	r3, r1
 80020e2:	3319      	adds	r3, #25
 80020e4:	7f3a      	ldrb	r2, [r7, #28]
 80020e6:	701a      	strb	r2, [r3, #0]
 80020e8:	e009      	b.n	80020fe <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80020ea:	78fa      	ldrb	r2, [r7, #3]
 80020ec:	6879      	ldr	r1, [r7, #4]
 80020ee:	4613      	mov	r3, r2
 80020f0:	011b      	lsls	r3, r3, #4
 80020f2:	1a9b      	subs	r3, r3, r2
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	440b      	add	r3, r1
 80020f8:	332a      	adds	r3, #42	@ 0x2a
 80020fa:	2202      	movs	r2, #2
 80020fc:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80020fe:	787b      	ldrb	r3, [r7, #1]
 8002100:	2b03      	cmp	r3, #3
 8002102:	f200 8102 	bhi.w	800230a <HAL_HCD_HC_SubmitRequest+0x292>
 8002106:	a201      	add	r2, pc, #4	@ (adr r2, 800210c <HAL_HCD_HC_SubmitRequest+0x94>)
 8002108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800210c:	0800211d 	.word	0x0800211d
 8002110:	080022f5 	.word	0x080022f5
 8002114:	080021e1 	.word	0x080021e1
 8002118:	0800226b 	.word	0x0800226b
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 800211c:	7c3b      	ldrb	r3, [r7, #16]
 800211e:	2b01      	cmp	r3, #1
 8002120:	f040 80f5 	bne.w	800230e <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8002124:	78bb      	ldrb	r3, [r7, #2]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d12d      	bne.n	8002186 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 800212a:	8b3b      	ldrh	r3, [r7, #24]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d109      	bne.n	8002144 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8002130:	78fa      	ldrb	r2, [r7, #3]
 8002132:	6879      	ldr	r1, [r7, #4]
 8002134:	4613      	mov	r3, r2
 8002136:	011b      	lsls	r3, r3, #4
 8002138:	1a9b      	subs	r3, r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	440b      	add	r3, r1
 800213e:	333d      	adds	r3, #61	@ 0x3d
 8002140:	2201      	movs	r2, #1
 8002142:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8002144:	78fa      	ldrb	r2, [r7, #3]
 8002146:	6879      	ldr	r1, [r7, #4]
 8002148:	4613      	mov	r3, r2
 800214a:	011b      	lsls	r3, r3, #4
 800214c:	1a9b      	subs	r3, r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	440b      	add	r3, r1
 8002152:	333d      	adds	r3, #61	@ 0x3d
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d10a      	bne.n	8002170 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800215a:	78fa      	ldrb	r2, [r7, #3]
 800215c:	6879      	ldr	r1, [r7, #4]
 800215e:	4613      	mov	r3, r2
 8002160:	011b      	lsls	r3, r3, #4
 8002162:	1a9b      	subs	r3, r3, r2
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	440b      	add	r3, r1
 8002168:	332a      	adds	r3, #42	@ 0x2a
 800216a:	2200      	movs	r2, #0
 800216c:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 800216e:	e0ce      	b.n	800230e <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002170:	78fa      	ldrb	r2, [r7, #3]
 8002172:	6879      	ldr	r1, [r7, #4]
 8002174:	4613      	mov	r3, r2
 8002176:	011b      	lsls	r3, r3, #4
 8002178:	1a9b      	subs	r3, r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	440b      	add	r3, r1
 800217e:	332a      	adds	r3, #42	@ 0x2a
 8002180:	2202      	movs	r2, #2
 8002182:	701a      	strb	r2, [r3, #0]
      break;
 8002184:	e0c3      	b.n	800230e <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8002186:	78fa      	ldrb	r2, [r7, #3]
 8002188:	6879      	ldr	r1, [r7, #4]
 800218a:	4613      	mov	r3, r2
 800218c:	011b      	lsls	r3, r3, #4
 800218e:	1a9b      	subs	r3, r3, r2
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	440b      	add	r3, r1
 8002194:	331a      	adds	r3, #26
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	2b01      	cmp	r3, #1
 800219a:	f040 80b8 	bne.w	800230e <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800219e:	78fa      	ldrb	r2, [r7, #3]
 80021a0:	6879      	ldr	r1, [r7, #4]
 80021a2:	4613      	mov	r3, r2
 80021a4:	011b      	lsls	r3, r3, #4
 80021a6:	1a9b      	subs	r3, r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	440b      	add	r3, r1
 80021ac:	333c      	adds	r3, #60	@ 0x3c
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d10a      	bne.n	80021ca <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80021b4:	78fa      	ldrb	r2, [r7, #3]
 80021b6:	6879      	ldr	r1, [r7, #4]
 80021b8:	4613      	mov	r3, r2
 80021ba:	011b      	lsls	r3, r3, #4
 80021bc:	1a9b      	subs	r3, r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	440b      	add	r3, r1
 80021c2:	332a      	adds	r3, #42	@ 0x2a
 80021c4:	2200      	movs	r2, #0
 80021c6:	701a      	strb	r2, [r3, #0]
      break;
 80021c8:	e0a1      	b.n	800230e <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80021ca:	78fa      	ldrb	r2, [r7, #3]
 80021cc:	6879      	ldr	r1, [r7, #4]
 80021ce:	4613      	mov	r3, r2
 80021d0:	011b      	lsls	r3, r3, #4
 80021d2:	1a9b      	subs	r3, r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	440b      	add	r3, r1
 80021d8:	332a      	adds	r3, #42	@ 0x2a
 80021da:	2202      	movs	r2, #2
 80021dc:	701a      	strb	r2, [r3, #0]
      break;
 80021de:	e096      	b.n	800230e <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80021e0:	78bb      	ldrb	r3, [r7, #2]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d120      	bne.n	8002228 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80021e6:	78fa      	ldrb	r2, [r7, #3]
 80021e8:	6879      	ldr	r1, [r7, #4]
 80021ea:	4613      	mov	r3, r2
 80021ec:	011b      	lsls	r3, r3, #4
 80021ee:	1a9b      	subs	r3, r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	440b      	add	r3, r1
 80021f4:	333d      	adds	r3, #61	@ 0x3d
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d10a      	bne.n	8002212 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80021fc:	78fa      	ldrb	r2, [r7, #3]
 80021fe:	6879      	ldr	r1, [r7, #4]
 8002200:	4613      	mov	r3, r2
 8002202:	011b      	lsls	r3, r3, #4
 8002204:	1a9b      	subs	r3, r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	440b      	add	r3, r1
 800220a:	332a      	adds	r3, #42	@ 0x2a
 800220c:	2200      	movs	r2, #0
 800220e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002210:	e07e      	b.n	8002310 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002212:	78fa      	ldrb	r2, [r7, #3]
 8002214:	6879      	ldr	r1, [r7, #4]
 8002216:	4613      	mov	r3, r2
 8002218:	011b      	lsls	r3, r3, #4
 800221a:	1a9b      	subs	r3, r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	440b      	add	r3, r1
 8002220:	332a      	adds	r3, #42	@ 0x2a
 8002222:	2202      	movs	r2, #2
 8002224:	701a      	strb	r2, [r3, #0]
      break;
 8002226:	e073      	b.n	8002310 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002228:	78fa      	ldrb	r2, [r7, #3]
 800222a:	6879      	ldr	r1, [r7, #4]
 800222c:	4613      	mov	r3, r2
 800222e:	011b      	lsls	r3, r3, #4
 8002230:	1a9b      	subs	r3, r3, r2
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	440b      	add	r3, r1
 8002236:	333c      	adds	r3, #60	@ 0x3c
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d10a      	bne.n	8002254 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800223e:	78fa      	ldrb	r2, [r7, #3]
 8002240:	6879      	ldr	r1, [r7, #4]
 8002242:	4613      	mov	r3, r2
 8002244:	011b      	lsls	r3, r3, #4
 8002246:	1a9b      	subs	r3, r3, r2
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	440b      	add	r3, r1
 800224c:	332a      	adds	r3, #42	@ 0x2a
 800224e:	2200      	movs	r2, #0
 8002250:	701a      	strb	r2, [r3, #0]
      break;
 8002252:	e05d      	b.n	8002310 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002254:	78fa      	ldrb	r2, [r7, #3]
 8002256:	6879      	ldr	r1, [r7, #4]
 8002258:	4613      	mov	r3, r2
 800225a:	011b      	lsls	r3, r3, #4
 800225c:	1a9b      	subs	r3, r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	440b      	add	r3, r1
 8002262:	332a      	adds	r3, #42	@ 0x2a
 8002264:	2202      	movs	r2, #2
 8002266:	701a      	strb	r2, [r3, #0]
      break;
 8002268:	e052      	b.n	8002310 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800226a:	78bb      	ldrb	r3, [r7, #2]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d120      	bne.n	80022b2 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002270:	78fa      	ldrb	r2, [r7, #3]
 8002272:	6879      	ldr	r1, [r7, #4]
 8002274:	4613      	mov	r3, r2
 8002276:	011b      	lsls	r3, r3, #4
 8002278:	1a9b      	subs	r3, r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	440b      	add	r3, r1
 800227e:	333d      	adds	r3, #61	@ 0x3d
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d10a      	bne.n	800229c <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002286:	78fa      	ldrb	r2, [r7, #3]
 8002288:	6879      	ldr	r1, [r7, #4]
 800228a:	4613      	mov	r3, r2
 800228c:	011b      	lsls	r3, r3, #4
 800228e:	1a9b      	subs	r3, r3, r2
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	440b      	add	r3, r1
 8002294:	332a      	adds	r3, #42	@ 0x2a
 8002296:	2200      	movs	r2, #0
 8002298:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800229a:	e039      	b.n	8002310 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800229c:	78fa      	ldrb	r2, [r7, #3]
 800229e:	6879      	ldr	r1, [r7, #4]
 80022a0:	4613      	mov	r3, r2
 80022a2:	011b      	lsls	r3, r3, #4
 80022a4:	1a9b      	subs	r3, r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	440b      	add	r3, r1
 80022aa:	332a      	adds	r3, #42	@ 0x2a
 80022ac:	2202      	movs	r2, #2
 80022ae:	701a      	strb	r2, [r3, #0]
      break;
 80022b0:	e02e      	b.n	8002310 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80022b2:	78fa      	ldrb	r2, [r7, #3]
 80022b4:	6879      	ldr	r1, [r7, #4]
 80022b6:	4613      	mov	r3, r2
 80022b8:	011b      	lsls	r3, r3, #4
 80022ba:	1a9b      	subs	r3, r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	440b      	add	r3, r1
 80022c0:	333c      	adds	r3, #60	@ 0x3c
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d10a      	bne.n	80022de <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80022c8:	78fa      	ldrb	r2, [r7, #3]
 80022ca:	6879      	ldr	r1, [r7, #4]
 80022cc:	4613      	mov	r3, r2
 80022ce:	011b      	lsls	r3, r3, #4
 80022d0:	1a9b      	subs	r3, r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	440b      	add	r3, r1
 80022d6:	332a      	adds	r3, #42	@ 0x2a
 80022d8:	2200      	movs	r2, #0
 80022da:	701a      	strb	r2, [r3, #0]
      break;
 80022dc:	e018      	b.n	8002310 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80022de:	78fa      	ldrb	r2, [r7, #3]
 80022e0:	6879      	ldr	r1, [r7, #4]
 80022e2:	4613      	mov	r3, r2
 80022e4:	011b      	lsls	r3, r3, #4
 80022e6:	1a9b      	subs	r3, r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	440b      	add	r3, r1
 80022ec:	332a      	adds	r3, #42	@ 0x2a
 80022ee:	2202      	movs	r2, #2
 80022f0:	701a      	strb	r2, [r3, #0]
      break;
 80022f2:	e00d      	b.n	8002310 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80022f4:	78fa      	ldrb	r2, [r7, #3]
 80022f6:	6879      	ldr	r1, [r7, #4]
 80022f8:	4613      	mov	r3, r2
 80022fa:	011b      	lsls	r3, r3, #4
 80022fc:	1a9b      	subs	r3, r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	440b      	add	r3, r1
 8002302:	332a      	adds	r3, #42	@ 0x2a
 8002304:	2200      	movs	r2, #0
 8002306:	701a      	strb	r2, [r3, #0]
      break;
 8002308:	e002      	b.n	8002310 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 800230a:	bf00      	nop
 800230c:	e000      	b.n	8002310 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 800230e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002310:	78fa      	ldrb	r2, [r7, #3]
 8002312:	6879      	ldr	r1, [r7, #4]
 8002314:	4613      	mov	r3, r2
 8002316:	011b      	lsls	r3, r3, #4
 8002318:	1a9b      	subs	r3, r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	440b      	add	r3, r1
 800231e:	332c      	adds	r3, #44	@ 0x2c
 8002320:	697a      	ldr	r2, [r7, #20]
 8002322:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002324:	78fa      	ldrb	r2, [r7, #3]
 8002326:	8b39      	ldrh	r1, [r7, #24]
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	4613      	mov	r3, r2
 800232c:	011b      	lsls	r3, r3, #4
 800232e:	1a9b      	subs	r3, r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	4403      	add	r3, r0
 8002334:	3334      	adds	r3, #52	@ 0x34
 8002336:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002338:	78fa      	ldrb	r2, [r7, #3]
 800233a:	6879      	ldr	r1, [r7, #4]
 800233c:	4613      	mov	r3, r2
 800233e:	011b      	lsls	r3, r3, #4
 8002340:	1a9b      	subs	r3, r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	440b      	add	r3, r1
 8002346:	334c      	adds	r3, #76	@ 0x4c
 8002348:	2200      	movs	r2, #0
 800234a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800234c:	78fa      	ldrb	r2, [r7, #3]
 800234e:	6879      	ldr	r1, [r7, #4]
 8002350:	4613      	mov	r3, r2
 8002352:	011b      	lsls	r3, r3, #4
 8002354:	1a9b      	subs	r3, r3, r2
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	440b      	add	r3, r1
 800235a:	3338      	adds	r3, #56	@ 0x38
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002360:	78fa      	ldrb	r2, [r7, #3]
 8002362:	6879      	ldr	r1, [r7, #4]
 8002364:	4613      	mov	r3, r2
 8002366:	011b      	lsls	r3, r3, #4
 8002368:	1a9b      	subs	r3, r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	440b      	add	r3, r1
 800236e:	3315      	adds	r3, #21
 8002370:	78fa      	ldrb	r2, [r7, #3]
 8002372:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002374:	78fa      	ldrb	r2, [r7, #3]
 8002376:	6879      	ldr	r1, [r7, #4]
 8002378:	4613      	mov	r3, r2
 800237a:	011b      	lsls	r3, r3, #4
 800237c:	1a9b      	subs	r3, r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	440b      	add	r3, r1
 8002382:	334d      	adds	r3, #77	@ 0x4d
 8002384:	2200      	movs	r2, #0
 8002386:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6818      	ldr	r0, [r3, #0]
 800238c:	78fa      	ldrb	r2, [r7, #3]
 800238e:	4613      	mov	r3, r2
 8002390:	011b      	lsls	r3, r3, #4
 8002392:	1a9b      	subs	r3, r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	3310      	adds	r3, #16
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	4413      	add	r3, r2
 800239c:	1d19      	adds	r1, r3, #4
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	799b      	ldrb	r3, [r3, #6]
 80023a2:	461a      	mov	r2, r3
 80023a4:	f003 ffa8 	bl	80062f8 <USB_HC_StartXfer>
 80023a8:	4603      	mov	r3, r0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3708      	adds	r7, #8
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop

080023b4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f003 fc9c 	bl	8005d08 <USB_GetMode>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	f040 80fb 	bne.w	80025ce <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4618      	mov	r0, r3
 80023de:	f003 fc5f 	bl	8005ca0 <USB_ReadInterrupts>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	f000 80f1 	beq.w	80025cc <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f003 fc56 	bl	8005ca0 <USB_ReadInterrupts>
 80023f4:	4603      	mov	r3, r0
 80023f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80023fe:	d104      	bne.n	800240a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002408:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4618      	mov	r0, r3
 8002410:	f003 fc46 	bl	8005ca0 <USB_ReadInterrupts>
 8002414:	4603      	mov	r3, r0
 8002416:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800241a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800241e:	d104      	bne.n	800242a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002428:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4618      	mov	r0, r3
 8002430:	f003 fc36 	bl	8005ca0 <USB_ReadInterrupts>
 8002434:	4603      	mov	r3, r0
 8002436:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800243a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800243e:	d104      	bne.n	800244a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002448:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4618      	mov	r0, r3
 8002450:	f003 fc26 	bl	8005ca0 <USB_ReadInterrupts>
 8002454:	4603      	mov	r3, r0
 8002456:	f003 0302 	and.w	r3, r3, #2
 800245a:	2b02      	cmp	r3, #2
 800245c:	d103      	bne.n	8002466 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2202      	movs	r2, #2
 8002464:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4618      	mov	r0, r3
 800246c:	f003 fc18 	bl	8005ca0 <USB_ReadInterrupts>
 8002470:	4603      	mov	r3, r0
 8002472:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002476:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800247a:	d120      	bne.n	80024be <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002484:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0301 	and.w	r3, r3, #1
 8002492:	2b00      	cmp	r3, #0
 8002494:	d113      	bne.n	80024be <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002496:	2110      	movs	r1, #16
 8002498:	6938      	ldr	r0, [r7, #16]
 800249a:	f003 fb0b 	bl	8005ab4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800249e:	6938      	ldr	r0, [r7, #16]
 80024a0:	f003 fb3a 	bl	8005b18 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	7a5b      	ldrb	r3, [r3, #9]
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d105      	bne.n	80024b8 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2101      	movs	r1, #1
 80024b2:	4618      	mov	r0, r3
 80024b4:	f003 fd2c 	bl	8005f10 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f006 fcf3 	bl	8008ea4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f003 fbec 	bl	8005ca0 <USB_ReadInterrupts>
 80024c8:	4603      	mov	r3, r0
 80024ca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024d2:	d102      	bne.n	80024da <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f001 fd4d 	bl	8003f74 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4618      	mov	r0, r3
 80024e0:	f003 fbde 	bl	8005ca0 <USB_ReadInterrupts>
 80024e4:	4603      	mov	r3, r0
 80024e6:	f003 0308 	and.w	r3, r3, #8
 80024ea:	2b08      	cmp	r3, #8
 80024ec:	d106      	bne.n	80024fc <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f006 fcbc 	bl	8008e6c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2208      	movs	r2, #8
 80024fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4618      	mov	r0, r3
 8002502:	f003 fbcd 	bl	8005ca0 <USB_ReadInterrupts>
 8002506:	4603      	mov	r3, r0
 8002508:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800250c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002510:	d139      	bne.n	8002586 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4618      	mov	r0, r3
 8002518:	f004 f968 	bl	80067ec <USB_HC_ReadInterrupt>
 800251c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800251e:	2300      	movs	r3, #0
 8002520:	617b      	str	r3, [r7, #20]
 8002522:	e025      	b.n	8002570 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	f003 030f 	and.w	r3, r3, #15
 800252a:	68ba      	ldr	r2, [r7, #8]
 800252c:	fa22 f303 	lsr.w	r3, r2, r3
 8002530:	f003 0301 	and.w	r3, r3, #1
 8002534:	2b00      	cmp	r3, #0
 8002536:	d018      	beq.n	800256a <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	015a      	lsls	r2, r3, #5
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	4413      	add	r3, r2
 8002540:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800254a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800254e:	d106      	bne.n	800255e <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	b2db      	uxtb	r3, r3
 8002554:	4619      	mov	r1, r3
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f000 f905 	bl	8002766 <HCD_HC_IN_IRQHandler>
 800255c:	e005      	b.n	800256a <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	b2db      	uxtb	r3, r3
 8002562:	4619      	mov	r1, r3
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f000 ff67 	bl	8003438 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	3301      	adds	r3, #1
 800256e:	617b      	str	r3, [r7, #20]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	795b      	ldrb	r3, [r3, #5]
 8002574:	461a      	mov	r2, r3
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	4293      	cmp	r3, r2
 800257a:	d3d3      	bcc.n	8002524 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002584:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4618      	mov	r0, r3
 800258c:	f003 fb88 	bl	8005ca0 <USB_ReadInterrupts>
 8002590:	4603      	mov	r3, r0
 8002592:	f003 0310 	and.w	r3, r3, #16
 8002596:	2b10      	cmp	r3, #16
 8002598:	d101      	bne.n	800259e <HAL_HCD_IRQHandler+0x1ea>
 800259a:	2301      	movs	r3, #1
 800259c:	e000      	b.n	80025a0 <HAL_HCD_IRQHandler+0x1ec>
 800259e:	2300      	movs	r3, #0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d014      	beq.n	80025ce <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	699a      	ldr	r2, [r3, #24]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f022 0210 	bic.w	r2, r2, #16
 80025b2:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f001 fbfe 	bl	8003db6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	699a      	ldr	r2, [r3, #24]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f042 0210 	orr.w	r2, r2, #16
 80025c8:	619a      	str	r2, [r3, #24]
 80025ca:	e000      	b.n	80025ce <HAL_HCD_IRQHandler+0x21a>
      return;
 80025cc:	bf00      	nop
    }
  }
}
 80025ce:	3718      	adds	r7, #24
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d101      	bne.n	80025ea <HAL_HCD_Start+0x16>
 80025e6:	2302      	movs	r3, #2
 80025e8:	e013      	b.n	8002612 <HAL_HCD_Start+0x3e>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2201      	movs	r2, #1
 80025ee:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2101      	movs	r1, #1
 80025f8:	4618      	mov	r0, r3
 80025fa:	f003 fcf0 	bl	8005fde <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4618      	mov	r0, r3
 8002604:	f003 f9e8 	bl	80059d8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3708      	adds	r7, #8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800261a:	b580      	push	{r7, lr}
 800261c:	b082      	sub	sp, #8
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002628:	2b01      	cmp	r3, #1
 800262a:	d101      	bne.n	8002630 <HAL_HCD_Stop+0x16>
 800262c:	2302      	movs	r3, #2
 800262e:	e00d      	b.n	800264c <HAL_HCD_Stop+0x32>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4618      	mov	r0, r3
 800263e:	f004 fa43 	bl	8006ac8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800264a:	2300      	movs	r3, #0
}
 800264c:	4618      	mov	r0, r3
 800264e:	3708      	adds	r7, #8
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}

08002654 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4618      	mov	r0, r3
 8002662:	f003 fc92 	bl	8005f8a <USB_ResetPort>
 8002666:	4603      	mov	r3, r0
}
 8002668:	4618      	mov	r0, r3
 800266a:	3708      	adds	r7, #8
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}

08002670 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	460b      	mov	r3, r1
 800267a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800267c:	78fa      	ldrb	r2, [r7, #3]
 800267e:	6879      	ldr	r1, [r7, #4]
 8002680:	4613      	mov	r3, r2
 8002682:	011b      	lsls	r3, r3, #4
 8002684:	1a9b      	subs	r3, r3, r2
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	440b      	add	r3, r1
 800268a:	334c      	adds	r3, #76	@ 0x4c
 800268c:	781b      	ldrb	r3, [r3, #0]
}
 800268e:	4618      	mov	r0, r3
 8002690:	370c      	adds	r7, #12
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr

0800269a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800269a:	b480      	push	{r7}
 800269c:	b083      	sub	sp, #12
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
 80026a2:	460b      	mov	r3, r1
 80026a4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80026a6:	78fa      	ldrb	r2, [r7, #3]
 80026a8:	6879      	ldr	r1, [r7, #4]
 80026aa:	4613      	mov	r3, r2
 80026ac:	011b      	lsls	r3, r3, #4
 80026ae:	1a9b      	subs	r3, r3, r2
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	440b      	add	r3, r1
 80026b4:	3338      	adds	r3, #56	@ 0x38
 80026b6:	681b      	ldr	r3, [r3, #0]
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f003 fcd4 	bl	800607e <USB_GetCurrentFrame>
 80026d6:	4603      	mov	r3, r0
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3708      	adds	r7, #8
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f003 fcaf 	bl	8006050 <USB_GetHostSpeed>
 80026f2:	4603      	mov	r3, r0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3708      	adds	r7, #8
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	460b      	mov	r3, r1
 8002706:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8002708:	78fa      	ldrb	r2, [r7, #3]
 800270a:	6879      	ldr	r1, [r7, #4]
 800270c:	4613      	mov	r3, r2
 800270e:	011b      	lsls	r3, r3, #4
 8002710:	1a9b      	subs	r3, r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	440b      	add	r3, r1
 8002716:	331a      	adds	r3, #26
 8002718:	2200      	movs	r2, #0
 800271a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 800271c:	78fa      	ldrb	r2, [r7, #3]
 800271e:	6879      	ldr	r1, [r7, #4]
 8002720:	4613      	mov	r3, r2
 8002722:	011b      	lsls	r3, r3, #4
 8002724:	1a9b      	subs	r3, r3, r2
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	440b      	add	r3, r1
 800272a:	331b      	adds	r3, #27
 800272c:	2200      	movs	r2, #0
 800272e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002730:	78fa      	ldrb	r2, [r7, #3]
 8002732:	6879      	ldr	r1, [r7, #4]
 8002734:	4613      	mov	r3, r2
 8002736:	011b      	lsls	r3, r3, #4
 8002738:	1a9b      	subs	r3, r3, r2
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	440b      	add	r3, r1
 800273e:	3325      	adds	r3, #37	@ 0x25
 8002740:	2200      	movs	r2, #0
 8002742:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8002744:	78fa      	ldrb	r2, [r7, #3]
 8002746:	6879      	ldr	r1, [r7, #4]
 8002748:	4613      	mov	r3, r2
 800274a:	011b      	lsls	r3, r3, #4
 800274c:	1a9b      	subs	r3, r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	440b      	add	r3, r1
 8002752:	3324      	adds	r3, #36	@ 0x24
 8002754:	2200      	movs	r2, #0
 8002756:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	370c      	adds	r7, #12
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr

08002766 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002766:	b580      	push	{r7, lr}
 8002768:	b086      	sub	sp, #24
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]
 800276e:	460b      	mov	r3, r1
 8002770:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	78fa      	ldrb	r2, [r7, #3]
 8002782:	4611      	mov	r1, r2
 8002784:	4618      	mov	r0, r3
 8002786:	f003 fa9e 	bl	8005cc6 <USB_ReadChInterrupts>
 800278a:	4603      	mov	r3, r0
 800278c:	f003 0304 	and.w	r3, r3, #4
 8002790:	2b04      	cmp	r3, #4
 8002792:	d11a      	bne.n	80027ca <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002794:	78fb      	ldrb	r3, [r7, #3]
 8002796:	015a      	lsls	r2, r3, #5
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	4413      	add	r3, r2
 800279c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027a0:	461a      	mov	r2, r3
 80027a2:	2304      	movs	r3, #4
 80027a4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80027a6:	78fa      	ldrb	r2, [r7, #3]
 80027a8:	6879      	ldr	r1, [r7, #4]
 80027aa:	4613      	mov	r3, r2
 80027ac:	011b      	lsls	r3, r3, #4
 80027ae:	1a9b      	subs	r3, r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	440b      	add	r3, r1
 80027b4:	334d      	adds	r3, #77	@ 0x4d
 80027b6:	2207      	movs	r2, #7
 80027b8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	78fa      	ldrb	r2, [r7, #3]
 80027c0:	4611      	mov	r1, r2
 80027c2:	4618      	mov	r0, r3
 80027c4:	f004 f823 	bl	800680e <USB_HC_Halt>
 80027c8:	e09e      	b.n	8002908 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	78fa      	ldrb	r2, [r7, #3]
 80027d0:	4611      	mov	r1, r2
 80027d2:	4618      	mov	r0, r3
 80027d4:	f003 fa77 	bl	8005cc6 <USB_ReadChInterrupts>
 80027d8:	4603      	mov	r3, r0
 80027da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80027e2:	d11b      	bne.n	800281c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80027e4:	78fb      	ldrb	r3, [r7, #3]
 80027e6:	015a      	lsls	r2, r3, #5
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	4413      	add	r3, r2
 80027ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027f0:	461a      	mov	r2, r3
 80027f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80027f6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80027f8:	78fa      	ldrb	r2, [r7, #3]
 80027fa:	6879      	ldr	r1, [r7, #4]
 80027fc:	4613      	mov	r3, r2
 80027fe:	011b      	lsls	r3, r3, #4
 8002800:	1a9b      	subs	r3, r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	440b      	add	r3, r1
 8002806:	334d      	adds	r3, #77	@ 0x4d
 8002808:	2208      	movs	r2, #8
 800280a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	78fa      	ldrb	r2, [r7, #3]
 8002812:	4611      	mov	r1, r2
 8002814:	4618      	mov	r0, r3
 8002816:	f003 fffa 	bl	800680e <USB_HC_Halt>
 800281a:	e075      	b.n	8002908 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	78fa      	ldrb	r2, [r7, #3]
 8002822:	4611      	mov	r1, r2
 8002824:	4618      	mov	r0, r3
 8002826:	f003 fa4e 	bl	8005cc6 <USB_ReadChInterrupts>
 800282a:	4603      	mov	r3, r0
 800282c:	f003 0308 	and.w	r3, r3, #8
 8002830:	2b08      	cmp	r3, #8
 8002832:	d11a      	bne.n	800286a <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002834:	78fb      	ldrb	r3, [r7, #3]
 8002836:	015a      	lsls	r2, r3, #5
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	4413      	add	r3, r2
 800283c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002840:	461a      	mov	r2, r3
 8002842:	2308      	movs	r3, #8
 8002844:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002846:	78fa      	ldrb	r2, [r7, #3]
 8002848:	6879      	ldr	r1, [r7, #4]
 800284a:	4613      	mov	r3, r2
 800284c:	011b      	lsls	r3, r3, #4
 800284e:	1a9b      	subs	r3, r3, r2
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	440b      	add	r3, r1
 8002854:	334d      	adds	r3, #77	@ 0x4d
 8002856:	2206      	movs	r2, #6
 8002858:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	78fa      	ldrb	r2, [r7, #3]
 8002860:	4611      	mov	r1, r2
 8002862:	4618      	mov	r0, r3
 8002864:	f003 ffd3 	bl	800680e <USB_HC_Halt>
 8002868:	e04e      	b.n	8002908 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	78fa      	ldrb	r2, [r7, #3]
 8002870:	4611      	mov	r1, r2
 8002872:	4618      	mov	r0, r3
 8002874:	f003 fa27 	bl	8005cc6 <USB_ReadChInterrupts>
 8002878:	4603      	mov	r3, r0
 800287a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800287e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002882:	d11b      	bne.n	80028bc <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002884:	78fb      	ldrb	r3, [r7, #3]
 8002886:	015a      	lsls	r2, r3, #5
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	4413      	add	r3, r2
 800288c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002890:	461a      	mov	r2, r3
 8002892:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002896:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002898:	78fa      	ldrb	r2, [r7, #3]
 800289a:	6879      	ldr	r1, [r7, #4]
 800289c:	4613      	mov	r3, r2
 800289e:	011b      	lsls	r3, r3, #4
 80028a0:	1a9b      	subs	r3, r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	440b      	add	r3, r1
 80028a6:	334d      	adds	r3, #77	@ 0x4d
 80028a8:	2209      	movs	r2, #9
 80028aa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	78fa      	ldrb	r2, [r7, #3]
 80028b2:	4611      	mov	r1, r2
 80028b4:	4618      	mov	r0, r3
 80028b6:	f003 ffaa 	bl	800680e <USB_HC_Halt>
 80028ba:	e025      	b.n	8002908 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	78fa      	ldrb	r2, [r7, #3]
 80028c2:	4611      	mov	r1, r2
 80028c4:	4618      	mov	r0, r3
 80028c6:	f003 f9fe 	bl	8005cc6 <USB_ReadChInterrupts>
 80028ca:	4603      	mov	r3, r0
 80028cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028d0:	2b80      	cmp	r3, #128	@ 0x80
 80028d2:	d119      	bne.n	8002908 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80028d4:	78fb      	ldrb	r3, [r7, #3]
 80028d6:	015a      	lsls	r2, r3, #5
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	4413      	add	r3, r2
 80028dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028e0:	461a      	mov	r2, r3
 80028e2:	2380      	movs	r3, #128	@ 0x80
 80028e4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80028e6:	78fa      	ldrb	r2, [r7, #3]
 80028e8:	6879      	ldr	r1, [r7, #4]
 80028ea:	4613      	mov	r3, r2
 80028ec:	011b      	lsls	r3, r3, #4
 80028ee:	1a9b      	subs	r3, r3, r2
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	440b      	add	r3, r1
 80028f4:	334d      	adds	r3, #77	@ 0x4d
 80028f6:	2207      	movs	r2, #7
 80028f8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	78fa      	ldrb	r2, [r7, #3]
 8002900:	4611      	mov	r1, r2
 8002902:	4618      	mov	r0, r3
 8002904:	f003 ff83 	bl	800680e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	78fa      	ldrb	r2, [r7, #3]
 800290e:	4611      	mov	r1, r2
 8002910:	4618      	mov	r0, r3
 8002912:	f003 f9d8 	bl	8005cc6 <USB_ReadChInterrupts>
 8002916:	4603      	mov	r3, r0
 8002918:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800291c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002920:	d112      	bne.n	8002948 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	78fa      	ldrb	r2, [r7, #3]
 8002928:	4611      	mov	r1, r2
 800292a:	4618      	mov	r0, r3
 800292c:	f003 ff6f 	bl	800680e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002930:	78fb      	ldrb	r3, [r7, #3]
 8002932:	015a      	lsls	r2, r3, #5
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	4413      	add	r3, r2
 8002938:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800293c:	461a      	mov	r2, r3
 800293e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002942:	6093      	str	r3, [r2, #8]
 8002944:	f000 bd75 	b.w	8003432 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	78fa      	ldrb	r2, [r7, #3]
 800294e:	4611      	mov	r1, r2
 8002950:	4618      	mov	r0, r3
 8002952:	f003 f9b8 	bl	8005cc6 <USB_ReadChInterrupts>
 8002956:	4603      	mov	r3, r0
 8002958:	f003 0301 	and.w	r3, r3, #1
 800295c:	2b01      	cmp	r3, #1
 800295e:	f040 8128 	bne.w	8002bb2 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002962:	78fb      	ldrb	r3, [r7, #3]
 8002964:	015a      	lsls	r2, r3, #5
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	4413      	add	r3, r2
 800296a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800296e:	461a      	mov	r2, r3
 8002970:	2320      	movs	r3, #32
 8002972:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002974:	78fa      	ldrb	r2, [r7, #3]
 8002976:	6879      	ldr	r1, [r7, #4]
 8002978:	4613      	mov	r3, r2
 800297a:	011b      	lsls	r3, r3, #4
 800297c:	1a9b      	subs	r3, r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	440b      	add	r3, r1
 8002982:	331b      	adds	r3, #27
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d119      	bne.n	80029be <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800298a:	78fa      	ldrb	r2, [r7, #3]
 800298c:	6879      	ldr	r1, [r7, #4]
 800298e:	4613      	mov	r3, r2
 8002990:	011b      	lsls	r3, r3, #4
 8002992:	1a9b      	subs	r3, r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	440b      	add	r3, r1
 8002998:	331b      	adds	r3, #27
 800299a:	2200      	movs	r2, #0
 800299c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800299e:	78fb      	ldrb	r3, [r7, #3]
 80029a0:	015a      	lsls	r2, r3, #5
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	4413      	add	r3, r2
 80029a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	78fa      	ldrb	r2, [r7, #3]
 80029ae:	0151      	lsls	r1, r2, #5
 80029b0:	693a      	ldr	r2, [r7, #16]
 80029b2:	440a      	add	r2, r1
 80029b4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80029b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029bc:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	799b      	ldrb	r3, [r3, #6]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d01b      	beq.n	80029fe <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80029c6:	78fa      	ldrb	r2, [r7, #3]
 80029c8:	6879      	ldr	r1, [r7, #4]
 80029ca:	4613      	mov	r3, r2
 80029cc:	011b      	lsls	r3, r3, #4
 80029ce:	1a9b      	subs	r3, r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	440b      	add	r3, r1
 80029d4:	3330      	adds	r3, #48	@ 0x30
 80029d6:	6819      	ldr	r1, [r3, #0]
 80029d8:	78fb      	ldrb	r3, [r7, #3]
 80029da:	015a      	lsls	r2, r3, #5
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	4413      	add	r3, r2
 80029e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029ea:	78fa      	ldrb	r2, [r7, #3]
 80029ec:	1ac9      	subs	r1, r1, r3
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	4613      	mov	r3, r2
 80029f2:	011b      	lsls	r3, r3, #4
 80029f4:	1a9b      	subs	r3, r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	4403      	add	r3, r0
 80029fa:	3338      	adds	r3, #56	@ 0x38
 80029fc:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80029fe:	78fa      	ldrb	r2, [r7, #3]
 8002a00:	6879      	ldr	r1, [r7, #4]
 8002a02:	4613      	mov	r3, r2
 8002a04:	011b      	lsls	r3, r3, #4
 8002a06:	1a9b      	subs	r3, r3, r2
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	440b      	add	r3, r1
 8002a0c:	334d      	adds	r3, #77	@ 0x4d
 8002a0e:	2201      	movs	r2, #1
 8002a10:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002a12:	78fa      	ldrb	r2, [r7, #3]
 8002a14:	6879      	ldr	r1, [r7, #4]
 8002a16:	4613      	mov	r3, r2
 8002a18:	011b      	lsls	r3, r3, #4
 8002a1a:	1a9b      	subs	r3, r3, r2
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	440b      	add	r3, r1
 8002a20:	3344      	adds	r3, #68	@ 0x44
 8002a22:	2200      	movs	r2, #0
 8002a24:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002a26:	78fb      	ldrb	r3, [r7, #3]
 8002a28:	015a      	lsls	r2, r3, #5
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a32:	461a      	mov	r2, r3
 8002a34:	2301      	movs	r3, #1
 8002a36:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a38:	78fa      	ldrb	r2, [r7, #3]
 8002a3a:	6879      	ldr	r1, [r7, #4]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	011b      	lsls	r3, r3, #4
 8002a40:	1a9b      	subs	r3, r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	440b      	add	r3, r1
 8002a46:	3326      	adds	r3, #38	@ 0x26
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d00a      	beq.n	8002a64 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002a4e:	78fa      	ldrb	r2, [r7, #3]
 8002a50:	6879      	ldr	r1, [r7, #4]
 8002a52:	4613      	mov	r3, r2
 8002a54:	011b      	lsls	r3, r3, #4
 8002a56:	1a9b      	subs	r3, r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	440b      	add	r3, r1
 8002a5c:	3326      	adds	r3, #38	@ 0x26
 8002a5e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d110      	bne.n	8002a86 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	78fa      	ldrb	r2, [r7, #3]
 8002a6a:	4611      	mov	r1, r2
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f003 fece 	bl	800680e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002a72:	78fb      	ldrb	r3, [r7, #3]
 8002a74:	015a      	lsls	r2, r3, #5
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	4413      	add	r3, r2
 8002a7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a7e:	461a      	mov	r2, r3
 8002a80:	2310      	movs	r3, #16
 8002a82:	6093      	str	r3, [r2, #8]
 8002a84:	e03d      	b.n	8002b02 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002a86:	78fa      	ldrb	r2, [r7, #3]
 8002a88:	6879      	ldr	r1, [r7, #4]
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	011b      	lsls	r3, r3, #4
 8002a8e:	1a9b      	subs	r3, r3, r2
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	440b      	add	r3, r1
 8002a94:	3326      	adds	r3, #38	@ 0x26
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	2b03      	cmp	r3, #3
 8002a9a:	d00a      	beq.n	8002ab2 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002a9c:	78fa      	ldrb	r2, [r7, #3]
 8002a9e:	6879      	ldr	r1, [r7, #4]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	011b      	lsls	r3, r3, #4
 8002aa4:	1a9b      	subs	r3, r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	440b      	add	r3, r1
 8002aaa:	3326      	adds	r3, #38	@ 0x26
 8002aac:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d127      	bne.n	8002b02 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002ab2:	78fb      	ldrb	r3, [r7, #3]
 8002ab4:	015a      	lsls	r2, r3, #5
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	4413      	add	r3, r2
 8002aba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	78fa      	ldrb	r2, [r7, #3]
 8002ac2:	0151      	lsls	r1, r2, #5
 8002ac4:	693a      	ldr	r2, [r7, #16]
 8002ac6:	440a      	add	r2, r1
 8002ac8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002acc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002ad0:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002ad2:	78fa      	ldrb	r2, [r7, #3]
 8002ad4:	6879      	ldr	r1, [r7, #4]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	011b      	lsls	r3, r3, #4
 8002ada:	1a9b      	subs	r3, r3, r2
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	440b      	add	r3, r1
 8002ae0:	334c      	adds	r3, #76	@ 0x4c
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002ae6:	78fa      	ldrb	r2, [r7, #3]
 8002ae8:	6879      	ldr	r1, [r7, #4]
 8002aea:	4613      	mov	r3, r2
 8002aec:	011b      	lsls	r3, r3, #4
 8002aee:	1a9b      	subs	r3, r3, r2
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	440b      	add	r3, r1
 8002af4:	334c      	adds	r3, #76	@ 0x4c
 8002af6:	781a      	ldrb	r2, [r3, #0]
 8002af8:	78fb      	ldrb	r3, [r7, #3]
 8002afa:	4619      	mov	r1, r3
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f006 f9df 	bl	8008ec0 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	799b      	ldrb	r3, [r3, #6]
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d13b      	bne.n	8002b82 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002b0a:	78fa      	ldrb	r2, [r7, #3]
 8002b0c:	6879      	ldr	r1, [r7, #4]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	011b      	lsls	r3, r3, #4
 8002b12:	1a9b      	subs	r3, r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	440b      	add	r3, r1
 8002b18:	3338      	adds	r3, #56	@ 0x38
 8002b1a:	6819      	ldr	r1, [r3, #0]
 8002b1c:	78fa      	ldrb	r2, [r7, #3]
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	4613      	mov	r3, r2
 8002b22:	011b      	lsls	r3, r3, #4
 8002b24:	1a9b      	subs	r3, r3, r2
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	4403      	add	r3, r0
 8002b2a:	3328      	adds	r3, #40	@ 0x28
 8002b2c:	881b      	ldrh	r3, [r3, #0]
 8002b2e:	440b      	add	r3, r1
 8002b30:	1e59      	subs	r1, r3, #1
 8002b32:	78fa      	ldrb	r2, [r7, #3]
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	4613      	mov	r3, r2
 8002b38:	011b      	lsls	r3, r3, #4
 8002b3a:	1a9b      	subs	r3, r3, r2
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	4403      	add	r3, r0
 8002b40:	3328      	adds	r3, #40	@ 0x28
 8002b42:	881b      	ldrh	r3, [r3, #0]
 8002b44:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b48:	f003 0301 	and.w	r3, r3, #1
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	f000 8470 	beq.w	8003432 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002b52:	78fa      	ldrb	r2, [r7, #3]
 8002b54:	6879      	ldr	r1, [r7, #4]
 8002b56:	4613      	mov	r3, r2
 8002b58:	011b      	lsls	r3, r3, #4
 8002b5a:	1a9b      	subs	r3, r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	440b      	add	r3, r1
 8002b60:	333c      	adds	r3, #60	@ 0x3c
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	78fa      	ldrb	r2, [r7, #3]
 8002b66:	f083 0301 	eor.w	r3, r3, #1
 8002b6a:	b2d8      	uxtb	r0, r3
 8002b6c:	6879      	ldr	r1, [r7, #4]
 8002b6e:	4613      	mov	r3, r2
 8002b70:	011b      	lsls	r3, r3, #4
 8002b72:	1a9b      	subs	r3, r3, r2
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	440b      	add	r3, r1
 8002b78:	333c      	adds	r3, #60	@ 0x3c
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	701a      	strb	r2, [r3, #0]
 8002b7e:	f000 bc58 	b.w	8003432 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002b82:	78fa      	ldrb	r2, [r7, #3]
 8002b84:	6879      	ldr	r1, [r7, #4]
 8002b86:	4613      	mov	r3, r2
 8002b88:	011b      	lsls	r3, r3, #4
 8002b8a:	1a9b      	subs	r3, r3, r2
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	440b      	add	r3, r1
 8002b90:	333c      	adds	r3, #60	@ 0x3c
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	78fa      	ldrb	r2, [r7, #3]
 8002b96:	f083 0301 	eor.w	r3, r3, #1
 8002b9a:	b2d8      	uxtb	r0, r3
 8002b9c:	6879      	ldr	r1, [r7, #4]
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	011b      	lsls	r3, r3, #4
 8002ba2:	1a9b      	subs	r3, r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	440b      	add	r3, r1
 8002ba8:	333c      	adds	r3, #60	@ 0x3c
 8002baa:	4602      	mov	r2, r0
 8002bac:	701a      	strb	r2, [r3, #0]
 8002bae:	f000 bc40 	b.w	8003432 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	78fa      	ldrb	r2, [r7, #3]
 8002bb8:	4611      	mov	r1, r2
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f003 f883 	bl	8005cc6 <USB_ReadChInterrupts>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	f003 0320 	and.w	r3, r3, #32
 8002bc6:	2b20      	cmp	r3, #32
 8002bc8:	d131      	bne.n	8002c2e <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002bca:	78fb      	ldrb	r3, [r7, #3]
 8002bcc:	015a      	lsls	r2, r3, #5
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	2320      	movs	r3, #32
 8002bda:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002bdc:	78fa      	ldrb	r2, [r7, #3]
 8002bde:	6879      	ldr	r1, [r7, #4]
 8002be0:	4613      	mov	r3, r2
 8002be2:	011b      	lsls	r3, r3, #4
 8002be4:	1a9b      	subs	r3, r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	440b      	add	r3, r1
 8002bea:	331a      	adds	r3, #26
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	f040 841f 	bne.w	8003432 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002bf4:	78fa      	ldrb	r2, [r7, #3]
 8002bf6:	6879      	ldr	r1, [r7, #4]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	011b      	lsls	r3, r3, #4
 8002bfc:	1a9b      	subs	r3, r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	440b      	add	r3, r1
 8002c02:	331b      	adds	r3, #27
 8002c04:	2201      	movs	r2, #1
 8002c06:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002c08:	78fa      	ldrb	r2, [r7, #3]
 8002c0a:	6879      	ldr	r1, [r7, #4]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	011b      	lsls	r3, r3, #4
 8002c10:	1a9b      	subs	r3, r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	440b      	add	r3, r1
 8002c16:	334d      	adds	r3, #77	@ 0x4d
 8002c18:	2203      	movs	r2, #3
 8002c1a:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	78fa      	ldrb	r2, [r7, #3]
 8002c22:	4611      	mov	r1, r2
 8002c24:	4618      	mov	r0, r3
 8002c26:	f003 fdf2 	bl	800680e <USB_HC_Halt>
 8002c2a:	f000 bc02 	b.w	8003432 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	78fa      	ldrb	r2, [r7, #3]
 8002c34:	4611      	mov	r1, r2
 8002c36:	4618      	mov	r0, r3
 8002c38:	f003 f845 	bl	8005cc6 <USB_ReadChInterrupts>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	f040 8305 	bne.w	8003252 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002c48:	78fb      	ldrb	r3, [r7, #3]
 8002c4a:	015a      	lsls	r2, r3, #5
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	4413      	add	r3, r2
 8002c50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c54:	461a      	mov	r2, r3
 8002c56:	2302      	movs	r3, #2
 8002c58:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002c5a:	78fa      	ldrb	r2, [r7, #3]
 8002c5c:	6879      	ldr	r1, [r7, #4]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	011b      	lsls	r3, r3, #4
 8002c62:	1a9b      	subs	r3, r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	440b      	add	r3, r1
 8002c68:	334d      	adds	r3, #77	@ 0x4d
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d114      	bne.n	8002c9a <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002c70:	78fa      	ldrb	r2, [r7, #3]
 8002c72:	6879      	ldr	r1, [r7, #4]
 8002c74:	4613      	mov	r3, r2
 8002c76:	011b      	lsls	r3, r3, #4
 8002c78:	1a9b      	subs	r3, r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	440b      	add	r3, r1
 8002c7e:	334d      	adds	r3, #77	@ 0x4d
 8002c80:	2202      	movs	r2, #2
 8002c82:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002c84:	78fa      	ldrb	r2, [r7, #3]
 8002c86:	6879      	ldr	r1, [r7, #4]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	011b      	lsls	r3, r3, #4
 8002c8c:	1a9b      	subs	r3, r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	440b      	add	r3, r1
 8002c92:	334c      	adds	r3, #76	@ 0x4c
 8002c94:	2201      	movs	r2, #1
 8002c96:	701a      	strb	r2, [r3, #0]
 8002c98:	e2cc      	b.n	8003234 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002c9a:	78fa      	ldrb	r2, [r7, #3]
 8002c9c:	6879      	ldr	r1, [r7, #4]
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	011b      	lsls	r3, r3, #4
 8002ca2:	1a9b      	subs	r3, r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	440b      	add	r3, r1
 8002ca8:	334d      	adds	r3, #77	@ 0x4d
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	2b06      	cmp	r3, #6
 8002cae:	d114      	bne.n	8002cda <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002cb0:	78fa      	ldrb	r2, [r7, #3]
 8002cb2:	6879      	ldr	r1, [r7, #4]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	011b      	lsls	r3, r3, #4
 8002cb8:	1a9b      	subs	r3, r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	440b      	add	r3, r1
 8002cbe:	334d      	adds	r3, #77	@ 0x4d
 8002cc0:	2202      	movs	r2, #2
 8002cc2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002cc4:	78fa      	ldrb	r2, [r7, #3]
 8002cc6:	6879      	ldr	r1, [r7, #4]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	011b      	lsls	r3, r3, #4
 8002ccc:	1a9b      	subs	r3, r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	440b      	add	r3, r1
 8002cd2:	334c      	adds	r3, #76	@ 0x4c
 8002cd4:	2205      	movs	r2, #5
 8002cd6:	701a      	strb	r2, [r3, #0]
 8002cd8:	e2ac      	b.n	8003234 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002cda:	78fa      	ldrb	r2, [r7, #3]
 8002cdc:	6879      	ldr	r1, [r7, #4]
 8002cde:	4613      	mov	r3, r2
 8002ce0:	011b      	lsls	r3, r3, #4
 8002ce2:	1a9b      	subs	r3, r3, r2
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	440b      	add	r3, r1
 8002ce8:	334d      	adds	r3, #77	@ 0x4d
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	2b07      	cmp	r3, #7
 8002cee:	d00b      	beq.n	8002d08 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002cf0:	78fa      	ldrb	r2, [r7, #3]
 8002cf2:	6879      	ldr	r1, [r7, #4]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	011b      	lsls	r3, r3, #4
 8002cf8:	1a9b      	subs	r3, r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	440b      	add	r3, r1
 8002cfe:	334d      	adds	r3, #77	@ 0x4d
 8002d00:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002d02:	2b09      	cmp	r3, #9
 8002d04:	f040 80a6 	bne.w	8002e54 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002d08:	78fa      	ldrb	r2, [r7, #3]
 8002d0a:	6879      	ldr	r1, [r7, #4]
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	011b      	lsls	r3, r3, #4
 8002d10:	1a9b      	subs	r3, r3, r2
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	440b      	add	r3, r1
 8002d16:	334d      	adds	r3, #77	@ 0x4d
 8002d18:	2202      	movs	r2, #2
 8002d1a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002d1c:	78fa      	ldrb	r2, [r7, #3]
 8002d1e:	6879      	ldr	r1, [r7, #4]
 8002d20:	4613      	mov	r3, r2
 8002d22:	011b      	lsls	r3, r3, #4
 8002d24:	1a9b      	subs	r3, r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	440b      	add	r3, r1
 8002d2a:	3344      	adds	r3, #68	@ 0x44
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	1c59      	adds	r1, r3, #1
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	4613      	mov	r3, r2
 8002d34:	011b      	lsls	r3, r3, #4
 8002d36:	1a9b      	subs	r3, r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	4403      	add	r3, r0
 8002d3c:	3344      	adds	r3, #68	@ 0x44
 8002d3e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002d40:	78fa      	ldrb	r2, [r7, #3]
 8002d42:	6879      	ldr	r1, [r7, #4]
 8002d44:	4613      	mov	r3, r2
 8002d46:	011b      	lsls	r3, r3, #4
 8002d48:	1a9b      	subs	r3, r3, r2
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	440b      	add	r3, r1
 8002d4e:	3344      	adds	r3, #68	@ 0x44
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d943      	bls.n	8002dde <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002d56:	78fa      	ldrb	r2, [r7, #3]
 8002d58:	6879      	ldr	r1, [r7, #4]
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	011b      	lsls	r3, r3, #4
 8002d5e:	1a9b      	subs	r3, r3, r2
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	440b      	add	r3, r1
 8002d64:	3344      	adds	r3, #68	@ 0x44
 8002d66:	2200      	movs	r2, #0
 8002d68:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8002d6a:	78fa      	ldrb	r2, [r7, #3]
 8002d6c:	6879      	ldr	r1, [r7, #4]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	011b      	lsls	r3, r3, #4
 8002d72:	1a9b      	subs	r3, r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	440b      	add	r3, r1
 8002d78:	331a      	adds	r3, #26
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d123      	bne.n	8002dc8 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002d80:	78fa      	ldrb	r2, [r7, #3]
 8002d82:	6879      	ldr	r1, [r7, #4]
 8002d84:	4613      	mov	r3, r2
 8002d86:	011b      	lsls	r3, r3, #4
 8002d88:	1a9b      	subs	r3, r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	440b      	add	r3, r1
 8002d8e:	331b      	adds	r3, #27
 8002d90:	2200      	movs	r2, #0
 8002d92:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002d94:	78fa      	ldrb	r2, [r7, #3]
 8002d96:	6879      	ldr	r1, [r7, #4]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	011b      	lsls	r3, r3, #4
 8002d9c:	1a9b      	subs	r3, r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	440b      	add	r3, r1
 8002da2:	331c      	adds	r3, #28
 8002da4:	2200      	movs	r2, #0
 8002da6:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002da8:	78fb      	ldrb	r3, [r7, #3]
 8002daa:	015a      	lsls	r2, r3, #5
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	4413      	add	r3, r2
 8002db0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	78fa      	ldrb	r2, [r7, #3]
 8002db8:	0151      	lsls	r1, r2, #5
 8002dba:	693a      	ldr	r2, [r7, #16]
 8002dbc:	440a      	add	r2, r1
 8002dbe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002dc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002dc6:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002dc8:	78fa      	ldrb	r2, [r7, #3]
 8002dca:	6879      	ldr	r1, [r7, #4]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	011b      	lsls	r3, r3, #4
 8002dd0:	1a9b      	subs	r3, r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	440b      	add	r3, r1
 8002dd6:	334c      	adds	r3, #76	@ 0x4c
 8002dd8:	2204      	movs	r2, #4
 8002dda:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002ddc:	e229      	b.n	8003232 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002dde:	78fa      	ldrb	r2, [r7, #3]
 8002de0:	6879      	ldr	r1, [r7, #4]
 8002de2:	4613      	mov	r3, r2
 8002de4:	011b      	lsls	r3, r3, #4
 8002de6:	1a9b      	subs	r3, r3, r2
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	440b      	add	r3, r1
 8002dec:	334c      	adds	r3, #76	@ 0x4c
 8002dee:	2202      	movs	r2, #2
 8002df0:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002df2:	78fa      	ldrb	r2, [r7, #3]
 8002df4:	6879      	ldr	r1, [r7, #4]
 8002df6:	4613      	mov	r3, r2
 8002df8:	011b      	lsls	r3, r3, #4
 8002dfa:	1a9b      	subs	r3, r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	440b      	add	r3, r1
 8002e00:	3326      	adds	r3, #38	@ 0x26
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d00b      	beq.n	8002e20 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002e08:	78fa      	ldrb	r2, [r7, #3]
 8002e0a:	6879      	ldr	r1, [r7, #4]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	011b      	lsls	r3, r3, #4
 8002e10:	1a9b      	subs	r3, r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	440b      	add	r3, r1
 8002e16:	3326      	adds	r3, #38	@ 0x26
 8002e18:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	f040 8209 	bne.w	8003232 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002e20:	78fb      	ldrb	r3, [r7, #3]
 8002e22:	015a      	lsls	r2, r3, #5
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	4413      	add	r3, r2
 8002e28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002e36:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002e3e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002e40:	78fb      	ldrb	r3, [r7, #3]
 8002e42:	015a      	lsls	r2, r3, #5
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	4413      	add	r3, r2
 8002e48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002e52:	e1ee      	b.n	8003232 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002e54:	78fa      	ldrb	r2, [r7, #3]
 8002e56:	6879      	ldr	r1, [r7, #4]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	011b      	lsls	r3, r3, #4
 8002e5c:	1a9b      	subs	r3, r3, r2
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	440b      	add	r3, r1
 8002e62:	334d      	adds	r3, #77	@ 0x4d
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	2b05      	cmp	r3, #5
 8002e68:	f040 80c8 	bne.w	8002ffc <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002e6c:	78fa      	ldrb	r2, [r7, #3]
 8002e6e:	6879      	ldr	r1, [r7, #4]
 8002e70:	4613      	mov	r3, r2
 8002e72:	011b      	lsls	r3, r3, #4
 8002e74:	1a9b      	subs	r3, r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	440b      	add	r3, r1
 8002e7a:	334d      	adds	r3, #77	@ 0x4d
 8002e7c:	2202      	movs	r2, #2
 8002e7e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002e80:	78fa      	ldrb	r2, [r7, #3]
 8002e82:	6879      	ldr	r1, [r7, #4]
 8002e84:	4613      	mov	r3, r2
 8002e86:	011b      	lsls	r3, r3, #4
 8002e88:	1a9b      	subs	r3, r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	440b      	add	r3, r1
 8002e8e:	331b      	adds	r3, #27
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	f040 81ce 	bne.w	8003234 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002e98:	78fa      	ldrb	r2, [r7, #3]
 8002e9a:	6879      	ldr	r1, [r7, #4]
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	011b      	lsls	r3, r3, #4
 8002ea0:	1a9b      	subs	r3, r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	440b      	add	r3, r1
 8002ea6:	3326      	adds	r3, #38	@ 0x26
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	2b03      	cmp	r3, #3
 8002eac:	d16b      	bne.n	8002f86 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8002eae:	78fa      	ldrb	r2, [r7, #3]
 8002eb0:	6879      	ldr	r1, [r7, #4]
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	011b      	lsls	r3, r3, #4
 8002eb6:	1a9b      	subs	r3, r3, r2
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	440b      	add	r3, r1
 8002ebc:	3348      	adds	r3, #72	@ 0x48
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	1c59      	adds	r1, r3, #1
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	011b      	lsls	r3, r3, #4
 8002ec8:	1a9b      	subs	r3, r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	4403      	add	r3, r0
 8002ece:	3348      	adds	r3, #72	@ 0x48
 8002ed0:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002ed2:	78fa      	ldrb	r2, [r7, #3]
 8002ed4:	6879      	ldr	r1, [r7, #4]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	011b      	lsls	r3, r3, #4
 8002eda:	1a9b      	subs	r3, r3, r2
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	440b      	add	r3, r1
 8002ee0:	3348      	adds	r3, #72	@ 0x48
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d943      	bls.n	8002f70 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002ee8:	78fa      	ldrb	r2, [r7, #3]
 8002eea:	6879      	ldr	r1, [r7, #4]
 8002eec:	4613      	mov	r3, r2
 8002eee:	011b      	lsls	r3, r3, #4
 8002ef0:	1a9b      	subs	r3, r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	440b      	add	r3, r1
 8002ef6:	3348      	adds	r3, #72	@ 0x48
 8002ef8:	2200      	movs	r2, #0
 8002efa:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002efc:	78fa      	ldrb	r2, [r7, #3]
 8002efe:	6879      	ldr	r1, [r7, #4]
 8002f00:	4613      	mov	r3, r2
 8002f02:	011b      	lsls	r3, r3, #4
 8002f04:	1a9b      	subs	r3, r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	440b      	add	r3, r1
 8002f0a:	331b      	adds	r3, #27
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002f10:	78fa      	ldrb	r2, [r7, #3]
 8002f12:	6879      	ldr	r1, [r7, #4]
 8002f14:	4613      	mov	r3, r2
 8002f16:	011b      	lsls	r3, r3, #4
 8002f18:	1a9b      	subs	r3, r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	440b      	add	r3, r1
 8002f1e:	3344      	adds	r3, #68	@ 0x44
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d809      	bhi.n	8002f3a <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8002f26:	78fa      	ldrb	r2, [r7, #3]
 8002f28:	6879      	ldr	r1, [r7, #4]
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	011b      	lsls	r3, r3, #4
 8002f2e:	1a9b      	subs	r3, r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	440b      	add	r3, r1
 8002f34:	331c      	adds	r3, #28
 8002f36:	2201      	movs	r2, #1
 8002f38:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002f3a:	78fb      	ldrb	r3, [r7, #3]
 8002f3c:	015a      	lsls	r2, r3, #5
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	4413      	add	r3, r2
 8002f42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	78fa      	ldrb	r2, [r7, #3]
 8002f4a:	0151      	lsls	r1, r2, #5
 8002f4c:	693a      	ldr	r2, [r7, #16]
 8002f4e:	440a      	add	r2, r1
 8002f50:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002f54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f58:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8002f5a:	78fa      	ldrb	r2, [r7, #3]
 8002f5c:	6879      	ldr	r1, [r7, #4]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	011b      	lsls	r3, r3, #4
 8002f62:	1a9b      	subs	r3, r3, r2
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	440b      	add	r3, r1
 8002f68:	334c      	adds	r3, #76	@ 0x4c
 8002f6a:	2204      	movs	r2, #4
 8002f6c:	701a      	strb	r2, [r3, #0]
 8002f6e:	e014      	b.n	8002f9a <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002f70:	78fa      	ldrb	r2, [r7, #3]
 8002f72:	6879      	ldr	r1, [r7, #4]
 8002f74:	4613      	mov	r3, r2
 8002f76:	011b      	lsls	r3, r3, #4
 8002f78:	1a9b      	subs	r3, r3, r2
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	440b      	add	r3, r1
 8002f7e:	334c      	adds	r3, #76	@ 0x4c
 8002f80:	2202      	movs	r2, #2
 8002f82:	701a      	strb	r2, [r3, #0]
 8002f84:	e009      	b.n	8002f9a <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002f86:	78fa      	ldrb	r2, [r7, #3]
 8002f88:	6879      	ldr	r1, [r7, #4]
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	011b      	lsls	r3, r3, #4
 8002f8e:	1a9b      	subs	r3, r3, r2
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	440b      	add	r3, r1
 8002f94:	334c      	adds	r3, #76	@ 0x4c
 8002f96:	2202      	movs	r2, #2
 8002f98:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002f9a:	78fa      	ldrb	r2, [r7, #3]
 8002f9c:	6879      	ldr	r1, [r7, #4]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	011b      	lsls	r3, r3, #4
 8002fa2:	1a9b      	subs	r3, r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	440b      	add	r3, r1
 8002fa8:	3326      	adds	r3, #38	@ 0x26
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d00b      	beq.n	8002fc8 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002fb0:	78fa      	ldrb	r2, [r7, #3]
 8002fb2:	6879      	ldr	r1, [r7, #4]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	011b      	lsls	r3, r3, #4
 8002fb8:	1a9b      	subs	r3, r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	440b      	add	r3, r1
 8002fbe:	3326      	adds	r3, #38	@ 0x26
 8002fc0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	f040 8136 	bne.w	8003234 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002fc8:	78fb      	ldrb	r3, [r7, #3]
 8002fca:	015a      	lsls	r2, r3, #5
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	4413      	add	r3, r2
 8002fd0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002fde:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002fe6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002fe8:	78fb      	ldrb	r3, [r7, #3]
 8002fea:	015a      	lsls	r2, r3, #5
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	4413      	add	r3, r2
 8002ff0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6013      	str	r3, [r2, #0]
 8002ffa:	e11b      	b.n	8003234 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002ffc:	78fa      	ldrb	r2, [r7, #3]
 8002ffe:	6879      	ldr	r1, [r7, #4]
 8003000:	4613      	mov	r3, r2
 8003002:	011b      	lsls	r3, r3, #4
 8003004:	1a9b      	subs	r3, r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	440b      	add	r3, r1
 800300a:	334d      	adds	r3, #77	@ 0x4d
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	2b03      	cmp	r3, #3
 8003010:	f040 8081 	bne.w	8003116 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003014:	78fa      	ldrb	r2, [r7, #3]
 8003016:	6879      	ldr	r1, [r7, #4]
 8003018:	4613      	mov	r3, r2
 800301a:	011b      	lsls	r3, r3, #4
 800301c:	1a9b      	subs	r3, r3, r2
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	440b      	add	r3, r1
 8003022:	334d      	adds	r3, #77	@ 0x4d
 8003024:	2202      	movs	r2, #2
 8003026:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003028:	78fa      	ldrb	r2, [r7, #3]
 800302a:	6879      	ldr	r1, [r7, #4]
 800302c:	4613      	mov	r3, r2
 800302e:	011b      	lsls	r3, r3, #4
 8003030:	1a9b      	subs	r3, r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	440b      	add	r3, r1
 8003036:	331b      	adds	r3, #27
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	2b01      	cmp	r3, #1
 800303c:	f040 80fa 	bne.w	8003234 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003040:	78fa      	ldrb	r2, [r7, #3]
 8003042:	6879      	ldr	r1, [r7, #4]
 8003044:	4613      	mov	r3, r2
 8003046:	011b      	lsls	r3, r3, #4
 8003048:	1a9b      	subs	r3, r3, r2
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	440b      	add	r3, r1
 800304e:	334c      	adds	r3, #76	@ 0x4c
 8003050:	2202      	movs	r2, #2
 8003052:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8003054:	78fb      	ldrb	r3, [r7, #3]
 8003056:	015a      	lsls	r2, r3, #5
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	4413      	add	r3, r2
 800305c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	78fa      	ldrb	r2, [r7, #3]
 8003064:	0151      	lsls	r1, r2, #5
 8003066:	693a      	ldr	r2, [r7, #16]
 8003068:	440a      	add	r2, r1
 800306a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800306e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003072:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8003074:	78fb      	ldrb	r3, [r7, #3]
 8003076:	015a      	lsls	r2, r3, #5
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	4413      	add	r3, r2
 800307c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	78fa      	ldrb	r2, [r7, #3]
 8003084:	0151      	lsls	r1, r2, #5
 8003086:	693a      	ldr	r2, [r7, #16]
 8003088:	440a      	add	r2, r1
 800308a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800308e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003092:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003094:	78fb      	ldrb	r3, [r7, #3]
 8003096:	015a      	lsls	r2, r3, #5
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	4413      	add	r3, r2
 800309c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	78fa      	ldrb	r2, [r7, #3]
 80030a4:	0151      	lsls	r1, r2, #5
 80030a6:	693a      	ldr	r2, [r7, #16]
 80030a8:	440a      	add	r2, r1
 80030aa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80030ae:	f023 0320 	bic.w	r3, r3, #32
 80030b2:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80030b4:	78fa      	ldrb	r2, [r7, #3]
 80030b6:	6879      	ldr	r1, [r7, #4]
 80030b8:	4613      	mov	r3, r2
 80030ba:	011b      	lsls	r3, r3, #4
 80030bc:	1a9b      	subs	r3, r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	440b      	add	r3, r1
 80030c2:	3326      	adds	r3, #38	@ 0x26
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d00b      	beq.n	80030e2 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80030ca:	78fa      	ldrb	r2, [r7, #3]
 80030cc:	6879      	ldr	r1, [r7, #4]
 80030ce:	4613      	mov	r3, r2
 80030d0:	011b      	lsls	r3, r3, #4
 80030d2:	1a9b      	subs	r3, r3, r2
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	440b      	add	r3, r1
 80030d8:	3326      	adds	r3, #38	@ 0x26
 80030da:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80030dc:	2b02      	cmp	r3, #2
 80030de:	f040 80a9 	bne.w	8003234 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80030e2:	78fb      	ldrb	r3, [r7, #3]
 80030e4:	015a      	lsls	r2, r3, #5
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	4413      	add	r3, r2
 80030ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80030f8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003100:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003102:	78fb      	ldrb	r3, [r7, #3]
 8003104:	015a      	lsls	r2, r3, #5
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	4413      	add	r3, r2
 800310a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800310e:	461a      	mov	r2, r3
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6013      	str	r3, [r2, #0]
 8003114:	e08e      	b.n	8003234 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003116:	78fa      	ldrb	r2, [r7, #3]
 8003118:	6879      	ldr	r1, [r7, #4]
 800311a:	4613      	mov	r3, r2
 800311c:	011b      	lsls	r3, r3, #4
 800311e:	1a9b      	subs	r3, r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	440b      	add	r3, r1
 8003124:	334d      	adds	r3, #77	@ 0x4d
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	2b04      	cmp	r3, #4
 800312a:	d143      	bne.n	80031b4 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800312c:	78fa      	ldrb	r2, [r7, #3]
 800312e:	6879      	ldr	r1, [r7, #4]
 8003130:	4613      	mov	r3, r2
 8003132:	011b      	lsls	r3, r3, #4
 8003134:	1a9b      	subs	r3, r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	440b      	add	r3, r1
 800313a:	334d      	adds	r3, #77	@ 0x4d
 800313c:	2202      	movs	r2, #2
 800313e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003140:	78fa      	ldrb	r2, [r7, #3]
 8003142:	6879      	ldr	r1, [r7, #4]
 8003144:	4613      	mov	r3, r2
 8003146:	011b      	lsls	r3, r3, #4
 8003148:	1a9b      	subs	r3, r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	440b      	add	r3, r1
 800314e:	334c      	adds	r3, #76	@ 0x4c
 8003150:	2202      	movs	r2, #2
 8003152:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003154:	78fa      	ldrb	r2, [r7, #3]
 8003156:	6879      	ldr	r1, [r7, #4]
 8003158:	4613      	mov	r3, r2
 800315a:	011b      	lsls	r3, r3, #4
 800315c:	1a9b      	subs	r3, r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	440b      	add	r3, r1
 8003162:	3326      	adds	r3, #38	@ 0x26
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00a      	beq.n	8003180 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800316a:	78fa      	ldrb	r2, [r7, #3]
 800316c:	6879      	ldr	r1, [r7, #4]
 800316e:	4613      	mov	r3, r2
 8003170:	011b      	lsls	r3, r3, #4
 8003172:	1a9b      	subs	r3, r3, r2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	440b      	add	r3, r1
 8003178:	3326      	adds	r3, #38	@ 0x26
 800317a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800317c:	2b02      	cmp	r3, #2
 800317e:	d159      	bne.n	8003234 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003180:	78fb      	ldrb	r3, [r7, #3]
 8003182:	015a      	lsls	r2, r3, #5
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	4413      	add	r3, r2
 8003188:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003196:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800319e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80031a0:	78fb      	ldrb	r3, [r7, #3]
 80031a2:	015a      	lsls	r2, r3, #5
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	4413      	add	r3, r2
 80031a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031ac:	461a      	mov	r2, r3
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	6013      	str	r3, [r2, #0]
 80031b2:	e03f      	b.n	8003234 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80031b4:	78fa      	ldrb	r2, [r7, #3]
 80031b6:	6879      	ldr	r1, [r7, #4]
 80031b8:	4613      	mov	r3, r2
 80031ba:	011b      	lsls	r3, r3, #4
 80031bc:	1a9b      	subs	r3, r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	440b      	add	r3, r1
 80031c2:	334d      	adds	r3, #77	@ 0x4d
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	2b08      	cmp	r3, #8
 80031c8:	d126      	bne.n	8003218 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80031ca:	78fa      	ldrb	r2, [r7, #3]
 80031cc:	6879      	ldr	r1, [r7, #4]
 80031ce:	4613      	mov	r3, r2
 80031d0:	011b      	lsls	r3, r3, #4
 80031d2:	1a9b      	subs	r3, r3, r2
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	440b      	add	r3, r1
 80031d8:	334d      	adds	r3, #77	@ 0x4d
 80031da:	2202      	movs	r2, #2
 80031dc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80031de:	78fa      	ldrb	r2, [r7, #3]
 80031e0:	6879      	ldr	r1, [r7, #4]
 80031e2:	4613      	mov	r3, r2
 80031e4:	011b      	lsls	r3, r3, #4
 80031e6:	1a9b      	subs	r3, r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	440b      	add	r3, r1
 80031ec:	3344      	adds	r3, #68	@ 0x44
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	1c59      	adds	r1, r3, #1
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	4613      	mov	r3, r2
 80031f6:	011b      	lsls	r3, r3, #4
 80031f8:	1a9b      	subs	r3, r3, r2
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	4403      	add	r3, r0
 80031fe:	3344      	adds	r3, #68	@ 0x44
 8003200:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003202:	78fa      	ldrb	r2, [r7, #3]
 8003204:	6879      	ldr	r1, [r7, #4]
 8003206:	4613      	mov	r3, r2
 8003208:	011b      	lsls	r3, r3, #4
 800320a:	1a9b      	subs	r3, r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	440b      	add	r3, r1
 8003210:	334c      	adds	r3, #76	@ 0x4c
 8003212:	2204      	movs	r2, #4
 8003214:	701a      	strb	r2, [r3, #0]
 8003216:	e00d      	b.n	8003234 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003218:	78fa      	ldrb	r2, [r7, #3]
 800321a:	6879      	ldr	r1, [r7, #4]
 800321c:	4613      	mov	r3, r2
 800321e:	011b      	lsls	r3, r3, #4
 8003220:	1a9b      	subs	r3, r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	440b      	add	r3, r1
 8003226:	334d      	adds	r3, #77	@ 0x4d
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	2b02      	cmp	r3, #2
 800322c:	f000 8100 	beq.w	8003430 <HCD_HC_IN_IRQHandler+0xcca>
 8003230:	e000      	b.n	8003234 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003232:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003234:	78fa      	ldrb	r2, [r7, #3]
 8003236:	6879      	ldr	r1, [r7, #4]
 8003238:	4613      	mov	r3, r2
 800323a:	011b      	lsls	r3, r3, #4
 800323c:	1a9b      	subs	r3, r3, r2
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	440b      	add	r3, r1
 8003242:	334c      	adds	r3, #76	@ 0x4c
 8003244:	781a      	ldrb	r2, [r3, #0]
 8003246:	78fb      	ldrb	r3, [r7, #3]
 8003248:	4619      	mov	r1, r3
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f005 fe38 	bl	8008ec0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003250:	e0ef      	b.n	8003432 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	78fa      	ldrb	r2, [r7, #3]
 8003258:	4611      	mov	r1, r2
 800325a:	4618      	mov	r0, r3
 800325c:	f002 fd33 	bl	8005cc6 <USB_ReadChInterrupts>
 8003260:	4603      	mov	r3, r0
 8003262:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003266:	2b40      	cmp	r3, #64	@ 0x40
 8003268:	d12f      	bne.n	80032ca <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800326a:	78fb      	ldrb	r3, [r7, #3]
 800326c:	015a      	lsls	r2, r3, #5
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	4413      	add	r3, r2
 8003272:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003276:	461a      	mov	r2, r3
 8003278:	2340      	movs	r3, #64	@ 0x40
 800327a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800327c:	78fa      	ldrb	r2, [r7, #3]
 800327e:	6879      	ldr	r1, [r7, #4]
 8003280:	4613      	mov	r3, r2
 8003282:	011b      	lsls	r3, r3, #4
 8003284:	1a9b      	subs	r3, r3, r2
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	440b      	add	r3, r1
 800328a:	334d      	adds	r3, #77	@ 0x4d
 800328c:	2205      	movs	r2, #5
 800328e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003290:	78fa      	ldrb	r2, [r7, #3]
 8003292:	6879      	ldr	r1, [r7, #4]
 8003294:	4613      	mov	r3, r2
 8003296:	011b      	lsls	r3, r3, #4
 8003298:	1a9b      	subs	r3, r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	440b      	add	r3, r1
 800329e:	331a      	adds	r3, #26
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d109      	bne.n	80032ba <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80032a6:	78fa      	ldrb	r2, [r7, #3]
 80032a8:	6879      	ldr	r1, [r7, #4]
 80032aa:	4613      	mov	r3, r2
 80032ac:	011b      	lsls	r3, r3, #4
 80032ae:	1a9b      	subs	r3, r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	440b      	add	r3, r1
 80032b4:	3344      	adds	r3, #68	@ 0x44
 80032b6:	2200      	movs	r2, #0
 80032b8:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	78fa      	ldrb	r2, [r7, #3]
 80032c0:	4611      	mov	r1, r2
 80032c2:	4618      	mov	r0, r3
 80032c4:	f003 faa3 	bl	800680e <USB_HC_Halt>
 80032c8:	e0b3      	b.n	8003432 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	78fa      	ldrb	r2, [r7, #3]
 80032d0:	4611      	mov	r1, r2
 80032d2:	4618      	mov	r0, r3
 80032d4:	f002 fcf7 	bl	8005cc6 <USB_ReadChInterrupts>
 80032d8:	4603      	mov	r3, r0
 80032da:	f003 0310 	and.w	r3, r3, #16
 80032de:	2b10      	cmp	r3, #16
 80032e0:	f040 80a7 	bne.w	8003432 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80032e4:	78fa      	ldrb	r2, [r7, #3]
 80032e6:	6879      	ldr	r1, [r7, #4]
 80032e8:	4613      	mov	r3, r2
 80032ea:	011b      	lsls	r3, r3, #4
 80032ec:	1a9b      	subs	r3, r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	440b      	add	r3, r1
 80032f2:	3326      	adds	r3, #38	@ 0x26
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	2b03      	cmp	r3, #3
 80032f8:	d11b      	bne.n	8003332 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80032fa:	78fa      	ldrb	r2, [r7, #3]
 80032fc:	6879      	ldr	r1, [r7, #4]
 80032fe:	4613      	mov	r3, r2
 8003300:	011b      	lsls	r3, r3, #4
 8003302:	1a9b      	subs	r3, r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	440b      	add	r3, r1
 8003308:	3344      	adds	r3, #68	@ 0x44
 800330a:	2200      	movs	r2, #0
 800330c:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800330e:	78fa      	ldrb	r2, [r7, #3]
 8003310:	6879      	ldr	r1, [r7, #4]
 8003312:	4613      	mov	r3, r2
 8003314:	011b      	lsls	r3, r3, #4
 8003316:	1a9b      	subs	r3, r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	440b      	add	r3, r1
 800331c:	334d      	adds	r3, #77	@ 0x4d
 800331e:	2204      	movs	r2, #4
 8003320:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	78fa      	ldrb	r2, [r7, #3]
 8003328:	4611      	mov	r1, r2
 800332a:	4618      	mov	r0, r3
 800332c:	f003 fa6f 	bl	800680e <USB_HC_Halt>
 8003330:	e03f      	b.n	80033b2 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003332:	78fa      	ldrb	r2, [r7, #3]
 8003334:	6879      	ldr	r1, [r7, #4]
 8003336:	4613      	mov	r3, r2
 8003338:	011b      	lsls	r3, r3, #4
 800333a:	1a9b      	subs	r3, r3, r2
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	440b      	add	r3, r1
 8003340:	3326      	adds	r3, #38	@ 0x26
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d00a      	beq.n	800335e <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003348:	78fa      	ldrb	r2, [r7, #3]
 800334a:	6879      	ldr	r1, [r7, #4]
 800334c:	4613      	mov	r3, r2
 800334e:	011b      	lsls	r3, r3, #4
 8003350:	1a9b      	subs	r3, r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	440b      	add	r3, r1
 8003356:	3326      	adds	r3, #38	@ 0x26
 8003358:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800335a:	2b02      	cmp	r3, #2
 800335c:	d129      	bne.n	80033b2 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800335e:	78fa      	ldrb	r2, [r7, #3]
 8003360:	6879      	ldr	r1, [r7, #4]
 8003362:	4613      	mov	r3, r2
 8003364:	011b      	lsls	r3, r3, #4
 8003366:	1a9b      	subs	r3, r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	440b      	add	r3, r1
 800336c:	3344      	adds	r3, #68	@ 0x44
 800336e:	2200      	movs	r2, #0
 8003370:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	799b      	ldrb	r3, [r3, #6]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00a      	beq.n	8003390 <HCD_HC_IN_IRQHandler+0xc2a>
 800337a:	78fa      	ldrb	r2, [r7, #3]
 800337c:	6879      	ldr	r1, [r7, #4]
 800337e:	4613      	mov	r3, r2
 8003380:	011b      	lsls	r3, r3, #4
 8003382:	1a9b      	subs	r3, r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	440b      	add	r3, r1
 8003388:	331b      	adds	r3, #27
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d110      	bne.n	80033b2 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8003390:	78fa      	ldrb	r2, [r7, #3]
 8003392:	6879      	ldr	r1, [r7, #4]
 8003394:	4613      	mov	r3, r2
 8003396:	011b      	lsls	r3, r3, #4
 8003398:	1a9b      	subs	r3, r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	440b      	add	r3, r1
 800339e:	334d      	adds	r3, #77	@ 0x4d
 80033a0:	2204      	movs	r2, #4
 80033a2:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	78fa      	ldrb	r2, [r7, #3]
 80033aa:	4611      	mov	r1, r2
 80033ac:	4618      	mov	r0, r3
 80033ae:	f003 fa2e 	bl	800680e <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80033b2:	78fa      	ldrb	r2, [r7, #3]
 80033b4:	6879      	ldr	r1, [r7, #4]
 80033b6:	4613      	mov	r3, r2
 80033b8:	011b      	lsls	r3, r3, #4
 80033ba:	1a9b      	subs	r3, r3, r2
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	440b      	add	r3, r1
 80033c0:	331b      	adds	r3, #27
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d129      	bne.n	800341c <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80033c8:	78fa      	ldrb	r2, [r7, #3]
 80033ca:	6879      	ldr	r1, [r7, #4]
 80033cc:	4613      	mov	r3, r2
 80033ce:	011b      	lsls	r3, r3, #4
 80033d0:	1a9b      	subs	r3, r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	440b      	add	r3, r1
 80033d6:	331b      	adds	r3, #27
 80033d8:	2200      	movs	r2, #0
 80033da:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80033dc:	78fb      	ldrb	r3, [r7, #3]
 80033de:	015a      	lsls	r2, r3, #5
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	4413      	add	r3, r2
 80033e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	78fa      	ldrb	r2, [r7, #3]
 80033ec:	0151      	lsls	r1, r2, #5
 80033ee:	693a      	ldr	r2, [r7, #16]
 80033f0:	440a      	add	r2, r1
 80033f2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80033f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033fa:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80033fc:	78fb      	ldrb	r3, [r7, #3]
 80033fe:	015a      	lsls	r2, r3, #5
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	4413      	add	r3, r2
 8003404:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	78fa      	ldrb	r2, [r7, #3]
 800340c:	0151      	lsls	r1, r2, #5
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	440a      	add	r2, r1
 8003412:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003416:	f043 0320 	orr.w	r3, r3, #32
 800341a:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800341c:	78fb      	ldrb	r3, [r7, #3]
 800341e:	015a      	lsls	r2, r3, #5
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	4413      	add	r3, r2
 8003424:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003428:	461a      	mov	r2, r3
 800342a:	2310      	movs	r3, #16
 800342c:	6093      	str	r3, [r2, #8]
 800342e:	e000      	b.n	8003432 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003430:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003432:	3718      	adds	r7, #24
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b086      	sub	sp, #24
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	460b      	mov	r3, r1
 8003442:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	78fa      	ldrb	r2, [r7, #3]
 8003454:	4611      	mov	r1, r2
 8003456:	4618      	mov	r0, r3
 8003458:	f002 fc35 	bl	8005cc6 <USB_ReadChInterrupts>
 800345c:	4603      	mov	r3, r0
 800345e:	f003 0304 	and.w	r3, r3, #4
 8003462:	2b04      	cmp	r3, #4
 8003464:	d11b      	bne.n	800349e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003466:	78fb      	ldrb	r3, [r7, #3]
 8003468:	015a      	lsls	r2, r3, #5
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	4413      	add	r3, r2
 800346e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003472:	461a      	mov	r2, r3
 8003474:	2304      	movs	r3, #4
 8003476:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003478:	78fa      	ldrb	r2, [r7, #3]
 800347a:	6879      	ldr	r1, [r7, #4]
 800347c:	4613      	mov	r3, r2
 800347e:	011b      	lsls	r3, r3, #4
 8003480:	1a9b      	subs	r3, r3, r2
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	440b      	add	r3, r1
 8003486:	334d      	adds	r3, #77	@ 0x4d
 8003488:	2207      	movs	r2, #7
 800348a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	78fa      	ldrb	r2, [r7, #3]
 8003492:	4611      	mov	r1, r2
 8003494:	4618      	mov	r0, r3
 8003496:	f003 f9ba 	bl	800680e <USB_HC_Halt>
 800349a:	f000 bc89 	b.w	8003db0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	78fa      	ldrb	r2, [r7, #3]
 80034a4:	4611      	mov	r1, r2
 80034a6:	4618      	mov	r0, r3
 80034a8:	f002 fc0d 	bl	8005cc6 <USB_ReadChInterrupts>
 80034ac:	4603      	mov	r3, r0
 80034ae:	f003 0320 	and.w	r3, r3, #32
 80034b2:	2b20      	cmp	r3, #32
 80034b4:	f040 8082 	bne.w	80035bc <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80034b8:	78fb      	ldrb	r3, [r7, #3]
 80034ba:	015a      	lsls	r2, r3, #5
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	4413      	add	r3, r2
 80034c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034c4:	461a      	mov	r2, r3
 80034c6:	2320      	movs	r3, #32
 80034c8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80034ca:	78fa      	ldrb	r2, [r7, #3]
 80034cc:	6879      	ldr	r1, [r7, #4]
 80034ce:	4613      	mov	r3, r2
 80034d0:	011b      	lsls	r3, r3, #4
 80034d2:	1a9b      	subs	r3, r3, r2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	440b      	add	r3, r1
 80034d8:	3319      	adds	r3, #25
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d124      	bne.n	800352a <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80034e0:	78fa      	ldrb	r2, [r7, #3]
 80034e2:	6879      	ldr	r1, [r7, #4]
 80034e4:	4613      	mov	r3, r2
 80034e6:	011b      	lsls	r3, r3, #4
 80034e8:	1a9b      	subs	r3, r3, r2
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	440b      	add	r3, r1
 80034ee:	3319      	adds	r3, #25
 80034f0:	2200      	movs	r2, #0
 80034f2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80034f4:	78fa      	ldrb	r2, [r7, #3]
 80034f6:	6879      	ldr	r1, [r7, #4]
 80034f8:	4613      	mov	r3, r2
 80034fa:	011b      	lsls	r3, r3, #4
 80034fc:	1a9b      	subs	r3, r3, r2
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	440b      	add	r3, r1
 8003502:	334c      	adds	r3, #76	@ 0x4c
 8003504:	2202      	movs	r2, #2
 8003506:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003508:	78fa      	ldrb	r2, [r7, #3]
 800350a:	6879      	ldr	r1, [r7, #4]
 800350c:	4613      	mov	r3, r2
 800350e:	011b      	lsls	r3, r3, #4
 8003510:	1a9b      	subs	r3, r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	440b      	add	r3, r1
 8003516:	334d      	adds	r3, #77	@ 0x4d
 8003518:	2203      	movs	r2, #3
 800351a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	78fa      	ldrb	r2, [r7, #3]
 8003522:	4611      	mov	r1, r2
 8003524:	4618      	mov	r0, r3
 8003526:	f003 f972 	bl	800680e <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 800352a:	78fa      	ldrb	r2, [r7, #3]
 800352c:	6879      	ldr	r1, [r7, #4]
 800352e:	4613      	mov	r3, r2
 8003530:	011b      	lsls	r3, r3, #4
 8003532:	1a9b      	subs	r3, r3, r2
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	440b      	add	r3, r1
 8003538:	331a      	adds	r3, #26
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	2b01      	cmp	r3, #1
 800353e:	f040 8437 	bne.w	8003db0 <HCD_HC_OUT_IRQHandler+0x978>
 8003542:	78fa      	ldrb	r2, [r7, #3]
 8003544:	6879      	ldr	r1, [r7, #4]
 8003546:	4613      	mov	r3, r2
 8003548:	011b      	lsls	r3, r3, #4
 800354a:	1a9b      	subs	r3, r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	440b      	add	r3, r1
 8003550:	331b      	adds	r3, #27
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	2b00      	cmp	r3, #0
 8003556:	f040 842b 	bne.w	8003db0 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 800355a:	78fa      	ldrb	r2, [r7, #3]
 800355c:	6879      	ldr	r1, [r7, #4]
 800355e:	4613      	mov	r3, r2
 8003560:	011b      	lsls	r3, r3, #4
 8003562:	1a9b      	subs	r3, r3, r2
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	440b      	add	r3, r1
 8003568:	3326      	adds	r3, #38	@ 0x26
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	2b01      	cmp	r3, #1
 800356e:	d009      	beq.n	8003584 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003570:	78fa      	ldrb	r2, [r7, #3]
 8003572:	6879      	ldr	r1, [r7, #4]
 8003574:	4613      	mov	r3, r2
 8003576:	011b      	lsls	r3, r3, #4
 8003578:	1a9b      	subs	r3, r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	440b      	add	r3, r1
 800357e:	331b      	adds	r3, #27
 8003580:	2201      	movs	r2, #1
 8003582:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003584:	78fa      	ldrb	r2, [r7, #3]
 8003586:	6879      	ldr	r1, [r7, #4]
 8003588:	4613      	mov	r3, r2
 800358a:	011b      	lsls	r3, r3, #4
 800358c:	1a9b      	subs	r3, r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	440b      	add	r3, r1
 8003592:	334d      	adds	r3, #77	@ 0x4d
 8003594:	2203      	movs	r2, #3
 8003596:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	78fa      	ldrb	r2, [r7, #3]
 800359e:	4611      	mov	r1, r2
 80035a0:	4618      	mov	r0, r3
 80035a2:	f003 f934 	bl	800680e <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80035a6:	78fa      	ldrb	r2, [r7, #3]
 80035a8:	6879      	ldr	r1, [r7, #4]
 80035aa:	4613      	mov	r3, r2
 80035ac:	011b      	lsls	r3, r3, #4
 80035ae:	1a9b      	subs	r3, r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	440b      	add	r3, r1
 80035b4:	3344      	adds	r3, #68	@ 0x44
 80035b6:	2200      	movs	r2, #0
 80035b8:	601a      	str	r2, [r3, #0]
 80035ba:	e3f9      	b.n	8003db0 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	78fa      	ldrb	r2, [r7, #3]
 80035c2:	4611      	mov	r1, r2
 80035c4:	4618      	mov	r0, r3
 80035c6:	f002 fb7e 	bl	8005cc6 <USB_ReadChInterrupts>
 80035ca:	4603      	mov	r3, r0
 80035cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035d4:	d111      	bne.n	80035fa <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80035d6:	78fb      	ldrb	r3, [r7, #3]
 80035d8:	015a      	lsls	r2, r3, #5
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	4413      	add	r3, r2
 80035de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035e2:	461a      	mov	r2, r3
 80035e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80035e8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	78fa      	ldrb	r2, [r7, #3]
 80035f0:	4611      	mov	r1, r2
 80035f2:	4618      	mov	r0, r3
 80035f4:	f003 f90b 	bl	800680e <USB_HC_Halt>
 80035f8:	e3da      	b.n	8003db0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	78fa      	ldrb	r2, [r7, #3]
 8003600:	4611      	mov	r1, r2
 8003602:	4618      	mov	r0, r3
 8003604:	f002 fb5f 	bl	8005cc6 <USB_ReadChInterrupts>
 8003608:	4603      	mov	r3, r0
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	2b01      	cmp	r3, #1
 8003610:	d168      	bne.n	80036e4 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003612:	78fa      	ldrb	r2, [r7, #3]
 8003614:	6879      	ldr	r1, [r7, #4]
 8003616:	4613      	mov	r3, r2
 8003618:	011b      	lsls	r3, r3, #4
 800361a:	1a9b      	subs	r3, r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	440b      	add	r3, r1
 8003620:	3344      	adds	r3, #68	@ 0x44
 8003622:	2200      	movs	r2, #0
 8003624:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	78fa      	ldrb	r2, [r7, #3]
 800362c:	4611      	mov	r1, r2
 800362e:	4618      	mov	r0, r3
 8003630:	f002 fb49 	bl	8005cc6 <USB_ReadChInterrupts>
 8003634:	4603      	mov	r3, r0
 8003636:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800363a:	2b40      	cmp	r3, #64	@ 0x40
 800363c:	d112      	bne.n	8003664 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800363e:	78fa      	ldrb	r2, [r7, #3]
 8003640:	6879      	ldr	r1, [r7, #4]
 8003642:	4613      	mov	r3, r2
 8003644:	011b      	lsls	r3, r3, #4
 8003646:	1a9b      	subs	r3, r3, r2
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	440b      	add	r3, r1
 800364c:	3319      	adds	r3, #25
 800364e:	2201      	movs	r2, #1
 8003650:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003652:	78fb      	ldrb	r3, [r7, #3]
 8003654:	015a      	lsls	r2, r3, #5
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	4413      	add	r3, r2
 800365a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800365e:	461a      	mov	r2, r3
 8003660:	2340      	movs	r3, #64	@ 0x40
 8003662:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003664:	78fa      	ldrb	r2, [r7, #3]
 8003666:	6879      	ldr	r1, [r7, #4]
 8003668:	4613      	mov	r3, r2
 800366a:	011b      	lsls	r3, r3, #4
 800366c:	1a9b      	subs	r3, r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	440b      	add	r3, r1
 8003672:	331b      	adds	r3, #27
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d019      	beq.n	80036ae <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800367a:	78fa      	ldrb	r2, [r7, #3]
 800367c:	6879      	ldr	r1, [r7, #4]
 800367e:	4613      	mov	r3, r2
 8003680:	011b      	lsls	r3, r3, #4
 8003682:	1a9b      	subs	r3, r3, r2
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	440b      	add	r3, r1
 8003688:	331b      	adds	r3, #27
 800368a:	2200      	movs	r2, #0
 800368c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800368e:	78fb      	ldrb	r3, [r7, #3]
 8003690:	015a      	lsls	r2, r3, #5
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	4413      	add	r3, r2
 8003696:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	78fa      	ldrb	r2, [r7, #3]
 800369e:	0151      	lsls	r1, r2, #5
 80036a0:	693a      	ldr	r2, [r7, #16]
 80036a2:	440a      	add	r2, r1
 80036a4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80036a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036ac:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80036ae:	78fb      	ldrb	r3, [r7, #3]
 80036b0:	015a      	lsls	r2, r3, #5
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	4413      	add	r3, r2
 80036b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036ba:	461a      	mov	r2, r3
 80036bc:	2301      	movs	r3, #1
 80036be:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80036c0:	78fa      	ldrb	r2, [r7, #3]
 80036c2:	6879      	ldr	r1, [r7, #4]
 80036c4:	4613      	mov	r3, r2
 80036c6:	011b      	lsls	r3, r3, #4
 80036c8:	1a9b      	subs	r3, r3, r2
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	440b      	add	r3, r1
 80036ce:	334d      	adds	r3, #77	@ 0x4d
 80036d0:	2201      	movs	r2, #1
 80036d2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	78fa      	ldrb	r2, [r7, #3]
 80036da:	4611      	mov	r1, r2
 80036dc:	4618      	mov	r0, r3
 80036de:	f003 f896 	bl	800680e <USB_HC_Halt>
 80036e2:	e365      	b.n	8003db0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	78fa      	ldrb	r2, [r7, #3]
 80036ea:	4611      	mov	r1, r2
 80036ec:	4618      	mov	r0, r3
 80036ee:	f002 faea 	bl	8005cc6 <USB_ReadChInterrupts>
 80036f2:	4603      	mov	r3, r0
 80036f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036f8:	2b40      	cmp	r3, #64	@ 0x40
 80036fa:	d139      	bne.n	8003770 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80036fc:	78fa      	ldrb	r2, [r7, #3]
 80036fe:	6879      	ldr	r1, [r7, #4]
 8003700:	4613      	mov	r3, r2
 8003702:	011b      	lsls	r3, r3, #4
 8003704:	1a9b      	subs	r3, r3, r2
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	440b      	add	r3, r1
 800370a:	334d      	adds	r3, #77	@ 0x4d
 800370c:	2205      	movs	r2, #5
 800370e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003710:	78fa      	ldrb	r2, [r7, #3]
 8003712:	6879      	ldr	r1, [r7, #4]
 8003714:	4613      	mov	r3, r2
 8003716:	011b      	lsls	r3, r3, #4
 8003718:	1a9b      	subs	r3, r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	440b      	add	r3, r1
 800371e:	331a      	adds	r3, #26
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d109      	bne.n	800373a <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003726:	78fa      	ldrb	r2, [r7, #3]
 8003728:	6879      	ldr	r1, [r7, #4]
 800372a:	4613      	mov	r3, r2
 800372c:	011b      	lsls	r3, r3, #4
 800372e:	1a9b      	subs	r3, r3, r2
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	440b      	add	r3, r1
 8003734:	3319      	adds	r3, #25
 8003736:	2201      	movs	r2, #1
 8003738:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 800373a:	78fa      	ldrb	r2, [r7, #3]
 800373c:	6879      	ldr	r1, [r7, #4]
 800373e:	4613      	mov	r3, r2
 8003740:	011b      	lsls	r3, r3, #4
 8003742:	1a9b      	subs	r3, r3, r2
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	440b      	add	r3, r1
 8003748:	3344      	adds	r3, #68	@ 0x44
 800374a:	2200      	movs	r2, #0
 800374c:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	78fa      	ldrb	r2, [r7, #3]
 8003754:	4611      	mov	r1, r2
 8003756:	4618      	mov	r0, r3
 8003758:	f003 f859 	bl	800680e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800375c:	78fb      	ldrb	r3, [r7, #3]
 800375e:	015a      	lsls	r2, r3, #5
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	4413      	add	r3, r2
 8003764:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003768:	461a      	mov	r2, r3
 800376a:	2340      	movs	r3, #64	@ 0x40
 800376c:	6093      	str	r3, [r2, #8]
 800376e:	e31f      	b.n	8003db0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	78fa      	ldrb	r2, [r7, #3]
 8003776:	4611      	mov	r1, r2
 8003778:	4618      	mov	r0, r3
 800377a:	f002 faa4 	bl	8005cc6 <USB_ReadChInterrupts>
 800377e:	4603      	mov	r3, r0
 8003780:	f003 0308 	and.w	r3, r3, #8
 8003784:	2b08      	cmp	r3, #8
 8003786:	d11a      	bne.n	80037be <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003788:	78fb      	ldrb	r3, [r7, #3]
 800378a:	015a      	lsls	r2, r3, #5
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	4413      	add	r3, r2
 8003790:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003794:	461a      	mov	r2, r3
 8003796:	2308      	movs	r3, #8
 8003798:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800379a:	78fa      	ldrb	r2, [r7, #3]
 800379c:	6879      	ldr	r1, [r7, #4]
 800379e:	4613      	mov	r3, r2
 80037a0:	011b      	lsls	r3, r3, #4
 80037a2:	1a9b      	subs	r3, r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	440b      	add	r3, r1
 80037a8:	334d      	adds	r3, #77	@ 0x4d
 80037aa:	2206      	movs	r2, #6
 80037ac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	78fa      	ldrb	r2, [r7, #3]
 80037b4:	4611      	mov	r1, r2
 80037b6:	4618      	mov	r0, r3
 80037b8:	f003 f829 	bl	800680e <USB_HC_Halt>
 80037bc:	e2f8      	b.n	8003db0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	78fa      	ldrb	r2, [r7, #3]
 80037c4:	4611      	mov	r1, r2
 80037c6:	4618      	mov	r0, r3
 80037c8:	f002 fa7d 	bl	8005cc6 <USB_ReadChInterrupts>
 80037cc:	4603      	mov	r3, r0
 80037ce:	f003 0310 	and.w	r3, r3, #16
 80037d2:	2b10      	cmp	r3, #16
 80037d4:	d144      	bne.n	8003860 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80037d6:	78fa      	ldrb	r2, [r7, #3]
 80037d8:	6879      	ldr	r1, [r7, #4]
 80037da:	4613      	mov	r3, r2
 80037dc:	011b      	lsls	r3, r3, #4
 80037de:	1a9b      	subs	r3, r3, r2
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	440b      	add	r3, r1
 80037e4:	3344      	adds	r3, #68	@ 0x44
 80037e6:	2200      	movs	r2, #0
 80037e8:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80037ea:	78fa      	ldrb	r2, [r7, #3]
 80037ec:	6879      	ldr	r1, [r7, #4]
 80037ee:	4613      	mov	r3, r2
 80037f0:	011b      	lsls	r3, r3, #4
 80037f2:	1a9b      	subs	r3, r3, r2
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	440b      	add	r3, r1
 80037f8:	334d      	adds	r3, #77	@ 0x4d
 80037fa:	2204      	movs	r2, #4
 80037fc:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80037fe:	78fa      	ldrb	r2, [r7, #3]
 8003800:	6879      	ldr	r1, [r7, #4]
 8003802:	4613      	mov	r3, r2
 8003804:	011b      	lsls	r3, r3, #4
 8003806:	1a9b      	subs	r3, r3, r2
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	440b      	add	r3, r1
 800380c:	3319      	adds	r3, #25
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d114      	bne.n	800383e <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003814:	78fa      	ldrb	r2, [r7, #3]
 8003816:	6879      	ldr	r1, [r7, #4]
 8003818:	4613      	mov	r3, r2
 800381a:	011b      	lsls	r3, r3, #4
 800381c:	1a9b      	subs	r3, r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	440b      	add	r3, r1
 8003822:	3318      	adds	r3, #24
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d109      	bne.n	800383e <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 800382a:	78fa      	ldrb	r2, [r7, #3]
 800382c:	6879      	ldr	r1, [r7, #4]
 800382e:	4613      	mov	r3, r2
 8003830:	011b      	lsls	r3, r3, #4
 8003832:	1a9b      	subs	r3, r3, r2
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	440b      	add	r3, r1
 8003838:	3319      	adds	r3, #25
 800383a:	2201      	movs	r2, #1
 800383c:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	78fa      	ldrb	r2, [r7, #3]
 8003844:	4611      	mov	r1, r2
 8003846:	4618      	mov	r0, r3
 8003848:	f002 ffe1 	bl	800680e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800384c:	78fb      	ldrb	r3, [r7, #3]
 800384e:	015a      	lsls	r2, r3, #5
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	4413      	add	r3, r2
 8003854:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003858:	461a      	mov	r2, r3
 800385a:	2310      	movs	r3, #16
 800385c:	6093      	str	r3, [r2, #8]
 800385e:	e2a7      	b.n	8003db0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	78fa      	ldrb	r2, [r7, #3]
 8003866:	4611      	mov	r1, r2
 8003868:	4618      	mov	r0, r3
 800386a:	f002 fa2c 	bl	8005cc6 <USB_ReadChInterrupts>
 800386e:	4603      	mov	r3, r0
 8003870:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003874:	2b80      	cmp	r3, #128	@ 0x80
 8003876:	f040 8083 	bne.w	8003980 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	799b      	ldrb	r3, [r3, #6]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d111      	bne.n	80038a6 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003882:	78fa      	ldrb	r2, [r7, #3]
 8003884:	6879      	ldr	r1, [r7, #4]
 8003886:	4613      	mov	r3, r2
 8003888:	011b      	lsls	r3, r3, #4
 800388a:	1a9b      	subs	r3, r3, r2
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	440b      	add	r3, r1
 8003890:	334d      	adds	r3, #77	@ 0x4d
 8003892:	2207      	movs	r2, #7
 8003894:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	78fa      	ldrb	r2, [r7, #3]
 800389c:	4611      	mov	r1, r2
 800389e:	4618      	mov	r0, r3
 80038a0:	f002 ffb5 	bl	800680e <USB_HC_Halt>
 80038a4:	e062      	b.n	800396c <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80038a6:	78fa      	ldrb	r2, [r7, #3]
 80038a8:	6879      	ldr	r1, [r7, #4]
 80038aa:	4613      	mov	r3, r2
 80038ac:	011b      	lsls	r3, r3, #4
 80038ae:	1a9b      	subs	r3, r3, r2
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	440b      	add	r3, r1
 80038b4:	3344      	adds	r3, #68	@ 0x44
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	1c59      	adds	r1, r3, #1
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	4613      	mov	r3, r2
 80038be:	011b      	lsls	r3, r3, #4
 80038c0:	1a9b      	subs	r3, r3, r2
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	4403      	add	r3, r0
 80038c6:	3344      	adds	r3, #68	@ 0x44
 80038c8:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80038ca:	78fa      	ldrb	r2, [r7, #3]
 80038cc:	6879      	ldr	r1, [r7, #4]
 80038ce:	4613      	mov	r3, r2
 80038d0:	011b      	lsls	r3, r3, #4
 80038d2:	1a9b      	subs	r3, r3, r2
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	440b      	add	r3, r1
 80038d8:	3344      	adds	r3, #68	@ 0x44
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d922      	bls.n	8003926 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80038e0:	78fa      	ldrb	r2, [r7, #3]
 80038e2:	6879      	ldr	r1, [r7, #4]
 80038e4:	4613      	mov	r3, r2
 80038e6:	011b      	lsls	r3, r3, #4
 80038e8:	1a9b      	subs	r3, r3, r2
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	440b      	add	r3, r1
 80038ee:	3344      	adds	r3, #68	@ 0x44
 80038f0:	2200      	movs	r2, #0
 80038f2:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80038f4:	78fa      	ldrb	r2, [r7, #3]
 80038f6:	6879      	ldr	r1, [r7, #4]
 80038f8:	4613      	mov	r3, r2
 80038fa:	011b      	lsls	r3, r3, #4
 80038fc:	1a9b      	subs	r3, r3, r2
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	440b      	add	r3, r1
 8003902:	334c      	adds	r3, #76	@ 0x4c
 8003904:	2204      	movs	r2, #4
 8003906:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003908:	78fa      	ldrb	r2, [r7, #3]
 800390a:	6879      	ldr	r1, [r7, #4]
 800390c:	4613      	mov	r3, r2
 800390e:	011b      	lsls	r3, r3, #4
 8003910:	1a9b      	subs	r3, r3, r2
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	440b      	add	r3, r1
 8003916:	334c      	adds	r3, #76	@ 0x4c
 8003918:	781a      	ldrb	r2, [r3, #0]
 800391a:	78fb      	ldrb	r3, [r7, #3]
 800391c:	4619      	mov	r1, r3
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f005 face 	bl	8008ec0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003924:	e022      	b.n	800396c <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003926:	78fa      	ldrb	r2, [r7, #3]
 8003928:	6879      	ldr	r1, [r7, #4]
 800392a:	4613      	mov	r3, r2
 800392c:	011b      	lsls	r3, r3, #4
 800392e:	1a9b      	subs	r3, r3, r2
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	440b      	add	r3, r1
 8003934:	334c      	adds	r3, #76	@ 0x4c
 8003936:	2202      	movs	r2, #2
 8003938:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800393a:	78fb      	ldrb	r3, [r7, #3]
 800393c:	015a      	lsls	r2, r3, #5
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	4413      	add	r3, r2
 8003942:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003950:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003958:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800395a:	78fb      	ldrb	r3, [r7, #3]
 800395c:	015a      	lsls	r2, r3, #5
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	4413      	add	r3, r2
 8003962:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003966:	461a      	mov	r2, r3
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800396c:	78fb      	ldrb	r3, [r7, #3]
 800396e:	015a      	lsls	r2, r3, #5
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	4413      	add	r3, r2
 8003974:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003978:	461a      	mov	r2, r3
 800397a:	2380      	movs	r3, #128	@ 0x80
 800397c:	6093      	str	r3, [r2, #8]
 800397e:	e217      	b.n	8003db0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	78fa      	ldrb	r2, [r7, #3]
 8003986:	4611      	mov	r1, r2
 8003988:	4618      	mov	r0, r3
 800398a:	f002 f99c 	bl	8005cc6 <USB_ReadChInterrupts>
 800398e:	4603      	mov	r3, r0
 8003990:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003994:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003998:	d11b      	bne.n	80039d2 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800399a:	78fa      	ldrb	r2, [r7, #3]
 800399c:	6879      	ldr	r1, [r7, #4]
 800399e:	4613      	mov	r3, r2
 80039a0:	011b      	lsls	r3, r3, #4
 80039a2:	1a9b      	subs	r3, r3, r2
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	440b      	add	r3, r1
 80039a8:	334d      	adds	r3, #77	@ 0x4d
 80039aa:	2209      	movs	r2, #9
 80039ac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	78fa      	ldrb	r2, [r7, #3]
 80039b4:	4611      	mov	r1, r2
 80039b6:	4618      	mov	r0, r3
 80039b8:	f002 ff29 	bl	800680e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80039bc:	78fb      	ldrb	r3, [r7, #3]
 80039be:	015a      	lsls	r2, r3, #5
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	4413      	add	r3, r2
 80039c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039c8:	461a      	mov	r2, r3
 80039ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80039ce:	6093      	str	r3, [r2, #8]
 80039d0:	e1ee      	b.n	8003db0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	78fa      	ldrb	r2, [r7, #3]
 80039d8:	4611      	mov	r1, r2
 80039da:	4618      	mov	r0, r3
 80039dc:	f002 f973 	bl	8005cc6 <USB_ReadChInterrupts>
 80039e0:	4603      	mov	r3, r0
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	f040 81df 	bne.w	8003daa <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80039ec:	78fb      	ldrb	r3, [r7, #3]
 80039ee:	015a      	lsls	r2, r3, #5
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	4413      	add	r3, r2
 80039f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039f8:	461a      	mov	r2, r3
 80039fa:	2302      	movs	r3, #2
 80039fc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80039fe:	78fa      	ldrb	r2, [r7, #3]
 8003a00:	6879      	ldr	r1, [r7, #4]
 8003a02:	4613      	mov	r3, r2
 8003a04:	011b      	lsls	r3, r3, #4
 8003a06:	1a9b      	subs	r3, r3, r2
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	440b      	add	r3, r1
 8003a0c:	334d      	adds	r3, #77	@ 0x4d
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	f040 8093 	bne.w	8003b3c <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003a16:	78fa      	ldrb	r2, [r7, #3]
 8003a18:	6879      	ldr	r1, [r7, #4]
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	011b      	lsls	r3, r3, #4
 8003a1e:	1a9b      	subs	r3, r3, r2
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	440b      	add	r3, r1
 8003a24:	334d      	adds	r3, #77	@ 0x4d
 8003a26:	2202      	movs	r2, #2
 8003a28:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003a2a:	78fa      	ldrb	r2, [r7, #3]
 8003a2c:	6879      	ldr	r1, [r7, #4]
 8003a2e:	4613      	mov	r3, r2
 8003a30:	011b      	lsls	r3, r3, #4
 8003a32:	1a9b      	subs	r3, r3, r2
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	440b      	add	r3, r1
 8003a38:	334c      	adds	r3, #76	@ 0x4c
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003a3e:	78fa      	ldrb	r2, [r7, #3]
 8003a40:	6879      	ldr	r1, [r7, #4]
 8003a42:	4613      	mov	r3, r2
 8003a44:	011b      	lsls	r3, r3, #4
 8003a46:	1a9b      	subs	r3, r3, r2
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	440b      	add	r3, r1
 8003a4c:	3326      	adds	r3, #38	@ 0x26
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d00b      	beq.n	8003a6c <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003a54:	78fa      	ldrb	r2, [r7, #3]
 8003a56:	6879      	ldr	r1, [r7, #4]
 8003a58:	4613      	mov	r3, r2
 8003a5a:	011b      	lsls	r3, r3, #4
 8003a5c:	1a9b      	subs	r3, r3, r2
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	440b      	add	r3, r1
 8003a62:	3326      	adds	r3, #38	@ 0x26
 8003a64:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003a66:	2b03      	cmp	r3, #3
 8003a68:	f040 8190 	bne.w	8003d8c <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	799b      	ldrb	r3, [r3, #6]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d115      	bne.n	8003aa0 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003a74:	78fa      	ldrb	r2, [r7, #3]
 8003a76:	6879      	ldr	r1, [r7, #4]
 8003a78:	4613      	mov	r3, r2
 8003a7a:	011b      	lsls	r3, r3, #4
 8003a7c:	1a9b      	subs	r3, r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	440b      	add	r3, r1
 8003a82:	333d      	adds	r3, #61	@ 0x3d
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	78fa      	ldrb	r2, [r7, #3]
 8003a88:	f083 0301 	eor.w	r3, r3, #1
 8003a8c:	b2d8      	uxtb	r0, r3
 8003a8e:	6879      	ldr	r1, [r7, #4]
 8003a90:	4613      	mov	r3, r2
 8003a92:	011b      	lsls	r3, r3, #4
 8003a94:	1a9b      	subs	r3, r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	440b      	add	r3, r1
 8003a9a:	333d      	adds	r3, #61	@ 0x3d
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	799b      	ldrb	r3, [r3, #6]
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	f040 8171 	bne.w	8003d8c <HCD_HC_OUT_IRQHandler+0x954>
 8003aaa:	78fa      	ldrb	r2, [r7, #3]
 8003aac:	6879      	ldr	r1, [r7, #4]
 8003aae:	4613      	mov	r3, r2
 8003ab0:	011b      	lsls	r3, r3, #4
 8003ab2:	1a9b      	subs	r3, r3, r2
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	440b      	add	r3, r1
 8003ab8:	3334      	adds	r3, #52	@ 0x34
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	f000 8165 	beq.w	8003d8c <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003ac2:	78fa      	ldrb	r2, [r7, #3]
 8003ac4:	6879      	ldr	r1, [r7, #4]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	011b      	lsls	r3, r3, #4
 8003aca:	1a9b      	subs	r3, r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	440b      	add	r3, r1
 8003ad0:	3334      	adds	r3, #52	@ 0x34
 8003ad2:	6819      	ldr	r1, [r3, #0]
 8003ad4:	78fa      	ldrb	r2, [r7, #3]
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	011b      	lsls	r3, r3, #4
 8003adc:	1a9b      	subs	r3, r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	4403      	add	r3, r0
 8003ae2:	3328      	adds	r3, #40	@ 0x28
 8003ae4:	881b      	ldrh	r3, [r3, #0]
 8003ae6:	440b      	add	r3, r1
 8003ae8:	1e59      	subs	r1, r3, #1
 8003aea:	78fa      	ldrb	r2, [r7, #3]
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	4613      	mov	r3, r2
 8003af0:	011b      	lsls	r3, r3, #4
 8003af2:	1a9b      	subs	r3, r3, r2
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	4403      	add	r3, r0
 8003af8:	3328      	adds	r3, #40	@ 0x28
 8003afa:	881b      	ldrh	r3, [r3, #0]
 8003afc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b00:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	f003 0301 	and.w	r3, r3, #1
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	f000 813f 	beq.w	8003d8c <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003b0e:	78fa      	ldrb	r2, [r7, #3]
 8003b10:	6879      	ldr	r1, [r7, #4]
 8003b12:	4613      	mov	r3, r2
 8003b14:	011b      	lsls	r3, r3, #4
 8003b16:	1a9b      	subs	r3, r3, r2
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	440b      	add	r3, r1
 8003b1c:	333d      	adds	r3, #61	@ 0x3d
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	78fa      	ldrb	r2, [r7, #3]
 8003b22:	f083 0301 	eor.w	r3, r3, #1
 8003b26:	b2d8      	uxtb	r0, r3
 8003b28:	6879      	ldr	r1, [r7, #4]
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	011b      	lsls	r3, r3, #4
 8003b2e:	1a9b      	subs	r3, r3, r2
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	440b      	add	r3, r1
 8003b34:	333d      	adds	r3, #61	@ 0x3d
 8003b36:	4602      	mov	r2, r0
 8003b38:	701a      	strb	r2, [r3, #0]
 8003b3a:	e127      	b.n	8003d8c <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003b3c:	78fa      	ldrb	r2, [r7, #3]
 8003b3e:	6879      	ldr	r1, [r7, #4]
 8003b40:	4613      	mov	r3, r2
 8003b42:	011b      	lsls	r3, r3, #4
 8003b44:	1a9b      	subs	r3, r3, r2
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	440b      	add	r3, r1
 8003b4a:	334d      	adds	r3, #77	@ 0x4d
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	2b03      	cmp	r3, #3
 8003b50:	d120      	bne.n	8003b94 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003b52:	78fa      	ldrb	r2, [r7, #3]
 8003b54:	6879      	ldr	r1, [r7, #4]
 8003b56:	4613      	mov	r3, r2
 8003b58:	011b      	lsls	r3, r3, #4
 8003b5a:	1a9b      	subs	r3, r3, r2
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	440b      	add	r3, r1
 8003b60:	334d      	adds	r3, #77	@ 0x4d
 8003b62:	2202      	movs	r2, #2
 8003b64:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003b66:	78fa      	ldrb	r2, [r7, #3]
 8003b68:	6879      	ldr	r1, [r7, #4]
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	011b      	lsls	r3, r3, #4
 8003b6e:	1a9b      	subs	r3, r3, r2
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	440b      	add	r3, r1
 8003b74:	331b      	adds	r3, #27
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	f040 8107 	bne.w	8003d8c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003b7e:	78fa      	ldrb	r2, [r7, #3]
 8003b80:	6879      	ldr	r1, [r7, #4]
 8003b82:	4613      	mov	r3, r2
 8003b84:	011b      	lsls	r3, r3, #4
 8003b86:	1a9b      	subs	r3, r3, r2
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	440b      	add	r3, r1
 8003b8c:	334c      	adds	r3, #76	@ 0x4c
 8003b8e:	2202      	movs	r2, #2
 8003b90:	701a      	strb	r2, [r3, #0]
 8003b92:	e0fb      	b.n	8003d8c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003b94:	78fa      	ldrb	r2, [r7, #3]
 8003b96:	6879      	ldr	r1, [r7, #4]
 8003b98:	4613      	mov	r3, r2
 8003b9a:	011b      	lsls	r3, r3, #4
 8003b9c:	1a9b      	subs	r3, r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	440b      	add	r3, r1
 8003ba2:	334d      	adds	r3, #77	@ 0x4d
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	2b04      	cmp	r3, #4
 8003ba8:	d13a      	bne.n	8003c20 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003baa:	78fa      	ldrb	r2, [r7, #3]
 8003bac:	6879      	ldr	r1, [r7, #4]
 8003bae:	4613      	mov	r3, r2
 8003bb0:	011b      	lsls	r3, r3, #4
 8003bb2:	1a9b      	subs	r3, r3, r2
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	440b      	add	r3, r1
 8003bb8:	334d      	adds	r3, #77	@ 0x4d
 8003bba:	2202      	movs	r2, #2
 8003bbc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003bbe:	78fa      	ldrb	r2, [r7, #3]
 8003bc0:	6879      	ldr	r1, [r7, #4]
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	011b      	lsls	r3, r3, #4
 8003bc6:	1a9b      	subs	r3, r3, r2
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	440b      	add	r3, r1
 8003bcc:	334c      	adds	r3, #76	@ 0x4c
 8003bce:	2202      	movs	r2, #2
 8003bd0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003bd2:	78fa      	ldrb	r2, [r7, #3]
 8003bd4:	6879      	ldr	r1, [r7, #4]
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	011b      	lsls	r3, r3, #4
 8003bda:	1a9b      	subs	r3, r3, r2
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	440b      	add	r3, r1
 8003be0:	331b      	adds	r3, #27
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	f040 80d1 	bne.w	8003d8c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003bea:	78fa      	ldrb	r2, [r7, #3]
 8003bec:	6879      	ldr	r1, [r7, #4]
 8003bee:	4613      	mov	r3, r2
 8003bf0:	011b      	lsls	r3, r3, #4
 8003bf2:	1a9b      	subs	r3, r3, r2
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	440b      	add	r3, r1
 8003bf8:	331b      	adds	r3, #27
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003bfe:	78fb      	ldrb	r3, [r7, #3]
 8003c00:	015a      	lsls	r2, r3, #5
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	4413      	add	r3, r2
 8003c06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	78fa      	ldrb	r2, [r7, #3]
 8003c0e:	0151      	lsls	r1, r2, #5
 8003c10:	693a      	ldr	r2, [r7, #16]
 8003c12:	440a      	add	r2, r1
 8003c14:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003c18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c1c:	6053      	str	r3, [r2, #4]
 8003c1e:	e0b5      	b.n	8003d8c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003c20:	78fa      	ldrb	r2, [r7, #3]
 8003c22:	6879      	ldr	r1, [r7, #4]
 8003c24:	4613      	mov	r3, r2
 8003c26:	011b      	lsls	r3, r3, #4
 8003c28:	1a9b      	subs	r3, r3, r2
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	440b      	add	r3, r1
 8003c2e:	334d      	adds	r3, #77	@ 0x4d
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	2b05      	cmp	r3, #5
 8003c34:	d114      	bne.n	8003c60 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003c36:	78fa      	ldrb	r2, [r7, #3]
 8003c38:	6879      	ldr	r1, [r7, #4]
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	011b      	lsls	r3, r3, #4
 8003c3e:	1a9b      	subs	r3, r3, r2
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	440b      	add	r3, r1
 8003c44:	334d      	adds	r3, #77	@ 0x4d
 8003c46:	2202      	movs	r2, #2
 8003c48:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003c4a:	78fa      	ldrb	r2, [r7, #3]
 8003c4c:	6879      	ldr	r1, [r7, #4]
 8003c4e:	4613      	mov	r3, r2
 8003c50:	011b      	lsls	r3, r3, #4
 8003c52:	1a9b      	subs	r3, r3, r2
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	440b      	add	r3, r1
 8003c58:	334c      	adds	r3, #76	@ 0x4c
 8003c5a:	2202      	movs	r2, #2
 8003c5c:	701a      	strb	r2, [r3, #0]
 8003c5e:	e095      	b.n	8003d8c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003c60:	78fa      	ldrb	r2, [r7, #3]
 8003c62:	6879      	ldr	r1, [r7, #4]
 8003c64:	4613      	mov	r3, r2
 8003c66:	011b      	lsls	r3, r3, #4
 8003c68:	1a9b      	subs	r3, r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	440b      	add	r3, r1
 8003c6e:	334d      	adds	r3, #77	@ 0x4d
 8003c70:	781b      	ldrb	r3, [r3, #0]
 8003c72:	2b06      	cmp	r3, #6
 8003c74:	d114      	bne.n	8003ca0 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003c76:	78fa      	ldrb	r2, [r7, #3]
 8003c78:	6879      	ldr	r1, [r7, #4]
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	011b      	lsls	r3, r3, #4
 8003c7e:	1a9b      	subs	r3, r3, r2
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	440b      	add	r3, r1
 8003c84:	334d      	adds	r3, #77	@ 0x4d
 8003c86:	2202      	movs	r2, #2
 8003c88:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003c8a:	78fa      	ldrb	r2, [r7, #3]
 8003c8c:	6879      	ldr	r1, [r7, #4]
 8003c8e:	4613      	mov	r3, r2
 8003c90:	011b      	lsls	r3, r3, #4
 8003c92:	1a9b      	subs	r3, r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	440b      	add	r3, r1
 8003c98:	334c      	adds	r3, #76	@ 0x4c
 8003c9a:	2205      	movs	r2, #5
 8003c9c:	701a      	strb	r2, [r3, #0]
 8003c9e:	e075      	b.n	8003d8c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003ca0:	78fa      	ldrb	r2, [r7, #3]
 8003ca2:	6879      	ldr	r1, [r7, #4]
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	011b      	lsls	r3, r3, #4
 8003ca8:	1a9b      	subs	r3, r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	440b      	add	r3, r1
 8003cae:	334d      	adds	r3, #77	@ 0x4d
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	2b07      	cmp	r3, #7
 8003cb4:	d00a      	beq.n	8003ccc <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003cb6:	78fa      	ldrb	r2, [r7, #3]
 8003cb8:	6879      	ldr	r1, [r7, #4]
 8003cba:	4613      	mov	r3, r2
 8003cbc:	011b      	lsls	r3, r3, #4
 8003cbe:	1a9b      	subs	r3, r3, r2
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	440b      	add	r3, r1
 8003cc4:	334d      	adds	r3, #77	@ 0x4d
 8003cc6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003cc8:	2b09      	cmp	r3, #9
 8003cca:	d170      	bne.n	8003dae <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003ccc:	78fa      	ldrb	r2, [r7, #3]
 8003cce:	6879      	ldr	r1, [r7, #4]
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	011b      	lsls	r3, r3, #4
 8003cd4:	1a9b      	subs	r3, r3, r2
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	440b      	add	r3, r1
 8003cda:	334d      	adds	r3, #77	@ 0x4d
 8003cdc:	2202      	movs	r2, #2
 8003cde:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003ce0:	78fa      	ldrb	r2, [r7, #3]
 8003ce2:	6879      	ldr	r1, [r7, #4]
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	011b      	lsls	r3, r3, #4
 8003ce8:	1a9b      	subs	r3, r3, r2
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	440b      	add	r3, r1
 8003cee:	3344      	adds	r3, #68	@ 0x44
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	1c59      	adds	r1, r3, #1
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	4613      	mov	r3, r2
 8003cf8:	011b      	lsls	r3, r3, #4
 8003cfa:	1a9b      	subs	r3, r3, r2
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	4403      	add	r3, r0
 8003d00:	3344      	adds	r3, #68	@ 0x44
 8003d02:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003d04:	78fa      	ldrb	r2, [r7, #3]
 8003d06:	6879      	ldr	r1, [r7, #4]
 8003d08:	4613      	mov	r3, r2
 8003d0a:	011b      	lsls	r3, r3, #4
 8003d0c:	1a9b      	subs	r3, r3, r2
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	440b      	add	r3, r1
 8003d12:	3344      	adds	r3, #68	@ 0x44
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d914      	bls.n	8003d44 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003d1a:	78fa      	ldrb	r2, [r7, #3]
 8003d1c:	6879      	ldr	r1, [r7, #4]
 8003d1e:	4613      	mov	r3, r2
 8003d20:	011b      	lsls	r3, r3, #4
 8003d22:	1a9b      	subs	r3, r3, r2
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	440b      	add	r3, r1
 8003d28:	3344      	adds	r3, #68	@ 0x44
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003d2e:	78fa      	ldrb	r2, [r7, #3]
 8003d30:	6879      	ldr	r1, [r7, #4]
 8003d32:	4613      	mov	r3, r2
 8003d34:	011b      	lsls	r3, r3, #4
 8003d36:	1a9b      	subs	r3, r3, r2
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	440b      	add	r3, r1
 8003d3c:	334c      	adds	r3, #76	@ 0x4c
 8003d3e:	2204      	movs	r2, #4
 8003d40:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003d42:	e022      	b.n	8003d8a <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003d44:	78fa      	ldrb	r2, [r7, #3]
 8003d46:	6879      	ldr	r1, [r7, #4]
 8003d48:	4613      	mov	r3, r2
 8003d4a:	011b      	lsls	r3, r3, #4
 8003d4c:	1a9b      	subs	r3, r3, r2
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	440b      	add	r3, r1
 8003d52:	334c      	adds	r3, #76	@ 0x4c
 8003d54:	2202      	movs	r2, #2
 8003d56:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003d58:	78fb      	ldrb	r3, [r7, #3]
 8003d5a:	015a      	lsls	r2, r3, #5
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	4413      	add	r3, r2
 8003d60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003d6e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003d76:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003d78:	78fb      	ldrb	r3, [r7, #3]
 8003d7a:	015a      	lsls	r2, r3, #5
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	4413      	add	r3, r2
 8003d80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d84:	461a      	mov	r2, r3
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003d8a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003d8c:	78fa      	ldrb	r2, [r7, #3]
 8003d8e:	6879      	ldr	r1, [r7, #4]
 8003d90:	4613      	mov	r3, r2
 8003d92:	011b      	lsls	r3, r3, #4
 8003d94:	1a9b      	subs	r3, r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	440b      	add	r3, r1
 8003d9a:	334c      	adds	r3, #76	@ 0x4c
 8003d9c:	781a      	ldrb	r2, [r3, #0]
 8003d9e:	78fb      	ldrb	r3, [r7, #3]
 8003da0:	4619      	mov	r1, r3
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f005 f88c 	bl	8008ec0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003da8:	e002      	b.n	8003db0 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003daa:	bf00      	nop
 8003dac:	e000      	b.n	8003db0 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8003dae:	bf00      	nop
  }
}
 8003db0:	3718      	adds	r7, #24
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}

08003db6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003db6:	b580      	push	{r7, lr}
 8003db8:	b08a      	sub	sp, #40	@ 0x28
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	6a1b      	ldr	r3, [r3, #32]
 8003dce:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	f003 030f 	and.w	r3, r3, #15
 8003dd6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	0c5b      	lsrs	r3, r3, #17
 8003ddc:	f003 030f 	and.w	r3, r3, #15
 8003de0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	091b      	lsrs	r3, r3, #4
 8003de6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003dea:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d004      	beq.n	8003dfc <HCD_RXQLVL_IRQHandler+0x46>
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	2b05      	cmp	r3, #5
 8003df6:	f000 80b6 	beq.w	8003f66 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003dfa:	e0b7      	b.n	8003f6c <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	f000 80b3 	beq.w	8003f6a <HCD_RXQLVL_IRQHandler+0x1b4>
 8003e04:	6879      	ldr	r1, [r7, #4]
 8003e06:	69ba      	ldr	r2, [r7, #24]
 8003e08:	4613      	mov	r3, r2
 8003e0a:	011b      	lsls	r3, r3, #4
 8003e0c:	1a9b      	subs	r3, r3, r2
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	440b      	add	r3, r1
 8003e12:	332c      	adds	r3, #44	@ 0x2c
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	f000 80a7 	beq.w	8003f6a <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003e1c:	6879      	ldr	r1, [r7, #4]
 8003e1e:	69ba      	ldr	r2, [r7, #24]
 8003e20:	4613      	mov	r3, r2
 8003e22:	011b      	lsls	r3, r3, #4
 8003e24:	1a9b      	subs	r3, r3, r2
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	440b      	add	r3, r1
 8003e2a:	3338      	adds	r3, #56	@ 0x38
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	18d1      	adds	r1, r2, r3
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	69ba      	ldr	r2, [r7, #24]
 8003e36:	4613      	mov	r3, r2
 8003e38:	011b      	lsls	r3, r3, #4
 8003e3a:	1a9b      	subs	r3, r3, r2
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	4403      	add	r3, r0
 8003e40:	3334      	adds	r3, #52	@ 0x34
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4299      	cmp	r1, r3
 8003e46:	f200 8083 	bhi.w	8003f50 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6818      	ldr	r0, [r3, #0]
 8003e4e:	6879      	ldr	r1, [r7, #4]
 8003e50:	69ba      	ldr	r2, [r7, #24]
 8003e52:	4613      	mov	r3, r2
 8003e54:	011b      	lsls	r3, r3, #4
 8003e56:	1a9b      	subs	r3, r3, r2
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	440b      	add	r3, r1
 8003e5c:	332c      	adds	r3, #44	@ 0x2c
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	693a      	ldr	r2, [r7, #16]
 8003e62:	b292      	uxth	r2, r2
 8003e64:	4619      	mov	r1, r3
 8003e66:	f001 fec3 	bl	8005bf0 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003e6a:	6879      	ldr	r1, [r7, #4]
 8003e6c:	69ba      	ldr	r2, [r7, #24]
 8003e6e:	4613      	mov	r3, r2
 8003e70:	011b      	lsls	r3, r3, #4
 8003e72:	1a9b      	subs	r3, r3, r2
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	440b      	add	r3, r1
 8003e78:	332c      	adds	r3, #44	@ 0x2c
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	18d1      	adds	r1, r2, r3
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	69ba      	ldr	r2, [r7, #24]
 8003e84:	4613      	mov	r3, r2
 8003e86:	011b      	lsls	r3, r3, #4
 8003e88:	1a9b      	subs	r3, r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	4403      	add	r3, r0
 8003e8e:	332c      	adds	r3, #44	@ 0x2c
 8003e90:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8003e92:	6879      	ldr	r1, [r7, #4]
 8003e94:	69ba      	ldr	r2, [r7, #24]
 8003e96:	4613      	mov	r3, r2
 8003e98:	011b      	lsls	r3, r3, #4
 8003e9a:	1a9b      	subs	r3, r3, r2
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	440b      	add	r3, r1
 8003ea0:	3338      	adds	r3, #56	@ 0x38
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	18d1      	adds	r1, r2, r3
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	69ba      	ldr	r2, [r7, #24]
 8003eac:	4613      	mov	r3, r2
 8003eae:	011b      	lsls	r3, r3, #4
 8003eb0:	1a9b      	subs	r3, r3, r2
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	4403      	add	r3, r0
 8003eb6:	3338      	adds	r3, #56	@ 0x38
 8003eb8:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	015a      	lsls	r2, r3, #5
 8003ebe:	6a3b      	ldr	r3, [r7, #32]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ec6:	691b      	ldr	r3, [r3, #16]
 8003ec8:	0cdb      	lsrs	r3, r3, #19
 8003eca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ece:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003ed0:	6879      	ldr	r1, [r7, #4]
 8003ed2:	69ba      	ldr	r2, [r7, #24]
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	011b      	lsls	r3, r3, #4
 8003ed8:	1a9b      	subs	r3, r3, r2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	440b      	add	r3, r1
 8003ede:	3328      	adds	r3, #40	@ 0x28
 8003ee0:	881b      	ldrh	r3, [r3, #0]
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d13f      	bne.n	8003f6a <HCD_RXQLVL_IRQHandler+0x1b4>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d03c      	beq.n	8003f6a <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	015a      	lsls	r2, r3, #5
 8003ef4:	6a3b      	ldr	r3, [r7, #32]
 8003ef6:	4413      	add	r3, r2
 8003ef8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003f06:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003f0e:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003f10:	69bb      	ldr	r3, [r7, #24]
 8003f12:	015a      	lsls	r2, r3, #5
 8003f14:	6a3b      	ldr	r3, [r7, #32]
 8003f16:	4413      	add	r3, r2
 8003f18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003f22:	6879      	ldr	r1, [r7, #4]
 8003f24:	69ba      	ldr	r2, [r7, #24]
 8003f26:	4613      	mov	r3, r2
 8003f28:	011b      	lsls	r3, r3, #4
 8003f2a:	1a9b      	subs	r3, r3, r2
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	440b      	add	r3, r1
 8003f30:	333c      	adds	r3, #60	@ 0x3c
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	f083 0301 	eor.w	r3, r3, #1
 8003f38:	b2d8      	uxtb	r0, r3
 8003f3a:	6879      	ldr	r1, [r7, #4]
 8003f3c:	69ba      	ldr	r2, [r7, #24]
 8003f3e:	4613      	mov	r3, r2
 8003f40:	011b      	lsls	r3, r3, #4
 8003f42:	1a9b      	subs	r3, r3, r2
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	440b      	add	r3, r1
 8003f48:	333c      	adds	r3, #60	@ 0x3c
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	701a      	strb	r2, [r3, #0]
      break;
 8003f4e:	e00c      	b.n	8003f6a <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003f50:	6879      	ldr	r1, [r7, #4]
 8003f52:	69ba      	ldr	r2, [r7, #24]
 8003f54:	4613      	mov	r3, r2
 8003f56:	011b      	lsls	r3, r3, #4
 8003f58:	1a9b      	subs	r3, r3, r2
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	440b      	add	r3, r1
 8003f5e:	334c      	adds	r3, #76	@ 0x4c
 8003f60:	2204      	movs	r2, #4
 8003f62:	701a      	strb	r2, [r3, #0]
      break;
 8003f64:	e001      	b.n	8003f6a <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003f66:	bf00      	nop
 8003f68:	e000      	b.n	8003f6c <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8003f6a:	bf00      	nop
  }
}
 8003f6c:	bf00      	nop
 8003f6e:	3728      	adds	r7, #40	@ 0x28
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b086      	sub	sp, #24
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003fa0:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f003 0302 	and.w	r3, r3, #2
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	d10b      	bne.n	8003fc4 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f003 0301 	and.w	r3, r3, #1
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d102      	bne.n	8003fbc <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f004 ff66 	bl	8008e88 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	f043 0302 	orr.w	r3, r3, #2
 8003fc2:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f003 0308 	and.w	r3, r3, #8
 8003fca:	2b08      	cmp	r3, #8
 8003fcc:	d132      	bne.n	8004034 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	f043 0308 	orr.w	r3, r3, #8
 8003fd4:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f003 0304 	and.w	r3, r3, #4
 8003fdc:	2b04      	cmp	r3, #4
 8003fde:	d126      	bne.n	800402e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	7a5b      	ldrb	r3, [r3, #9]
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d113      	bne.n	8004010 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8003fee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003ff2:	d106      	bne.n	8004002 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2102      	movs	r1, #2
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f001 ff88 	bl	8005f10 <USB_InitFSLSPClkSel>
 8004000:	e011      	b.n	8004026 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2101      	movs	r1, #1
 8004008:	4618      	mov	r0, r3
 800400a:	f001 ff81 	bl	8005f10 <USB_InitFSLSPClkSel>
 800400e:	e00a      	b.n	8004026 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	79db      	ldrb	r3, [r3, #7]
 8004014:	2b01      	cmp	r3, #1
 8004016:	d106      	bne.n	8004026 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800401e:	461a      	mov	r2, r3
 8004020:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8004024:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f004 ff58 	bl	8008edc <HAL_HCD_PortEnabled_Callback>
 800402c:	e002      	b.n	8004034 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f004 ff62 	bl	8008ef8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f003 0320 	and.w	r3, r3, #32
 800403a:	2b20      	cmp	r3, #32
 800403c:	d103      	bne.n	8004046 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	f043 0320 	orr.w	r3, r3, #32
 8004044:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800404c:	461a      	mov	r2, r3
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	6013      	str	r3, [r2, #0]
}
 8004052:	bf00      	nop
 8004054:	3718      	adds	r7, #24
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
	...

0800405c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d101      	bne.n	800406e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e12b      	b.n	80042c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d106      	bne.n	8004088 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f7fc fdf4 	bl	8000c70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2224      	movs	r2, #36	@ 0x24
 800408c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f022 0201 	bic.w	r2, r2, #1
 800409e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80040ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80040be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80040c0:	f000 fd80 	bl	8004bc4 <HAL_RCC_GetPCLK1Freq>
 80040c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	4a81      	ldr	r2, [pc, #516]	@ (80042d0 <HAL_I2C_Init+0x274>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d807      	bhi.n	80040e0 <HAL_I2C_Init+0x84>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	4a80      	ldr	r2, [pc, #512]	@ (80042d4 <HAL_I2C_Init+0x278>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	bf94      	ite	ls
 80040d8:	2301      	movls	r3, #1
 80040da:	2300      	movhi	r3, #0
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	e006      	b.n	80040ee <HAL_I2C_Init+0x92>
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	4a7d      	ldr	r2, [pc, #500]	@ (80042d8 <HAL_I2C_Init+0x27c>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	bf94      	ite	ls
 80040e8:	2301      	movls	r3, #1
 80040ea:	2300      	movhi	r3, #0
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d001      	beq.n	80040f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e0e7      	b.n	80042c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	4a78      	ldr	r2, [pc, #480]	@ (80042dc <HAL_I2C_Init+0x280>)
 80040fa:	fba2 2303 	umull	r2, r3, r2, r3
 80040fe:	0c9b      	lsrs	r3, r3, #18
 8004100:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	68ba      	ldr	r2, [r7, #8]
 8004112:	430a      	orrs	r2, r1
 8004114:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	6a1b      	ldr	r3, [r3, #32]
 800411c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	4a6a      	ldr	r2, [pc, #424]	@ (80042d0 <HAL_I2C_Init+0x274>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d802      	bhi.n	8004130 <HAL_I2C_Init+0xd4>
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	3301      	adds	r3, #1
 800412e:	e009      	b.n	8004144 <HAL_I2C_Init+0xe8>
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004136:	fb02 f303 	mul.w	r3, r2, r3
 800413a:	4a69      	ldr	r2, [pc, #420]	@ (80042e0 <HAL_I2C_Init+0x284>)
 800413c:	fba2 2303 	umull	r2, r3, r2, r3
 8004140:	099b      	lsrs	r3, r3, #6
 8004142:	3301      	adds	r3, #1
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	6812      	ldr	r2, [r2, #0]
 8004148:	430b      	orrs	r3, r1
 800414a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	69db      	ldr	r3, [r3, #28]
 8004152:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004156:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	495c      	ldr	r1, [pc, #368]	@ (80042d0 <HAL_I2C_Init+0x274>)
 8004160:	428b      	cmp	r3, r1
 8004162:	d819      	bhi.n	8004198 <HAL_I2C_Init+0x13c>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	1e59      	subs	r1, r3, #1
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	005b      	lsls	r3, r3, #1
 800416e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004172:	1c59      	adds	r1, r3, #1
 8004174:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004178:	400b      	ands	r3, r1
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00a      	beq.n	8004194 <HAL_I2C_Init+0x138>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	1e59      	subs	r1, r3, #1
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	005b      	lsls	r3, r3, #1
 8004188:	fbb1 f3f3 	udiv	r3, r1, r3
 800418c:	3301      	adds	r3, #1
 800418e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004192:	e051      	b.n	8004238 <HAL_I2C_Init+0x1dc>
 8004194:	2304      	movs	r3, #4
 8004196:	e04f      	b.n	8004238 <HAL_I2C_Init+0x1dc>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d111      	bne.n	80041c4 <HAL_I2C_Init+0x168>
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	1e58      	subs	r0, r3, #1
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6859      	ldr	r1, [r3, #4]
 80041a8:	460b      	mov	r3, r1
 80041aa:	005b      	lsls	r3, r3, #1
 80041ac:	440b      	add	r3, r1
 80041ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80041b2:	3301      	adds	r3, #1
 80041b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	bf0c      	ite	eq
 80041bc:	2301      	moveq	r3, #1
 80041be:	2300      	movne	r3, #0
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	e012      	b.n	80041ea <HAL_I2C_Init+0x18e>
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	1e58      	subs	r0, r3, #1
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6859      	ldr	r1, [r3, #4]
 80041cc:	460b      	mov	r3, r1
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	440b      	add	r3, r1
 80041d2:	0099      	lsls	r1, r3, #2
 80041d4:	440b      	add	r3, r1
 80041d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80041da:	3301      	adds	r3, #1
 80041dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	bf0c      	ite	eq
 80041e4:	2301      	moveq	r3, #1
 80041e6:	2300      	movne	r3, #0
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d001      	beq.n	80041f2 <HAL_I2C_Init+0x196>
 80041ee:	2301      	movs	r3, #1
 80041f0:	e022      	b.n	8004238 <HAL_I2C_Init+0x1dc>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d10e      	bne.n	8004218 <HAL_I2C_Init+0x1bc>
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	1e58      	subs	r0, r3, #1
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6859      	ldr	r1, [r3, #4]
 8004202:	460b      	mov	r3, r1
 8004204:	005b      	lsls	r3, r3, #1
 8004206:	440b      	add	r3, r1
 8004208:	fbb0 f3f3 	udiv	r3, r0, r3
 800420c:	3301      	adds	r3, #1
 800420e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004212:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004216:	e00f      	b.n	8004238 <HAL_I2C_Init+0x1dc>
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	1e58      	subs	r0, r3, #1
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6859      	ldr	r1, [r3, #4]
 8004220:	460b      	mov	r3, r1
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	440b      	add	r3, r1
 8004226:	0099      	lsls	r1, r3, #2
 8004228:	440b      	add	r3, r1
 800422a:	fbb0 f3f3 	udiv	r3, r0, r3
 800422e:	3301      	adds	r3, #1
 8004230:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004234:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004238:	6879      	ldr	r1, [r7, #4]
 800423a:	6809      	ldr	r1, [r1, #0]
 800423c:	4313      	orrs	r3, r2
 800423e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	69da      	ldr	r2, [r3, #28]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a1b      	ldr	r3, [r3, #32]
 8004252:	431a      	orrs	r2, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	430a      	orrs	r2, r1
 800425a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004266:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	6911      	ldr	r1, [r2, #16]
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	68d2      	ldr	r2, [r2, #12]
 8004272:	4311      	orrs	r1, r2
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	6812      	ldr	r2, [r2, #0]
 8004278:	430b      	orrs	r3, r1
 800427a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	695a      	ldr	r2, [r3, #20]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	699b      	ldr	r3, [r3, #24]
 800428e:	431a      	orrs	r2, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	430a      	orrs	r2, r1
 8004296:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f042 0201 	orr.w	r2, r2, #1
 80042a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2220      	movs	r2, #32
 80042b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3710      	adds	r7, #16
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	000186a0 	.word	0x000186a0
 80042d4:	001e847f 	.word	0x001e847f
 80042d8:	003d08ff 	.word	0x003d08ff
 80042dc:	431bde83 	.word	0x431bde83
 80042e0:	10624dd3 	.word	0x10624dd3

080042e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b086      	sub	sp, #24
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e267      	b.n	80047c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0301 	and.w	r3, r3, #1
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d075      	beq.n	80043ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004302:	4b88      	ldr	r3, [pc, #544]	@ (8004524 <HAL_RCC_OscConfig+0x240>)
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f003 030c 	and.w	r3, r3, #12
 800430a:	2b04      	cmp	r3, #4
 800430c:	d00c      	beq.n	8004328 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800430e:	4b85      	ldr	r3, [pc, #532]	@ (8004524 <HAL_RCC_OscConfig+0x240>)
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004316:	2b08      	cmp	r3, #8
 8004318:	d112      	bne.n	8004340 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800431a:	4b82      	ldr	r3, [pc, #520]	@ (8004524 <HAL_RCC_OscConfig+0x240>)
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004322:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004326:	d10b      	bne.n	8004340 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004328:	4b7e      	ldr	r3, [pc, #504]	@ (8004524 <HAL_RCC_OscConfig+0x240>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d05b      	beq.n	80043ec <HAL_RCC_OscConfig+0x108>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d157      	bne.n	80043ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e242      	b.n	80047c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004348:	d106      	bne.n	8004358 <HAL_RCC_OscConfig+0x74>
 800434a:	4b76      	ldr	r3, [pc, #472]	@ (8004524 <HAL_RCC_OscConfig+0x240>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a75      	ldr	r2, [pc, #468]	@ (8004524 <HAL_RCC_OscConfig+0x240>)
 8004350:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004354:	6013      	str	r3, [r2, #0]
 8004356:	e01d      	b.n	8004394 <HAL_RCC_OscConfig+0xb0>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004360:	d10c      	bne.n	800437c <HAL_RCC_OscConfig+0x98>
 8004362:	4b70      	ldr	r3, [pc, #448]	@ (8004524 <HAL_RCC_OscConfig+0x240>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a6f      	ldr	r2, [pc, #444]	@ (8004524 <HAL_RCC_OscConfig+0x240>)
 8004368:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800436c:	6013      	str	r3, [r2, #0]
 800436e:	4b6d      	ldr	r3, [pc, #436]	@ (8004524 <HAL_RCC_OscConfig+0x240>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a6c      	ldr	r2, [pc, #432]	@ (8004524 <HAL_RCC_OscConfig+0x240>)
 8004374:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004378:	6013      	str	r3, [r2, #0]
 800437a:	e00b      	b.n	8004394 <HAL_RCC_OscConfig+0xb0>
 800437c:	4b69      	ldr	r3, [pc, #420]	@ (8004524 <HAL_RCC_OscConfig+0x240>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a68      	ldr	r2, [pc, #416]	@ (8004524 <HAL_RCC_OscConfig+0x240>)
 8004382:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004386:	6013      	str	r3, [r2, #0]
 8004388:	4b66      	ldr	r3, [pc, #408]	@ (8004524 <HAL_RCC_OscConfig+0x240>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a65      	ldr	r2, [pc, #404]	@ (8004524 <HAL_RCC_OscConfig+0x240>)
 800438e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004392:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d013      	beq.n	80043c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800439c:	f7fc fe1a 	bl	8000fd4 <HAL_GetTick>
 80043a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043a2:	e008      	b.n	80043b6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043a4:	f7fc fe16 	bl	8000fd4 <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	2b64      	cmp	r3, #100	@ 0x64
 80043b0:	d901      	bls.n	80043b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e207      	b.n	80047c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043b6:	4b5b      	ldr	r3, [pc, #364]	@ (8004524 <HAL_RCC_OscConfig+0x240>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d0f0      	beq.n	80043a4 <HAL_RCC_OscConfig+0xc0>
 80043c2:	e014      	b.n	80043ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043c4:	f7fc fe06 	bl	8000fd4 <HAL_GetTick>
 80043c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043ca:	e008      	b.n	80043de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043cc:	f7fc fe02 	bl	8000fd4 <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	2b64      	cmp	r3, #100	@ 0x64
 80043d8:	d901      	bls.n	80043de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e1f3      	b.n	80047c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043de:	4b51      	ldr	r3, [pc, #324]	@ (8004524 <HAL_RCC_OscConfig+0x240>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d1f0      	bne.n	80043cc <HAL_RCC_OscConfig+0xe8>
 80043ea:	e000      	b.n	80043ee <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0302 	and.w	r3, r3, #2
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d063      	beq.n	80044c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80043fa:	4b4a      	ldr	r3, [pc, #296]	@ (8004524 <HAL_RCC_OscConfig+0x240>)
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	f003 030c 	and.w	r3, r3, #12
 8004402:	2b00      	cmp	r3, #0
 8004404:	d00b      	beq.n	800441e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004406:	4b47      	ldr	r3, [pc, #284]	@ (8004524 <HAL_RCC_OscConfig+0x240>)
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800440e:	2b08      	cmp	r3, #8
 8004410:	d11c      	bne.n	800444c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004412:	4b44      	ldr	r3, [pc, #272]	@ (8004524 <HAL_RCC_OscConfig+0x240>)
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d116      	bne.n	800444c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800441e:	4b41      	ldr	r3, [pc, #260]	@ (8004524 <HAL_RCC_OscConfig+0x240>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0302 	and.w	r3, r3, #2
 8004426:	2b00      	cmp	r3, #0
 8004428:	d005      	beq.n	8004436 <HAL_RCC_OscConfig+0x152>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	2b01      	cmp	r3, #1
 8004430:	d001      	beq.n	8004436 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e1c7      	b.n	80047c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004436:	4b3b      	ldr	r3, [pc, #236]	@ (8004524 <HAL_RCC_OscConfig+0x240>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	00db      	lsls	r3, r3, #3
 8004444:	4937      	ldr	r1, [pc, #220]	@ (8004524 <HAL_RCC_OscConfig+0x240>)
 8004446:	4313      	orrs	r3, r2
 8004448:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800444a:	e03a      	b.n	80044c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d020      	beq.n	8004496 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004454:	4b34      	ldr	r3, [pc, #208]	@ (8004528 <HAL_RCC_OscConfig+0x244>)
 8004456:	2201      	movs	r2, #1
 8004458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800445a:	f7fc fdbb 	bl	8000fd4 <HAL_GetTick>
 800445e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004460:	e008      	b.n	8004474 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004462:	f7fc fdb7 	bl	8000fd4 <HAL_GetTick>
 8004466:	4602      	mov	r2, r0
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	2b02      	cmp	r3, #2
 800446e:	d901      	bls.n	8004474 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	e1a8      	b.n	80047c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004474:	4b2b      	ldr	r3, [pc, #172]	@ (8004524 <HAL_RCC_OscConfig+0x240>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0302 	and.w	r3, r3, #2
 800447c:	2b00      	cmp	r3, #0
 800447e:	d0f0      	beq.n	8004462 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004480:	4b28      	ldr	r3, [pc, #160]	@ (8004524 <HAL_RCC_OscConfig+0x240>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	691b      	ldr	r3, [r3, #16]
 800448c:	00db      	lsls	r3, r3, #3
 800448e:	4925      	ldr	r1, [pc, #148]	@ (8004524 <HAL_RCC_OscConfig+0x240>)
 8004490:	4313      	orrs	r3, r2
 8004492:	600b      	str	r3, [r1, #0]
 8004494:	e015      	b.n	80044c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004496:	4b24      	ldr	r3, [pc, #144]	@ (8004528 <HAL_RCC_OscConfig+0x244>)
 8004498:	2200      	movs	r2, #0
 800449a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800449c:	f7fc fd9a 	bl	8000fd4 <HAL_GetTick>
 80044a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044a2:	e008      	b.n	80044b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044a4:	f7fc fd96 	bl	8000fd4 <HAL_GetTick>
 80044a8:	4602      	mov	r2, r0
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d901      	bls.n	80044b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e187      	b.n	80047c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044b6:	4b1b      	ldr	r3, [pc, #108]	@ (8004524 <HAL_RCC_OscConfig+0x240>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0302 	and.w	r3, r3, #2
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d1f0      	bne.n	80044a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0308 	and.w	r3, r3, #8
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d036      	beq.n	800453c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	695b      	ldr	r3, [r3, #20]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d016      	beq.n	8004504 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044d6:	4b15      	ldr	r3, [pc, #84]	@ (800452c <HAL_RCC_OscConfig+0x248>)
 80044d8:	2201      	movs	r2, #1
 80044da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044dc:	f7fc fd7a 	bl	8000fd4 <HAL_GetTick>
 80044e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044e2:	e008      	b.n	80044f6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044e4:	f7fc fd76 	bl	8000fd4 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d901      	bls.n	80044f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e167      	b.n	80047c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044f6:	4b0b      	ldr	r3, [pc, #44]	@ (8004524 <HAL_RCC_OscConfig+0x240>)
 80044f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044fa:	f003 0302 	and.w	r3, r3, #2
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d0f0      	beq.n	80044e4 <HAL_RCC_OscConfig+0x200>
 8004502:	e01b      	b.n	800453c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004504:	4b09      	ldr	r3, [pc, #36]	@ (800452c <HAL_RCC_OscConfig+0x248>)
 8004506:	2200      	movs	r2, #0
 8004508:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800450a:	f7fc fd63 	bl	8000fd4 <HAL_GetTick>
 800450e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004510:	e00e      	b.n	8004530 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004512:	f7fc fd5f 	bl	8000fd4 <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	2b02      	cmp	r3, #2
 800451e:	d907      	bls.n	8004530 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004520:	2303      	movs	r3, #3
 8004522:	e150      	b.n	80047c6 <HAL_RCC_OscConfig+0x4e2>
 8004524:	40023800 	.word	0x40023800
 8004528:	42470000 	.word	0x42470000
 800452c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004530:	4b88      	ldr	r3, [pc, #544]	@ (8004754 <HAL_RCC_OscConfig+0x470>)
 8004532:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004534:	f003 0302 	and.w	r3, r3, #2
 8004538:	2b00      	cmp	r3, #0
 800453a:	d1ea      	bne.n	8004512 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0304 	and.w	r3, r3, #4
 8004544:	2b00      	cmp	r3, #0
 8004546:	f000 8097 	beq.w	8004678 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800454a:	2300      	movs	r3, #0
 800454c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800454e:	4b81      	ldr	r3, [pc, #516]	@ (8004754 <HAL_RCC_OscConfig+0x470>)
 8004550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004552:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d10f      	bne.n	800457a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800455a:	2300      	movs	r3, #0
 800455c:	60bb      	str	r3, [r7, #8]
 800455e:	4b7d      	ldr	r3, [pc, #500]	@ (8004754 <HAL_RCC_OscConfig+0x470>)
 8004560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004562:	4a7c      	ldr	r2, [pc, #496]	@ (8004754 <HAL_RCC_OscConfig+0x470>)
 8004564:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004568:	6413      	str	r3, [r2, #64]	@ 0x40
 800456a:	4b7a      	ldr	r3, [pc, #488]	@ (8004754 <HAL_RCC_OscConfig+0x470>)
 800456c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800456e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004572:	60bb      	str	r3, [r7, #8]
 8004574:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004576:	2301      	movs	r3, #1
 8004578:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800457a:	4b77      	ldr	r3, [pc, #476]	@ (8004758 <HAL_RCC_OscConfig+0x474>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004582:	2b00      	cmp	r3, #0
 8004584:	d118      	bne.n	80045b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004586:	4b74      	ldr	r3, [pc, #464]	@ (8004758 <HAL_RCC_OscConfig+0x474>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a73      	ldr	r2, [pc, #460]	@ (8004758 <HAL_RCC_OscConfig+0x474>)
 800458c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004590:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004592:	f7fc fd1f 	bl	8000fd4 <HAL_GetTick>
 8004596:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004598:	e008      	b.n	80045ac <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800459a:	f7fc fd1b 	bl	8000fd4 <HAL_GetTick>
 800459e:	4602      	mov	r2, r0
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d901      	bls.n	80045ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e10c      	b.n	80047c6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045ac:	4b6a      	ldr	r3, [pc, #424]	@ (8004758 <HAL_RCC_OscConfig+0x474>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d0f0      	beq.n	800459a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d106      	bne.n	80045ce <HAL_RCC_OscConfig+0x2ea>
 80045c0:	4b64      	ldr	r3, [pc, #400]	@ (8004754 <HAL_RCC_OscConfig+0x470>)
 80045c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045c4:	4a63      	ldr	r2, [pc, #396]	@ (8004754 <HAL_RCC_OscConfig+0x470>)
 80045c6:	f043 0301 	orr.w	r3, r3, #1
 80045ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80045cc:	e01c      	b.n	8004608 <HAL_RCC_OscConfig+0x324>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	2b05      	cmp	r3, #5
 80045d4:	d10c      	bne.n	80045f0 <HAL_RCC_OscConfig+0x30c>
 80045d6:	4b5f      	ldr	r3, [pc, #380]	@ (8004754 <HAL_RCC_OscConfig+0x470>)
 80045d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045da:	4a5e      	ldr	r2, [pc, #376]	@ (8004754 <HAL_RCC_OscConfig+0x470>)
 80045dc:	f043 0304 	orr.w	r3, r3, #4
 80045e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80045e2:	4b5c      	ldr	r3, [pc, #368]	@ (8004754 <HAL_RCC_OscConfig+0x470>)
 80045e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045e6:	4a5b      	ldr	r2, [pc, #364]	@ (8004754 <HAL_RCC_OscConfig+0x470>)
 80045e8:	f043 0301 	orr.w	r3, r3, #1
 80045ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80045ee:	e00b      	b.n	8004608 <HAL_RCC_OscConfig+0x324>
 80045f0:	4b58      	ldr	r3, [pc, #352]	@ (8004754 <HAL_RCC_OscConfig+0x470>)
 80045f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045f4:	4a57      	ldr	r2, [pc, #348]	@ (8004754 <HAL_RCC_OscConfig+0x470>)
 80045f6:	f023 0301 	bic.w	r3, r3, #1
 80045fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80045fc:	4b55      	ldr	r3, [pc, #340]	@ (8004754 <HAL_RCC_OscConfig+0x470>)
 80045fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004600:	4a54      	ldr	r2, [pc, #336]	@ (8004754 <HAL_RCC_OscConfig+0x470>)
 8004602:	f023 0304 	bic.w	r3, r3, #4
 8004606:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d015      	beq.n	800463c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004610:	f7fc fce0 	bl	8000fd4 <HAL_GetTick>
 8004614:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004616:	e00a      	b.n	800462e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004618:	f7fc fcdc 	bl	8000fd4 <HAL_GetTick>
 800461c:	4602      	mov	r2, r0
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004626:	4293      	cmp	r3, r2
 8004628:	d901      	bls.n	800462e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e0cb      	b.n	80047c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800462e:	4b49      	ldr	r3, [pc, #292]	@ (8004754 <HAL_RCC_OscConfig+0x470>)
 8004630:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004632:	f003 0302 	and.w	r3, r3, #2
 8004636:	2b00      	cmp	r3, #0
 8004638:	d0ee      	beq.n	8004618 <HAL_RCC_OscConfig+0x334>
 800463a:	e014      	b.n	8004666 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800463c:	f7fc fcca 	bl	8000fd4 <HAL_GetTick>
 8004640:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004642:	e00a      	b.n	800465a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004644:	f7fc fcc6 	bl	8000fd4 <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004652:	4293      	cmp	r3, r2
 8004654:	d901      	bls.n	800465a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	e0b5      	b.n	80047c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800465a:	4b3e      	ldr	r3, [pc, #248]	@ (8004754 <HAL_RCC_OscConfig+0x470>)
 800465c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800465e:	f003 0302 	and.w	r3, r3, #2
 8004662:	2b00      	cmp	r3, #0
 8004664:	d1ee      	bne.n	8004644 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004666:	7dfb      	ldrb	r3, [r7, #23]
 8004668:	2b01      	cmp	r3, #1
 800466a:	d105      	bne.n	8004678 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800466c:	4b39      	ldr	r3, [pc, #228]	@ (8004754 <HAL_RCC_OscConfig+0x470>)
 800466e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004670:	4a38      	ldr	r2, [pc, #224]	@ (8004754 <HAL_RCC_OscConfig+0x470>)
 8004672:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004676:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	699b      	ldr	r3, [r3, #24]
 800467c:	2b00      	cmp	r3, #0
 800467e:	f000 80a1 	beq.w	80047c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004682:	4b34      	ldr	r3, [pc, #208]	@ (8004754 <HAL_RCC_OscConfig+0x470>)
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	f003 030c 	and.w	r3, r3, #12
 800468a:	2b08      	cmp	r3, #8
 800468c:	d05c      	beq.n	8004748 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	699b      	ldr	r3, [r3, #24]
 8004692:	2b02      	cmp	r3, #2
 8004694:	d141      	bne.n	800471a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004696:	4b31      	ldr	r3, [pc, #196]	@ (800475c <HAL_RCC_OscConfig+0x478>)
 8004698:	2200      	movs	r2, #0
 800469a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800469c:	f7fc fc9a 	bl	8000fd4 <HAL_GetTick>
 80046a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046a2:	e008      	b.n	80046b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046a4:	f7fc fc96 	bl	8000fd4 <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d901      	bls.n	80046b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e087      	b.n	80047c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046b6:	4b27      	ldr	r3, [pc, #156]	@ (8004754 <HAL_RCC_OscConfig+0x470>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d1f0      	bne.n	80046a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	69da      	ldr	r2, [r3, #28]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a1b      	ldr	r3, [r3, #32]
 80046ca:	431a      	orrs	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d0:	019b      	lsls	r3, r3, #6
 80046d2:	431a      	orrs	r2, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046d8:	085b      	lsrs	r3, r3, #1
 80046da:	3b01      	subs	r3, #1
 80046dc:	041b      	lsls	r3, r3, #16
 80046de:	431a      	orrs	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046e4:	061b      	lsls	r3, r3, #24
 80046e6:	491b      	ldr	r1, [pc, #108]	@ (8004754 <HAL_RCC_OscConfig+0x470>)
 80046e8:	4313      	orrs	r3, r2
 80046ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046ec:	4b1b      	ldr	r3, [pc, #108]	@ (800475c <HAL_RCC_OscConfig+0x478>)
 80046ee:	2201      	movs	r2, #1
 80046f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046f2:	f7fc fc6f 	bl	8000fd4 <HAL_GetTick>
 80046f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046f8:	e008      	b.n	800470c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046fa:	f7fc fc6b 	bl	8000fd4 <HAL_GetTick>
 80046fe:	4602      	mov	r2, r0
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	1ad3      	subs	r3, r2, r3
 8004704:	2b02      	cmp	r3, #2
 8004706:	d901      	bls.n	800470c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004708:	2303      	movs	r3, #3
 800470a:	e05c      	b.n	80047c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800470c:	4b11      	ldr	r3, [pc, #68]	@ (8004754 <HAL_RCC_OscConfig+0x470>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d0f0      	beq.n	80046fa <HAL_RCC_OscConfig+0x416>
 8004718:	e054      	b.n	80047c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800471a:	4b10      	ldr	r3, [pc, #64]	@ (800475c <HAL_RCC_OscConfig+0x478>)
 800471c:	2200      	movs	r2, #0
 800471e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004720:	f7fc fc58 	bl	8000fd4 <HAL_GetTick>
 8004724:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004726:	e008      	b.n	800473a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004728:	f7fc fc54 	bl	8000fd4 <HAL_GetTick>
 800472c:	4602      	mov	r2, r0
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	2b02      	cmp	r3, #2
 8004734:	d901      	bls.n	800473a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e045      	b.n	80047c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800473a:	4b06      	ldr	r3, [pc, #24]	@ (8004754 <HAL_RCC_OscConfig+0x470>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d1f0      	bne.n	8004728 <HAL_RCC_OscConfig+0x444>
 8004746:	e03d      	b.n	80047c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	699b      	ldr	r3, [r3, #24]
 800474c:	2b01      	cmp	r3, #1
 800474e:	d107      	bne.n	8004760 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e038      	b.n	80047c6 <HAL_RCC_OscConfig+0x4e2>
 8004754:	40023800 	.word	0x40023800
 8004758:	40007000 	.word	0x40007000
 800475c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004760:	4b1b      	ldr	r3, [pc, #108]	@ (80047d0 <HAL_RCC_OscConfig+0x4ec>)
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	699b      	ldr	r3, [r3, #24]
 800476a:	2b01      	cmp	r3, #1
 800476c:	d028      	beq.n	80047c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004778:	429a      	cmp	r2, r3
 800477a:	d121      	bne.n	80047c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004786:	429a      	cmp	r2, r3
 8004788:	d11a      	bne.n	80047c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004790:	4013      	ands	r3, r2
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004796:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004798:	4293      	cmp	r3, r2
 800479a:	d111      	bne.n	80047c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047a6:	085b      	lsrs	r3, r3, #1
 80047a8:	3b01      	subs	r3, #1
 80047aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d107      	bne.n	80047c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047bc:	429a      	cmp	r2, r3
 80047be:	d001      	beq.n	80047c4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e000      	b.n	80047c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3718      	adds	r7, #24
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	40023800 	.word	0x40023800

080047d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d101      	bne.n	80047e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e0cc      	b.n	8004982 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047e8:	4b68      	ldr	r3, [pc, #416]	@ (800498c <HAL_RCC_ClockConfig+0x1b8>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0307 	and.w	r3, r3, #7
 80047f0:	683a      	ldr	r2, [r7, #0]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d90c      	bls.n	8004810 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047f6:	4b65      	ldr	r3, [pc, #404]	@ (800498c <HAL_RCC_ClockConfig+0x1b8>)
 80047f8:	683a      	ldr	r2, [r7, #0]
 80047fa:	b2d2      	uxtb	r2, r2
 80047fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047fe:	4b63      	ldr	r3, [pc, #396]	@ (800498c <HAL_RCC_ClockConfig+0x1b8>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0307 	and.w	r3, r3, #7
 8004806:	683a      	ldr	r2, [r7, #0]
 8004808:	429a      	cmp	r2, r3
 800480a:	d001      	beq.n	8004810 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	e0b8      	b.n	8004982 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0302 	and.w	r3, r3, #2
 8004818:	2b00      	cmp	r3, #0
 800481a:	d020      	beq.n	800485e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0304 	and.w	r3, r3, #4
 8004824:	2b00      	cmp	r3, #0
 8004826:	d005      	beq.n	8004834 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004828:	4b59      	ldr	r3, [pc, #356]	@ (8004990 <HAL_RCC_ClockConfig+0x1bc>)
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	4a58      	ldr	r2, [pc, #352]	@ (8004990 <HAL_RCC_ClockConfig+0x1bc>)
 800482e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004832:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0308 	and.w	r3, r3, #8
 800483c:	2b00      	cmp	r3, #0
 800483e:	d005      	beq.n	800484c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004840:	4b53      	ldr	r3, [pc, #332]	@ (8004990 <HAL_RCC_ClockConfig+0x1bc>)
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	4a52      	ldr	r2, [pc, #328]	@ (8004990 <HAL_RCC_ClockConfig+0x1bc>)
 8004846:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800484a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800484c:	4b50      	ldr	r3, [pc, #320]	@ (8004990 <HAL_RCC_ClockConfig+0x1bc>)
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	494d      	ldr	r1, [pc, #308]	@ (8004990 <HAL_RCC_ClockConfig+0x1bc>)
 800485a:	4313      	orrs	r3, r2
 800485c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0301 	and.w	r3, r3, #1
 8004866:	2b00      	cmp	r3, #0
 8004868:	d044      	beq.n	80048f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	2b01      	cmp	r3, #1
 8004870:	d107      	bne.n	8004882 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004872:	4b47      	ldr	r3, [pc, #284]	@ (8004990 <HAL_RCC_ClockConfig+0x1bc>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d119      	bne.n	80048b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e07f      	b.n	8004982 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	2b02      	cmp	r3, #2
 8004888:	d003      	beq.n	8004892 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800488e:	2b03      	cmp	r3, #3
 8004890:	d107      	bne.n	80048a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004892:	4b3f      	ldr	r3, [pc, #252]	@ (8004990 <HAL_RCC_ClockConfig+0x1bc>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d109      	bne.n	80048b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e06f      	b.n	8004982 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048a2:	4b3b      	ldr	r3, [pc, #236]	@ (8004990 <HAL_RCC_ClockConfig+0x1bc>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0302 	and.w	r3, r3, #2
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d101      	bne.n	80048b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e067      	b.n	8004982 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048b2:	4b37      	ldr	r3, [pc, #220]	@ (8004990 <HAL_RCC_ClockConfig+0x1bc>)
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f023 0203 	bic.w	r2, r3, #3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	4934      	ldr	r1, [pc, #208]	@ (8004990 <HAL_RCC_ClockConfig+0x1bc>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048c4:	f7fc fb86 	bl	8000fd4 <HAL_GetTick>
 80048c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048ca:	e00a      	b.n	80048e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048cc:	f7fc fb82 	bl	8000fd4 <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048da:	4293      	cmp	r3, r2
 80048dc:	d901      	bls.n	80048e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	e04f      	b.n	8004982 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048e2:	4b2b      	ldr	r3, [pc, #172]	@ (8004990 <HAL_RCC_ClockConfig+0x1bc>)
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	f003 020c 	and.w	r2, r3, #12
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d1eb      	bne.n	80048cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80048f4:	4b25      	ldr	r3, [pc, #148]	@ (800498c <HAL_RCC_ClockConfig+0x1b8>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 0307 	and.w	r3, r3, #7
 80048fc:	683a      	ldr	r2, [r7, #0]
 80048fe:	429a      	cmp	r2, r3
 8004900:	d20c      	bcs.n	800491c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004902:	4b22      	ldr	r3, [pc, #136]	@ (800498c <HAL_RCC_ClockConfig+0x1b8>)
 8004904:	683a      	ldr	r2, [r7, #0]
 8004906:	b2d2      	uxtb	r2, r2
 8004908:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800490a:	4b20      	ldr	r3, [pc, #128]	@ (800498c <HAL_RCC_ClockConfig+0x1b8>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0307 	and.w	r3, r3, #7
 8004912:	683a      	ldr	r2, [r7, #0]
 8004914:	429a      	cmp	r2, r3
 8004916:	d001      	beq.n	800491c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e032      	b.n	8004982 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0304 	and.w	r3, r3, #4
 8004924:	2b00      	cmp	r3, #0
 8004926:	d008      	beq.n	800493a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004928:	4b19      	ldr	r3, [pc, #100]	@ (8004990 <HAL_RCC_ClockConfig+0x1bc>)
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	4916      	ldr	r1, [pc, #88]	@ (8004990 <HAL_RCC_ClockConfig+0x1bc>)
 8004936:	4313      	orrs	r3, r2
 8004938:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 0308 	and.w	r3, r3, #8
 8004942:	2b00      	cmp	r3, #0
 8004944:	d009      	beq.n	800495a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004946:	4b12      	ldr	r3, [pc, #72]	@ (8004990 <HAL_RCC_ClockConfig+0x1bc>)
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	00db      	lsls	r3, r3, #3
 8004954:	490e      	ldr	r1, [pc, #56]	@ (8004990 <HAL_RCC_ClockConfig+0x1bc>)
 8004956:	4313      	orrs	r3, r2
 8004958:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800495a:	f000 f821 	bl	80049a0 <HAL_RCC_GetSysClockFreq>
 800495e:	4602      	mov	r2, r0
 8004960:	4b0b      	ldr	r3, [pc, #44]	@ (8004990 <HAL_RCC_ClockConfig+0x1bc>)
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	091b      	lsrs	r3, r3, #4
 8004966:	f003 030f 	and.w	r3, r3, #15
 800496a:	490a      	ldr	r1, [pc, #40]	@ (8004994 <HAL_RCC_ClockConfig+0x1c0>)
 800496c:	5ccb      	ldrb	r3, [r1, r3]
 800496e:	fa22 f303 	lsr.w	r3, r2, r3
 8004972:	4a09      	ldr	r2, [pc, #36]	@ (8004998 <HAL_RCC_ClockConfig+0x1c4>)
 8004974:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004976:	4b09      	ldr	r3, [pc, #36]	@ (800499c <HAL_RCC_ClockConfig+0x1c8>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4618      	mov	r0, r3
 800497c:	f7fc fae6 	bl	8000f4c <HAL_InitTick>

  return HAL_OK;
 8004980:	2300      	movs	r3, #0
}
 8004982:	4618      	mov	r0, r3
 8004984:	3710      	adds	r7, #16
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	40023c00 	.word	0x40023c00
 8004990:	40023800 	.word	0x40023800
 8004994:	080095b4 	.word	0x080095b4
 8004998:	20000000 	.word	0x20000000
 800499c:	20000004 	.word	0x20000004

080049a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049a4:	b094      	sub	sp, #80	@ 0x50
 80049a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80049a8:	2300      	movs	r3, #0
 80049aa:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80049ac:	2300      	movs	r3, #0
 80049ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80049b0:	2300      	movs	r3, #0
 80049b2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80049b4:	2300      	movs	r3, #0
 80049b6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049b8:	4b79      	ldr	r3, [pc, #484]	@ (8004ba0 <HAL_RCC_GetSysClockFreq+0x200>)
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	f003 030c 	and.w	r3, r3, #12
 80049c0:	2b08      	cmp	r3, #8
 80049c2:	d00d      	beq.n	80049e0 <HAL_RCC_GetSysClockFreq+0x40>
 80049c4:	2b08      	cmp	r3, #8
 80049c6:	f200 80e1 	bhi.w	8004b8c <HAL_RCC_GetSysClockFreq+0x1ec>
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d002      	beq.n	80049d4 <HAL_RCC_GetSysClockFreq+0x34>
 80049ce:	2b04      	cmp	r3, #4
 80049d0:	d003      	beq.n	80049da <HAL_RCC_GetSysClockFreq+0x3a>
 80049d2:	e0db      	b.n	8004b8c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80049d4:	4b73      	ldr	r3, [pc, #460]	@ (8004ba4 <HAL_RCC_GetSysClockFreq+0x204>)
 80049d6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80049d8:	e0db      	b.n	8004b92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80049da:	4b73      	ldr	r3, [pc, #460]	@ (8004ba8 <HAL_RCC_GetSysClockFreq+0x208>)
 80049dc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80049de:	e0d8      	b.n	8004b92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049e0:	4b6f      	ldr	r3, [pc, #444]	@ (8004ba0 <HAL_RCC_GetSysClockFreq+0x200>)
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80049e8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049ea:	4b6d      	ldr	r3, [pc, #436]	@ (8004ba0 <HAL_RCC_GetSysClockFreq+0x200>)
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d063      	beq.n	8004abe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049f6:	4b6a      	ldr	r3, [pc, #424]	@ (8004ba0 <HAL_RCC_GetSysClockFreq+0x200>)
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	099b      	lsrs	r3, r3, #6
 80049fc:	2200      	movs	r2, #0
 80049fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a00:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004a02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a08:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a0e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004a12:	4622      	mov	r2, r4
 8004a14:	462b      	mov	r3, r5
 8004a16:	f04f 0000 	mov.w	r0, #0
 8004a1a:	f04f 0100 	mov.w	r1, #0
 8004a1e:	0159      	lsls	r1, r3, #5
 8004a20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a24:	0150      	lsls	r0, r2, #5
 8004a26:	4602      	mov	r2, r0
 8004a28:	460b      	mov	r3, r1
 8004a2a:	4621      	mov	r1, r4
 8004a2c:	1a51      	subs	r1, r2, r1
 8004a2e:	6139      	str	r1, [r7, #16]
 8004a30:	4629      	mov	r1, r5
 8004a32:	eb63 0301 	sbc.w	r3, r3, r1
 8004a36:	617b      	str	r3, [r7, #20]
 8004a38:	f04f 0200 	mov.w	r2, #0
 8004a3c:	f04f 0300 	mov.w	r3, #0
 8004a40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a44:	4659      	mov	r1, fp
 8004a46:	018b      	lsls	r3, r1, #6
 8004a48:	4651      	mov	r1, sl
 8004a4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a4e:	4651      	mov	r1, sl
 8004a50:	018a      	lsls	r2, r1, #6
 8004a52:	4651      	mov	r1, sl
 8004a54:	ebb2 0801 	subs.w	r8, r2, r1
 8004a58:	4659      	mov	r1, fp
 8004a5a:	eb63 0901 	sbc.w	r9, r3, r1
 8004a5e:	f04f 0200 	mov.w	r2, #0
 8004a62:	f04f 0300 	mov.w	r3, #0
 8004a66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a72:	4690      	mov	r8, r2
 8004a74:	4699      	mov	r9, r3
 8004a76:	4623      	mov	r3, r4
 8004a78:	eb18 0303 	adds.w	r3, r8, r3
 8004a7c:	60bb      	str	r3, [r7, #8]
 8004a7e:	462b      	mov	r3, r5
 8004a80:	eb49 0303 	adc.w	r3, r9, r3
 8004a84:	60fb      	str	r3, [r7, #12]
 8004a86:	f04f 0200 	mov.w	r2, #0
 8004a8a:	f04f 0300 	mov.w	r3, #0
 8004a8e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004a92:	4629      	mov	r1, r5
 8004a94:	024b      	lsls	r3, r1, #9
 8004a96:	4621      	mov	r1, r4
 8004a98:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a9c:	4621      	mov	r1, r4
 8004a9e:	024a      	lsls	r2, r1, #9
 8004aa0:	4610      	mov	r0, r2
 8004aa2:	4619      	mov	r1, r3
 8004aa4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004aaa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004aac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004ab0:	f7fb fb8a 	bl	80001c8 <__aeabi_uldivmod>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	460b      	mov	r3, r1
 8004ab8:	4613      	mov	r3, r2
 8004aba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004abc:	e058      	b.n	8004b70 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004abe:	4b38      	ldr	r3, [pc, #224]	@ (8004ba0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	099b      	lsrs	r3, r3, #6
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	4611      	mov	r1, r2
 8004aca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004ace:	623b      	str	r3, [r7, #32]
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ad4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004ad8:	4642      	mov	r2, r8
 8004ada:	464b      	mov	r3, r9
 8004adc:	f04f 0000 	mov.w	r0, #0
 8004ae0:	f04f 0100 	mov.w	r1, #0
 8004ae4:	0159      	lsls	r1, r3, #5
 8004ae6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004aea:	0150      	lsls	r0, r2, #5
 8004aec:	4602      	mov	r2, r0
 8004aee:	460b      	mov	r3, r1
 8004af0:	4641      	mov	r1, r8
 8004af2:	ebb2 0a01 	subs.w	sl, r2, r1
 8004af6:	4649      	mov	r1, r9
 8004af8:	eb63 0b01 	sbc.w	fp, r3, r1
 8004afc:	f04f 0200 	mov.w	r2, #0
 8004b00:	f04f 0300 	mov.w	r3, #0
 8004b04:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004b08:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004b0c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004b10:	ebb2 040a 	subs.w	r4, r2, sl
 8004b14:	eb63 050b 	sbc.w	r5, r3, fp
 8004b18:	f04f 0200 	mov.w	r2, #0
 8004b1c:	f04f 0300 	mov.w	r3, #0
 8004b20:	00eb      	lsls	r3, r5, #3
 8004b22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b26:	00e2      	lsls	r2, r4, #3
 8004b28:	4614      	mov	r4, r2
 8004b2a:	461d      	mov	r5, r3
 8004b2c:	4643      	mov	r3, r8
 8004b2e:	18e3      	adds	r3, r4, r3
 8004b30:	603b      	str	r3, [r7, #0]
 8004b32:	464b      	mov	r3, r9
 8004b34:	eb45 0303 	adc.w	r3, r5, r3
 8004b38:	607b      	str	r3, [r7, #4]
 8004b3a:	f04f 0200 	mov.w	r2, #0
 8004b3e:	f04f 0300 	mov.w	r3, #0
 8004b42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b46:	4629      	mov	r1, r5
 8004b48:	028b      	lsls	r3, r1, #10
 8004b4a:	4621      	mov	r1, r4
 8004b4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b50:	4621      	mov	r1, r4
 8004b52:	028a      	lsls	r2, r1, #10
 8004b54:	4610      	mov	r0, r2
 8004b56:	4619      	mov	r1, r3
 8004b58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	61bb      	str	r3, [r7, #24]
 8004b5e:	61fa      	str	r2, [r7, #28]
 8004b60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b64:	f7fb fb30 	bl	80001c8 <__aeabi_uldivmod>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	460b      	mov	r3, r1
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004b70:	4b0b      	ldr	r3, [pc, #44]	@ (8004ba0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	0c1b      	lsrs	r3, r3, #16
 8004b76:	f003 0303 	and.w	r3, r3, #3
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	005b      	lsls	r3, r3, #1
 8004b7e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004b80:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004b82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b88:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b8a:	e002      	b.n	8004b92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b8c:	4b05      	ldr	r3, [pc, #20]	@ (8004ba4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b8e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3750      	adds	r7, #80	@ 0x50
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b9e:	bf00      	nop
 8004ba0:	40023800 	.word	0x40023800
 8004ba4:	00f42400 	.word	0x00f42400
 8004ba8:	007a1200 	.word	0x007a1200

08004bac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bac:	b480      	push	{r7}
 8004bae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bb0:	4b03      	ldr	r3, [pc, #12]	@ (8004bc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr
 8004bbe:	bf00      	nop
 8004bc0:	20000000 	.word	0x20000000

08004bc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004bc8:	f7ff fff0 	bl	8004bac <HAL_RCC_GetHCLKFreq>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	4b05      	ldr	r3, [pc, #20]	@ (8004be4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	0a9b      	lsrs	r3, r3, #10
 8004bd4:	f003 0307 	and.w	r3, r3, #7
 8004bd8:	4903      	ldr	r1, [pc, #12]	@ (8004be8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bda:	5ccb      	ldrb	r3, [r1, r3]
 8004bdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	40023800 	.word	0x40023800
 8004be8:	080095c4 	.word	0x080095c4

08004bec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d101      	bne.n	8004bfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e041      	b.n	8004c82 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d106      	bne.n	8004c18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f7fc f874 	bl	8000d00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2202      	movs	r2, #2
 8004c1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	3304      	adds	r3, #4
 8004c28:	4619      	mov	r1, r3
 8004c2a:	4610      	mov	r0, r2
 8004c2c:	f000 fad8 	bl	80051e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3708      	adds	r7, #8
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}

08004c8a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c8a:	b580      	push	{r7, lr}
 8004c8c:	b082      	sub	sp, #8
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d101      	bne.n	8004c9c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e041      	b.n	8004d20 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d106      	bne.n	8004cb6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f000 f839 	bl	8004d28 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2202      	movs	r2, #2
 8004cba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	3304      	adds	r3, #4
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	4610      	mov	r0, r2
 8004cca:	f000 fa89 	bl	80051e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2201      	movs	r2, #1
 8004cda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2201      	movs	r2, #1
 8004cea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2201      	movs	r2, #1
 8004d02:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2201      	movs	r2, #1
 8004d0a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2201      	movs	r2, #1
 8004d12:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2201      	movs	r2, #1
 8004d1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d1e:	2300      	movs	r3, #0
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3708      	adds	r7, #8
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004d30:	bf00      	nop
 8004d32:	370c      	adds	r7, #12
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d109      	bne.n	8004d60 <HAL_TIM_PWM_Start+0x24>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	bf14      	ite	ne
 8004d58:	2301      	movne	r3, #1
 8004d5a:	2300      	moveq	r3, #0
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	e022      	b.n	8004da6 <HAL_TIM_PWM_Start+0x6a>
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	2b04      	cmp	r3, #4
 8004d64:	d109      	bne.n	8004d7a <HAL_TIM_PWM_Start+0x3e>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	bf14      	ite	ne
 8004d72:	2301      	movne	r3, #1
 8004d74:	2300      	moveq	r3, #0
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	e015      	b.n	8004da6 <HAL_TIM_PWM_Start+0x6a>
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	2b08      	cmp	r3, #8
 8004d7e:	d109      	bne.n	8004d94 <HAL_TIM_PWM_Start+0x58>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	bf14      	ite	ne
 8004d8c:	2301      	movne	r3, #1
 8004d8e:	2300      	moveq	r3, #0
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	e008      	b.n	8004da6 <HAL_TIM_PWM_Start+0x6a>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	bf14      	ite	ne
 8004da0:	2301      	movne	r3, #1
 8004da2:	2300      	moveq	r3, #0
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d001      	beq.n	8004dae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e07c      	b.n	8004ea8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d104      	bne.n	8004dbe <HAL_TIM_PWM_Start+0x82>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2202      	movs	r2, #2
 8004db8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004dbc:	e013      	b.n	8004de6 <HAL_TIM_PWM_Start+0xaa>
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	2b04      	cmp	r3, #4
 8004dc2:	d104      	bne.n	8004dce <HAL_TIM_PWM_Start+0x92>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2202      	movs	r2, #2
 8004dc8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004dcc:	e00b      	b.n	8004de6 <HAL_TIM_PWM_Start+0xaa>
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	2b08      	cmp	r3, #8
 8004dd2:	d104      	bne.n	8004dde <HAL_TIM_PWM_Start+0xa2>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2202      	movs	r2, #2
 8004dd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ddc:	e003      	b.n	8004de6 <HAL_TIM_PWM_Start+0xaa>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2202      	movs	r2, #2
 8004de2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	2201      	movs	r2, #1
 8004dec:	6839      	ldr	r1, [r7, #0]
 8004dee:	4618      	mov	r0, r3
 8004df0:	f000 fcec 	bl	80057cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a2d      	ldr	r2, [pc, #180]	@ (8004eb0 <HAL_TIM_PWM_Start+0x174>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d004      	beq.n	8004e08 <HAL_TIM_PWM_Start+0xcc>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a2c      	ldr	r2, [pc, #176]	@ (8004eb4 <HAL_TIM_PWM_Start+0x178>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d101      	bne.n	8004e0c <HAL_TIM_PWM_Start+0xd0>
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e000      	b.n	8004e0e <HAL_TIM_PWM_Start+0xd2>
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d007      	beq.n	8004e22 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004e20:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a22      	ldr	r2, [pc, #136]	@ (8004eb0 <HAL_TIM_PWM_Start+0x174>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d022      	beq.n	8004e72 <HAL_TIM_PWM_Start+0x136>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e34:	d01d      	beq.n	8004e72 <HAL_TIM_PWM_Start+0x136>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a1f      	ldr	r2, [pc, #124]	@ (8004eb8 <HAL_TIM_PWM_Start+0x17c>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d018      	beq.n	8004e72 <HAL_TIM_PWM_Start+0x136>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a1d      	ldr	r2, [pc, #116]	@ (8004ebc <HAL_TIM_PWM_Start+0x180>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d013      	beq.n	8004e72 <HAL_TIM_PWM_Start+0x136>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a1c      	ldr	r2, [pc, #112]	@ (8004ec0 <HAL_TIM_PWM_Start+0x184>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d00e      	beq.n	8004e72 <HAL_TIM_PWM_Start+0x136>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a16      	ldr	r2, [pc, #88]	@ (8004eb4 <HAL_TIM_PWM_Start+0x178>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d009      	beq.n	8004e72 <HAL_TIM_PWM_Start+0x136>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a18      	ldr	r2, [pc, #96]	@ (8004ec4 <HAL_TIM_PWM_Start+0x188>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d004      	beq.n	8004e72 <HAL_TIM_PWM_Start+0x136>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a16      	ldr	r2, [pc, #88]	@ (8004ec8 <HAL_TIM_PWM_Start+0x18c>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d111      	bne.n	8004e96 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	f003 0307 	and.w	r3, r3, #7
 8004e7c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2b06      	cmp	r3, #6
 8004e82:	d010      	beq.n	8004ea6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f042 0201 	orr.w	r2, r2, #1
 8004e92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e94:	e007      	b.n	8004ea6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f042 0201 	orr.w	r2, r2, #1
 8004ea4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ea6:	2300      	movs	r3, #0
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3710      	adds	r7, #16
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	40010000 	.word	0x40010000
 8004eb4:	40010400 	.word	0x40010400
 8004eb8:	40000400 	.word	0x40000400
 8004ebc:	40000800 	.word	0x40000800
 8004ec0:	40000c00 	.word	0x40000c00
 8004ec4:	40014000 	.word	0x40014000
 8004ec8:	40001800 	.word	0x40001800

08004ecc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b086      	sub	sp, #24
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d101      	bne.n	8004eea <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004ee6:	2302      	movs	r3, #2
 8004ee8:	e0ae      	b.n	8005048 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2201      	movs	r2, #1
 8004eee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2b0c      	cmp	r3, #12
 8004ef6:	f200 809f 	bhi.w	8005038 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004efa:	a201      	add	r2, pc, #4	@ (adr r2, 8004f00 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f00:	08004f35 	.word	0x08004f35
 8004f04:	08005039 	.word	0x08005039
 8004f08:	08005039 	.word	0x08005039
 8004f0c:	08005039 	.word	0x08005039
 8004f10:	08004f75 	.word	0x08004f75
 8004f14:	08005039 	.word	0x08005039
 8004f18:	08005039 	.word	0x08005039
 8004f1c:	08005039 	.word	0x08005039
 8004f20:	08004fb7 	.word	0x08004fb7
 8004f24:	08005039 	.word	0x08005039
 8004f28:	08005039 	.word	0x08005039
 8004f2c:	08005039 	.word	0x08005039
 8004f30:	08004ff7 	.word	0x08004ff7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	68b9      	ldr	r1, [r7, #8]
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f000 f9fc 	bl	8005338 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	699a      	ldr	r2, [r3, #24]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f042 0208 	orr.w	r2, r2, #8
 8004f4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	699a      	ldr	r2, [r3, #24]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f022 0204 	bic.w	r2, r2, #4
 8004f5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	6999      	ldr	r1, [r3, #24]
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	691a      	ldr	r2, [r3, #16]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	430a      	orrs	r2, r1
 8004f70:	619a      	str	r2, [r3, #24]
      break;
 8004f72:	e064      	b.n	800503e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	68b9      	ldr	r1, [r7, #8]
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f000 fa4c 	bl	8005418 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	699a      	ldr	r2, [r3, #24]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	699a      	ldr	r2, [r3, #24]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	6999      	ldr	r1, [r3, #24]
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	691b      	ldr	r3, [r3, #16]
 8004faa:	021a      	lsls	r2, r3, #8
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	430a      	orrs	r2, r1
 8004fb2:	619a      	str	r2, [r3, #24]
      break;
 8004fb4:	e043      	b.n	800503e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68b9      	ldr	r1, [r7, #8]
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f000 faa1 	bl	8005504 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	69da      	ldr	r2, [r3, #28]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f042 0208 	orr.w	r2, r2, #8
 8004fd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	69da      	ldr	r2, [r3, #28]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f022 0204 	bic.w	r2, r2, #4
 8004fe0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	69d9      	ldr	r1, [r3, #28]
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	691a      	ldr	r2, [r3, #16]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	430a      	orrs	r2, r1
 8004ff2:	61da      	str	r2, [r3, #28]
      break;
 8004ff4:	e023      	b.n	800503e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	68b9      	ldr	r1, [r7, #8]
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f000 faf5 	bl	80055ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	69da      	ldr	r2, [r3, #28]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005010:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	69da      	ldr	r2, [r3, #28]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005020:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	69d9      	ldr	r1, [r3, #28]
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	021a      	lsls	r2, r3, #8
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	430a      	orrs	r2, r1
 8005034:	61da      	str	r2, [r3, #28]
      break;
 8005036:	e002      	b.n	800503e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	75fb      	strb	r3, [r7, #23]
      break;
 800503c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2200      	movs	r2, #0
 8005042:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005046:	7dfb      	ldrb	r3, [r7, #23]
}
 8005048:	4618      	mov	r0, r3
 800504a:	3718      	adds	r7, #24
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}

08005050 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b084      	sub	sp, #16
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800505a:	2300      	movs	r3, #0
 800505c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005064:	2b01      	cmp	r3, #1
 8005066:	d101      	bne.n	800506c <HAL_TIM_ConfigClockSource+0x1c>
 8005068:	2302      	movs	r3, #2
 800506a:	e0b4      	b.n	80051d6 <HAL_TIM_ConfigClockSource+0x186>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2202      	movs	r2, #2
 8005078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800508a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005092:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	68ba      	ldr	r2, [r7, #8]
 800509a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050a4:	d03e      	beq.n	8005124 <HAL_TIM_ConfigClockSource+0xd4>
 80050a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050aa:	f200 8087 	bhi.w	80051bc <HAL_TIM_ConfigClockSource+0x16c>
 80050ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050b2:	f000 8086 	beq.w	80051c2 <HAL_TIM_ConfigClockSource+0x172>
 80050b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050ba:	d87f      	bhi.n	80051bc <HAL_TIM_ConfigClockSource+0x16c>
 80050bc:	2b70      	cmp	r3, #112	@ 0x70
 80050be:	d01a      	beq.n	80050f6 <HAL_TIM_ConfigClockSource+0xa6>
 80050c0:	2b70      	cmp	r3, #112	@ 0x70
 80050c2:	d87b      	bhi.n	80051bc <HAL_TIM_ConfigClockSource+0x16c>
 80050c4:	2b60      	cmp	r3, #96	@ 0x60
 80050c6:	d050      	beq.n	800516a <HAL_TIM_ConfigClockSource+0x11a>
 80050c8:	2b60      	cmp	r3, #96	@ 0x60
 80050ca:	d877      	bhi.n	80051bc <HAL_TIM_ConfigClockSource+0x16c>
 80050cc:	2b50      	cmp	r3, #80	@ 0x50
 80050ce:	d03c      	beq.n	800514a <HAL_TIM_ConfigClockSource+0xfa>
 80050d0:	2b50      	cmp	r3, #80	@ 0x50
 80050d2:	d873      	bhi.n	80051bc <HAL_TIM_ConfigClockSource+0x16c>
 80050d4:	2b40      	cmp	r3, #64	@ 0x40
 80050d6:	d058      	beq.n	800518a <HAL_TIM_ConfigClockSource+0x13a>
 80050d8:	2b40      	cmp	r3, #64	@ 0x40
 80050da:	d86f      	bhi.n	80051bc <HAL_TIM_ConfigClockSource+0x16c>
 80050dc:	2b30      	cmp	r3, #48	@ 0x30
 80050de:	d064      	beq.n	80051aa <HAL_TIM_ConfigClockSource+0x15a>
 80050e0:	2b30      	cmp	r3, #48	@ 0x30
 80050e2:	d86b      	bhi.n	80051bc <HAL_TIM_ConfigClockSource+0x16c>
 80050e4:	2b20      	cmp	r3, #32
 80050e6:	d060      	beq.n	80051aa <HAL_TIM_ConfigClockSource+0x15a>
 80050e8:	2b20      	cmp	r3, #32
 80050ea:	d867      	bhi.n	80051bc <HAL_TIM_ConfigClockSource+0x16c>
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d05c      	beq.n	80051aa <HAL_TIM_ConfigClockSource+0x15a>
 80050f0:	2b10      	cmp	r3, #16
 80050f2:	d05a      	beq.n	80051aa <HAL_TIM_ConfigClockSource+0x15a>
 80050f4:	e062      	b.n	80051bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005106:	f000 fb41 	bl	800578c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005118:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	68ba      	ldr	r2, [r7, #8]
 8005120:	609a      	str	r2, [r3, #8]
      break;
 8005122:	e04f      	b.n	80051c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005134:	f000 fb2a 	bl	800578c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	689a      	ldr	r2, [r3, #8]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005146:	609a      	str	r2, [r3, #8]
      break;
 8005148:	e03c      	b.n	80051c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005156:	461a      	mov	r2, r3
 8005158:	f000 fa9e 	bl	8005698 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	2150      	movs	r1, #80	@ 0x50
 8005162:	4618      	mov	r0, r3
 8005164:	f000 faf7 	bl	8005756 <TIM_ITRx_SetConfig>
      break;
 8005168:	e02c      	b.n	80051c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005176:	461a      	mov	r2, r3
 8005178:	f000 fabd 	bl	80056f6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2160      	movs	r1, #96	@ 0x60
 8005182:	4618      	mov	r0, r3
 8005184:	f000 fae7 	bl	8005756 <TIM_ITRx_SetConfig>
      break;
 8005188:	e01c      	b.n	80051c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005196:	461a      	mov	r2, r3
 8005198:	f000 fa7e 	bl	8005698 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2140      	movs	r1, #64	@ 0x40
 80051a2:	4618      	mov	r0, r3
 80051a4:	f000 fad7 	bl	8005756 <TIM_ITRx_SetConfig>
      break;
 80051a8:	e00c      	b.n	80051c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4619      	mov	r1, r3
 80051b4:	4610      	mov	r0, r2
 80051b6:	f000 face 	bl	8005756 <TIM_ITRx_SetConfig>
      break;
 80051ba:	e003      	b.n	80051c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	73fb      	strb	r3, [r7, #15]
      break;
 80051c0:	e000      	b.n	80051c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80051c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80051d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3710      	adds	r7, #16
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
	...

080051e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b085      	sub	sp, #20
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a46      	ldr	r2, [pc, #280]	@ (800530c <TIM_Base_SetConfig+0x12c>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d013      	beq.n	8005220 <TIM_Base_SetConfig+0x40>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051fe:	d00f      	beq.n	8005220 <TIM_Base_SetConfig+0x40>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4a43      	ldr	r2, [pc, #268]	@ (8005310 <TIM_Base_SetConfig+0x130>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d00b      	beq.n	8005220 <TIM_Base_SetConfig+0x40>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4a42      	ldr	r2, [pc, #264]	@ (8005314 <TIM_Base_SetConfig+0x134>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d007      	beq.n	8005220 <TIM_Base_SetConfig+0x40>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4a41      	ldr	r2, [pc, #260]	@ (8005318 <TIM_Base_SetConfig+0x138>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d003      	beq.n	8005220 <TIM_Base_SetConfig+0x40>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4a40      	ldr	r2, [pc, #256]	@ (800531c <TIM_Base_SetConfig+0x13c>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d108      	bne.n	8005232 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005226:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	68fa      	ldr	r2, [r7, #12]
 800522e:	4313      	orrs	r3, r2
 8005230:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a35      	ldr	r2, [pc, #212]	@ (800530c <TIM_Base_SetConfig+0x12c>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d02b      	beq.n	8005292 <TIM_Base_SetConfig+0xb2>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005240:	d027      	beq.n	8005292 <TIM_Base_SetConfig+0xb2>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a32      	ldr	r2, [pc, #200]	@ (8005310 <TIM_Base_SetConfig+0x130>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d023      	beq.n	8005292 <TIM_Base_SetConfig+0xb2>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a31      	ldr	r2, [pc, #196]	@ (8005314 <TIM_Base_SetConfig+0x134>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d01f      	beq.n	8005292 <TIM_Base_SetConfig+0xb2>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a30      	ldr	r2, [pc, #192]	@ (8005318 <TIM_Base_SetConfig+0x138>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d01b      	beq.n	8005292 <TIM_Base_SetConfig+0xb2>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a2f      	ldr	r2, [pc, #188]	@ (800531c <TIM_Base_SetConfig+0x13c>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d017      	beq.n	8005292 <TIM_Base_SetConfig+0xb2>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a2e      	ldr	r2, [pc, #184]	@ (8005320 <TIM_Base_SetConfig+0x140>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d013      	beq.n	8005292 <TIM_Base_SetConfig+0xb2>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a2d      	ldr	r2, [pc, #180]	@ (8005324 <TIM_Base_SetConfig+0x144>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d00f      	beq.n	8005292 <TIM_Base_SetConfig+0xb2>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a2c      	ldr	r2, [pc, #176]	@ (8005328 <TIM_Base_SetConfig+0x148>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d00b      	beq.n	8005292 <TIM_Base_SetConfig+0xb2>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a2b      	ldr	r2, [pc, #172]	@ (800532c <TIM_Base_SetConfig+0x14c>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d007      	beq.n	8005292 <TIM_Base_SetConfig+0xb2>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a2a      	ldr	r2, [pc, #168]	@ (8005330 <TIM_Base_SetConfig+0x150>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d003      	beq.n	8005292 <TIM_Base_SetConfig+0xb2>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a29      	ldr	r2, [pc, #164]	@ (8005334 <TIM_Base_SetConfig+0x154>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d108      	bne.n	80052a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005298:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	68fa      	ldr	r2, [r7, #12]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	695b      	ldr	r3, [r3, #20]
 80052ae:	4313      	orrs	r3, r2
 80052b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	68fa      	ldr	r2, [r7, #12]
 80052b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	689a      	ldr	r2, [r3, #8]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4a10      	ldr	r2, [pc, #64]	@ (800530c <TIM_Base_SetConfig+0x12c>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d003      	beq.n	80052d8 <TIM_Base_SetConfig+0xf8>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4a12      	ldr	r2, [pc, #72]	@ (800531c <TIM_Base_SetConfig+0x13c>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d103      	bne.n	80052e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	691a      	ldr	r2, [r3, #16]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	691b      	ldr	r3, [r3, #16]
 80052ea:	f003 0301 	and.w	r3, r3, #1
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d105      	bne.n	80052fe <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	f023 0201 	bic.w	r2, r3, #1
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	611a      	str	r2, [r3, #16]
  }
}
 80052fe:	bf00      	nop
 8005300:	3714      	adds	r7, #20
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr
 800530a:	bf00      	nop
 800530c:	40010000 	.word	0x40010000
 8005310:	40000400 	.word	0x40000400
 8005314:	40000800 	.word	0x40000800
 8005318:	40000c00 	.word	0x40000c00
 800531c:	40010400 	.word	0x40010400
 8005320:	40014000 	.word	0x40014000
 8005324:	40014400 	.word	0x40014400
 8005328:	40014800 	.word	0x40014800
 800532c:	40001800 	.word	0x40001800
 8005330:	40001c00 	.word	0x40001c00
 8005334:	40002000 	.word	0x40002000

08005338 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005338:	b480      	push	{r7}
 800533a:	b087      	sub	sp, #28
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a1b      	ldr	r3, [r3, #32]
 8005346:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6a1b      	ldr	r3, [r3, #32]
 800534c:	f023 0201 	bic.w	r2, r3, #1
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	699b      	ldr	r3, [r3, #24]
 800535e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005366:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f023 0303 	bic.w	r3, r3, #3
 800536e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	68fa      	ldr	r2, [r7, #12]
 8005376:	4313      	orrs	r3, r2
 8005378:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	f023 0302 	bic.w	r3, r3, #2
 8005380:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	697a      	ldr	r2, [r7, #20]
 8005388:	4313      	orrs	r3, r2
 800538a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a20      	ldr	r2, [pc, #128]	@ (8005410 <TIM_OC1_SetConfig+0xd8>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d003      	beq.n	800539c <TIM_OC1_SetConfig+0x64>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a1f      	ldr	r2, [pc, #124]	@ (8005414 <TIM_OC1_SetConfig+0xdc>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d10c      	bne.n	80053b6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	f023 0308 	bic.w	r3, r3, #8
 80053a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	697a      	ldr	r2, [r7, #20]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	f023 0304 	bic.w	r3, r3, #4
 80053b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a15      	ldr	r2, [pc, #84]	@ (8005410 <TIM_OC1_SetConfig+0xd8>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d003      	beq.n	80053c6 <TIM_OC1_SetConfig+0x8e>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a14      	ldr	r2, [pc, #80]	@ (8005414 <TIM_OC1_SetConfig+0xdc>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d111      	bne.n	80053ea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80053cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80053d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	695b      	ldr	r3, [r3, #20]
 80053da:	693a      	ldr	r2, [r7, #16]
 80053dc:	4313      	orrs	r3, r2
 80053de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	699b      	ldr	r3, [r3, #24]
 80053e4:	693a      	ldr	r2, [r7, #16]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	693a      	ldr	r2, [r7, #16]
 80053ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	68fa      	ldr	r2, [r7, #12]
 80053f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	685a      	ldr	r2, [r3, #4]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	697a      	ldr	r2, [r7, #20]
 8005402:	621a      	str	r2, [r3, #32]
}
 8005404:	bf00      	nop
 8005406:	371c      	adds	r7, #28
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr
 8005410:	40010000 	.word	0x40010000
 8005414:	40010400 	.word	0x40010400

08005418 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005418:	b480      	push	{r7}
 800541a:	b087      	sub	sp, #28
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a1b      	ldr	r3, [r3, #32]
 8005426:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6a1b      	ldr	r3, [r3, #32]
 800542c:	f023 0210 	bic.w	r2, r3, #16
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	699b      	ldr	r3, [r3, #24]
 800543e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800544e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	021b      	lsls	r3, r3, #8
 8005456:	68fa      	ldr	r2, [r7, #12]
 8005458:	4313      	orrs	r3, r2
 800545a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	f023 0320 	bic.w	r3, r3, #32
 8005462:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	011b      	lsls	r3, r3, #4
 800546a:	697a      	ldr	r2, [r7, #20]
 800546c:	4313      	orrs	r3, r2
 800546e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	4a22      	ldr	r2, [pc, #136]	@ (80054fc <TIM_OC2_SetConfig+0xe4>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d003      	beq.n	8005480 <TIM_OC2_SetConfig+0x68>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	4a21      	ldr	r2, [pc, #132]	@ (8005500 <TIM_OC2_SetConfig+0xe8>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d10d      	bne.n	800549c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005486:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	011b      	lsls	r3, r3, #4
 800548e:	697a      	ldr	r2, [r7, #20]
 8005490:	4313      	orrs	r3, r2
 8005492:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800549a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4a17      	ldr	r2, [pc, #92]	@ (80054fc <TIM_OC2_SetConfig+0xe4>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d003      	beq.n	80054ac <TIM_OC2_SetConfig+0x94>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a16      	ldr	r2, [pc, #88]	@ (8005500 <TIM_OC2_SetConfig+0xe8>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d113      	bne.n	80054d4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80054b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80054ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	695b      	ldr	r3, [r3, #20]
 80054c0:	009b      	lsls	r3, r3, #2
 80054c2:	693a      	ldr	r2, [r7, #16]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	699b      	ldr	r3, [r3, #24]
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	693a      	ldr	r2, [r7, #16]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	693a      	ldr	r2, [r7, #16]
 80054d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	68fa      	ldr	r2, [r7, #12]
 80054de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	685a      	ldr	r2, [r3, #4]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	697a      	ldr	r2, [r7, #20]
 80054ec:	621a      	str	r2, [r3, #32]
}
 80054ee:	bf00      	nop
 80054f0:	371c      	adds	r7, #28
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr
 80054fa:	bf00      	nop
 80054fc:	40010000 	.word	0x40010000
 8005500:	40010400 	.word	0x40010400

08005504 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005504:	b480      	push	{r7}
 8005506:	b087      	sub	sp, #28
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a1b      	ldr	r3, [r3, #32]
 8005512:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6a1b      	ldr	r3, [r3, #32]
 8005518:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	69db      	ldr	r3, [r3, #28]
 800552a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005532:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f023 0303 	bic.w	r3, r3, #3
 800553a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	68fa      	ldr	r2, [r7, #12]
 8005542:	4313      	orrs	r3, r2
 8005544:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800554c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	021b      	lsls	r3, r3, #8
 8005554:	697a      	ldr	r2, [r7, #20]
 8005556:	4313      	orrs	r3, r2
 8005558:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4a21      	ldr	r2, [pc, #132]	@ (80055e4 <TIM_OC3_SetConfig+0xe0>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d003      	beq.n	800556a <TIM_OC3_SetConfig+0x66>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a20      	ldr	r2, [pc, #128]	@ (80055e8 <TIM_OC3_SetConfig+0xe4>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d10d      	bne.n	8005586 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005570:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	021b      	lsls	r3, r3, #8
 8005578:	697a      	ldr	r2, [r7, #20]
 800557a:	4313      	orrs	r3, r2
 800557c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005584:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4a16      	ldr	r2, [pc, #88]	@ (80055e4 <TIM_OC3_SetConfig+0xe0>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d003      	beq.n	8005596 <TIM_OC3_SetConfig+0x92>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4a15      	ldr	r2, [pc, #84]	@ (80055e8 <TIM_OC3_SetConfig+0xe4>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d113      	bne.n	80055be <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800559c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80055a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	695b      	ldr	r3, [r3, #20]
 80055aa:	011b      	lsls	r3, r3, #4
 80055ac:	693a      	ldr	r2, [r7, #16]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	699b      	ldr	r3, [r3, #24]
 80055b6:	011b      	lsls	r3, r3, #4
 80055b8:	693a      	ldr	r2, [r7, #16]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	693a      	ldr	r2, [r7, #16]
 80055c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	68fa      	ldr	r2, [r7, #12]
 80055c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	685a      	ldr	r2, [r3, #4]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	697a      	ldr	r2, [r7, #20]
 80055d6:	621a      	str	r2, [r3, #32]
}
 80055d8:	bf00      	nop
 80055da:	371c      	adds	r7, #28
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr
 80055e4:	40010000 	.word	0x40010000
 80055e8:	40010400 	.word	0x40010400

080055ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b087      	sub	sp, #28
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a1b      	ldr	r3, [r3, #32]
 80055fa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6a1b      	ldr	r3, [r3, #32]
 8005600:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	69db      	ldr	r3, [r3, #28]
 8005612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800561a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005622:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	021b      	lsls	r3, r3, #8
 800562a:	68fa      	ldr	r2, [r7, #12]
 800562c:	4313      	orrs	r3, r2
 800562e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005636:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	031b      	lsls	r3, r3, #12
 800563e:	693a      	ldr	r2, [r7, #16]
 8005640:	4313      	orrs	r3, r2
 8005642:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4a12      	ldr	r2, [pc, #72]	@ (8005690 <TIM_OC4_SetConfig+0xa4>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d003      	beq.n	8005654 <TIM_OC4_SetConfig+0x68>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	4a11      	ldr	r2, [pc, #68]	@ (8005694 <TIM_OC4_SetConfig+0xa8>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d109      	bne.n	8005668 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800565a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	695b      	ldr	r3, [r3, #20]
 8005660:	019b      	lsls	r3, r3, #6
 8005662:	697a      	ldr	r2, [r7, #20]
 8005664:	4313      	orrs	r3, r2
 8005666:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	697a      	ldr	r2, [r7, #20]
 800566c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	68fa      	ldr	r2, [r7, #12]
 8005672:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	685a      	ldr	r2, [r3, #4]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	693a      	ldr	r2, [r7, #16]
 8005680:	621a      	str	r2, [r3, #32]
}
 8005682:	bf00      	nop
 8005684:	371c      	adds	r7, #28
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr
 800568e:	bf00      	nop
 8005690:	40010000 	.word	0x40010000
 8005694:	40010400 	.word	0x40010400

08005698 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005698:	b480      	push	{r7}
 800569a:	b087      	sub	sp, #28
 800569c:	af00      	add	r7, sp, #0
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	60b9      	str	r1, [r7, #8]
 80056a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6a1b      	ldr	r3, [r3, #32]
 80056a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6a1b      	ldr	r3, [r3, #32]
 80056ae:	f023 0201 	bic.w	r2, r3, #1
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	699b      	ldr	r3, [r3, #24]
 80056ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80056c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	011b      	lsls	r3, r3, #4
 80056c8:	693a      	ldr	r2, [r7, #16]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	f023 030a 	bic.w	r3, r3, #10
 80056d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80056d6:	697a      	ldr	r2, [r7, #20]
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	4313      	orrs	r3, r2
 80056dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	693a      	ldr	r2, [r7, #16]
 80056e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	697a      	ldr	r2, [r7, #20]
 80056e8:	621a      	str	r2, [r3, #32]
}
 80056ea:	bf00      	nop
 80056ec:	371c      	adds	r7, #28
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr

080056f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056f6:	b480      	push	{r7}
 80056f8:	b087      	sub	sp, #28
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	60f8      	str	r0, [r7, #12]
 80056fe:	60b9      	str	r1, [r7, #8]
 8005700:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	6a1b      	ldr	r3, [r3, #32]
 8005706:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	6a1b      	ldr	r3, [r3, #32]
 800570c:	f023 0210 	bic.w	r2, r3, #16
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	699b      	ldr	r3, [r3, #24]
 8005718:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005720:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	031b      	lsls	r3, r3, #12
 8005726:	693a      	ldr	r2, [r7, #16]
 8005728:	4313      	orrs	r3, r2
 800572a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005732:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	011b      	lsls	r3, r3, #4
 8005738:	697a      	ldr	r2, [r7, #20]
 800573a:	4313      	orrs	r3, r2
 800573c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	693a      	ldr	r2, [r7, #16]
 8005742:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	697a      	ldr	r2, [r7, #20]
 8005748:	621a      	str	r2, [r3, #32]
}
 800574a:	bf00      	nop
 800574c:	371c      	adds	r7, #28
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr

08005756 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005756:	b480      	push	{r7}
 8005758:	b085      	sub	sp, #20
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
 800575e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800576c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800576e:	683a      	ldr	r2, [r7, #0]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	4313      	orrs	r3, r2
 8005774:	f043 0307 	orr.w	r3, r3, #7
 8005778:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	609a      	str	r2, [r3, #8]
}
 8005780:	bf00      	nop
 8005782:	3714      	adds	r7, #20
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800578c:	b480      	push	{r7}
 800578e:	b087      	sub	sp, #28
 8005790:	af00      	add	r7, sp, #0
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	60b9      	str	r1, [r7, #8]
 8005796:	607a      	str	r2, [r7, #4]
 8005798:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80057a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	021a      	lsls	r2, r3, #8
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	431a      	orrs	r2, r3
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	4313      	orrs	r3, r2
 80057b4:	697a      	ldr	r2, [r7, #20]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	697a      	ldr	r2, [r7, #20]
 80057be:	609a      	str	r2, [r3, #8]
}
 80057c0:	bf00      	nop
 80057c2:	371c      	adds	r7, #28
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr

080057cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b087      	sub	sp, #28
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	60f8      	str	r0, [r7, #12]
 80057d4:	60b9      	str	r1, [r7, #8]
 80057d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	f003 031f 	and.w	r3, r3, #31
 80057de:	2201      	movs	r2, #1
 80057e0:	fa02 f303 	lsl.w	r3, r2, r3
 80057e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6a1a      	ldr	r2, [r3, #32]
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	43db      	mvns	r3, r3
 80057ee:	401a      	ands	r2, r3
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6a1a      	ldr	r2, [r3, #32]
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	f003 031f 	and.w	r3, r3, #31
 80057fe:	6879      	ldr	r1, [r7, #4]
 8005800:	fa01 f303 	lsl.w	r3, r1, r3
 8005804:	431a      	orrs	r2, r3
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	621a      	str	r2, [r3, #32]
}
 800580a:	bf00      	nop
 800580c:	371c      	adds	r7, #28
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr
	...

08005818 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005818:	b480      	push	{r7}
 800581a:	b085      	sub	sp, #20
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005828:	2b01      	cmp	r3, #1
 800582a:	d101      	bne.n	8005830 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800582c:	2302      	movs	r3, #2
 800582e:	e05a      	b.n	80058e6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2202      	movs	r2, #2
 800583c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005856:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	68fa      	ldr	r2, [r7, #12]
 800585e:	4313      	orrs	r3, r2
 8005860:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	68fa      	ldr	r2, [r7, #12]
 8005868:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a21      	ldr	r2, [pc, #132]	@ (80058f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d022      	beq.n	80058ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800587c:	d01d      	beq.n	80058ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a1d      	ldr	r2, [pc, #116]	@ (80058f8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d018      	beq.n	80058ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a1b      	ldr	r2, [pc, #108]	@ (80058fc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d013      	beq.n	80058ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a1a      	ldr	r2, [pc, #104]	@ (8005900 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d00e      	beq.n	80058ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a18      	ldr	r2, [pc, #96]	@ (8005904 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d009      	beq.n	80058ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a17      	ldr	r2, [pc, #92]	@ (8005908 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d004      	beq.n	80058ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a15      	ldr	r2, [pc, #84]	@ (800590c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d10c      	bne.n	80058d4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	68ba      	ldr	r2, [r7, #8]
 80058c8:	4313      	orrs	r3, r2
 80058ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	68ba      	ldr	r2, [r7, #8]
 80058d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80058e4:	2300      	movs	r3, #0
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3714      	adds	r7, #20
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr
 80058f2:	bf00      	nop
 80058f4:	40010000 	.word	0x40010000
 80058f8:	40000400 	.word	0x40000400
 80058fc:	40000800 	.word	0x40000800
 8005900:	40000c00 	.word	0x40000c00
 8005904:	40010400 	.word	0x40010400
 8005908:	40014000 	.word	0x40014000
 800590c:	40001800 	.word	0x40001800

08005910 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005910:	b084      	sub	sp, #16
 8005912:	b580      	push	{r7, lr}
 8005914:	b084      	sub	sp, #16
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]
 800591a:	f107 001c 	add.w	r0, r7, #28
 800591e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005922:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005926:	2b01      	cmp	r3, #1
 8005928:	d123      	bne.n	8005972 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800592e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	68db      	ldr	r3, [r3, #12]
 800593a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800593e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005952:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005956:	2b01      	cmp	r3, #1
 8005958:	d105      	bne.n	8005966 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	68db      	ldr	r3, [r3, #12]
 800595e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 f9dc 	bl	8005d24 <USB_CoreReset>
 800596c:	4603      	mov	r3, r0
 800596e:	73fb      	strb	r3, [r7, #15]
 8005970:	e01b      	b.n	80059aa <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 f9d0 	bl	8005d24 <USB_CoreReset>
 8005984:	4603      	mov	r3, r0
 8005986:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005988:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800598c:	2b00      	cmp	r3, #0
 800598e:	d106      	bne.n	800599e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005994:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	639a      	str	r2, [r3, #56]	@ 0x38
 800599c:	e005      	b.n	80059aa <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059a2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80059aa:	7fbb      	ldrb	r3, [r7, #30]
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d10b      	bne.n	80059c8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	f043 0206 	orr.w	r2, r3, #6
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	f043 0220 	orr.w	r2, r3, #32
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80059c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3710      	adds	r7, #16
 80059ce:	46bd      	mov	sp, r7
 80059d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80059d4:	b004      	add	sp, #16
 80059d6:	4770      	bx	lr

080059d8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80059d8:	b480      	push	{r7}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	f043 0201 	orr.w	r2, r3, #1
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80059ec:	2300      	movs	r3, #0
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	370c      	adds	r7, #12
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr

080059fa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80059fa:	b480      	push	{r7}
 80059fc:	b083      	sub	sp, #12
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	f023 0201 	bic.w	r2, r3, #1
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005a0e:	2300      	movs	r3, #0
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	370c      	adds	r7, #12
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr

08005a1c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	460b      	mov	r3, r1
 8005a26:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005a38:	78fb      	ldrb	r3, [r7, #3]
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d115      	bne.n	8005a6a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005a4a:	200a      	movs	r0, #10
 8005a4c:	f7fb face 	bl	8000fec <HAL_Delay>
      ms += 10U;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	330a      	adds	r3, #10
 8005a54:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 f956 	bl	8005d08 <USB_GetMode>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d01e      	beq.n	8005aa0 <USB_SetCurrentMode+0x84>
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2bc7      	cmp	r3, #199	@ 0xc7
 8005a66:	d9f0      	bls.n	8005a4a <USB_SetCurrentMode+0x2e>
 8005a68:	e01a      	b.n	8005aa0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005a6a:	78fb      	ldrb	r3, [r7, #3]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d115      	bne.n	8005a9c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005a7c:	200a      	movs	r0, #10
 8005a7e:	f7fb fab5 	bl	8000fec <HAL_Delay>
      ms += 10U;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	330a      	adds	r3, #10
 8005a86:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f000 f93d 	bl	8005d08 <USB_GetMode>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d005      	beq.n	8005aa0 <USB_SetCurrentMode+0x84>
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2bc7      	cmp	r3, #199	@ 0xc7
 8005a98:	d9f0      	bls.n	8005a7c <USB_SetCurrentMode+0x60>
 8005a9a:	e001      	b.n	8005aa0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e005      	b.n	8005aac <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2bc8      	cmp	r3, #200	@ 0xc8
 8005aa4:	d101      	bne.n	8005aaa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e000      	b.n	8005aac <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005aaa:	2300      	movs	r3, #0
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3710      	adds	r7, #16
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b085      	sub	sp, #20
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	3301      	adds	r3, #1
 8005ac6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005ace:	d901      	bls.n	8005ad4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	e01b      	b.n	8005b0c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	691b      	ldr	r3, [r3, #16]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	daf2      	bge.n	8005ac2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005adc:	2300      	movs	r3, #0
 8005ade:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	019b      	lsls	r3, r3, #6
 8005ae4:	f043 0220 	orr.w	r2, r3, #32
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	3301      	adds	r3, #1
 8005af0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005af8:	d901      	bls.n	8005afe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005afa:	2303      	movs	r3, #3
 8005afc:	e006      	b.n	8005b0c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	691b      	ldr	r3, [r3, #16]
 8005b02:	f003 0320 	and.w	r3, r3, #32
 8005b06:	2b20      	cmp	r3, #32
 8005b08:	d0f0      	beq.n	8005aec <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005b0a:	2300      	movs	r3, #0
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3714      	adds	r7, #20
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b085      	sub	sp, #20
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b20:	2300      	movs	r3, #0
 8005b22:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	3301      	adds	r3, #1
 8005b28:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005b30:	d901      	bls.n	8005b36 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005b32:	2303      	movs	r3, #3
 8005b34:	e018      	b.n	8005b68 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	daf2      	bge.n	8005b24 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2210      	movs	r2, #16
 8005b46:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005b54:	d901      	bls.n	8005b5a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005b56:	2303      	movs	r3, #3
 8005b58:	e006      	b.n	8005b68 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	f003 0310 	and.w	r3, r3, #16
 8005b62:	2b10      	cmp	r3, #16
 8005b64:	d0f0      	beq.n	8005b48 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005b66:	2300      	movs	r3, #0
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3714      	adds	r7, #20
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b089      	sub	sp, #36	@ 0x24
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	60f8      	str	r0, [r7, #12]
 8005b7c:	60b9      	str	r1, [r7, #8]
 8005b7e:	4611      	mov	r1, r2
 8005b80:	461a      	mov	r2, r3
 8005b82:	460b      	mov	r3, r1
 8005b84:	71fb      	strb	r3, [r7, #7]
 8005b86:	4613      	mov	r3, r2
 8005b88:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005b92:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d123      	bne.n	8005be2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005b9a:	88bb      	ldrh	r3, [r7, #4]
 8005b9c:	3303      	adds	r3, #3
 8005b9e:	089b      	lsrs	r3, r3, #2
 8005ba0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	61bb      	str	r3, [r7, #24]
 8005ba6:	e018      	b.n	8005bda <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005ba8:	79fb      	ldrb	r3, [r7, #7]
 8005baa:	031a      	lsls	r2, r3, #12
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	4413      	add	r3, r2
 8005bb0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	69fb      	ldr	r3, [r7, #28]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005bc2:	69fb      	ldr	r3, [r7, #28]
 8005bc4:	3301      	adds	r3, #1
 8005bc6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005bc8:	69fb      	ldr	r3, [r7, #28]
 8005bca:	3301      	adds	r3, #1
 8005bcc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005bce:	69fb      	ldr	r3, [r7, #28]
 8005bd0:	3301      	adds	r3, #1
 8005bd2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	3301      	adds	r3, #1
 8005bd8:	61bb      	str	r3, [r7, #24]
 8005bda:	69ba      	ldr	r2, [r7, #24]
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d3e2      	bcc.n	8005ba8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005be2:	2300      	movs	r3, #0
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3724      	adds	r7, #36	@ 0x24
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr

08005bf0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b08b      	sub	sp, #44	@ 0x2c
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	60b9      	str	r1, [r7, #8]
 8005bfa:	4613      	mov	r3, r2
 8005bfc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005c06:	88fb      	ldrh	r3, [r7, #6]
 8005c08:	089b      	lsrs	r3, r3, #2
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005c0e:	88fb      	ldrh	r3, [r7, #6]
 8005c10:	f003 0303 	and.w	r3, r3, #3
 8005c14:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005c16:	2300      	movs	r3, #0
 8005c18:	623b      	str	r3, [r7, #32]
 8005c1a:	e014      	b.n	8005c46 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005c1c:	69bb      	ldr	r3, [r7, #24]
 8005c1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c26:	601a      	str	r2, [r3, #0]
    pDest++;
 8005c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c2a:	3301      	adds	r3, #1
 8005c2c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c30:	3301      	adds	r3, #1
 8005c32:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c36:	3301      	adds	r3, #1
 8005c38:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c3c:	3301      	adds	r3, #1
 8005c3e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005c40:	6a3b      	ldr	r3, [r7, #32]
 8005c42:	3301      	adds	r3, #1
 8005c44:	623b      	str	r3, [r7, #32]
 8005c46:	6a3a      	ldr	r2, [r7, #32]
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d3e6      	bcc.n	8005c1c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005c4e:	8bfb      	ldrh	r3, [r7, #30]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d01e      	beq.n	8005c92 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005c54:	2300      	movs	r3, #0
 8005c56:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005c58:	69bb      	ldr	r3, [r7, #24]
 8005c5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c5e:	461a      	mov	r2, r3
 8005c60:	f107 0310 	add.w	r3, r7, #16
 8005c64:	6812      	ldr	r2, [r2, #0]
 8005c66:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005c68:	693a      	ldr	r2, [r7, #16]
 8005c6a:	6a3b      	ldr	r3, [r7, #32]
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	00db      	lsls	r3, r3, #3
 8005c70:	fa22 f303 	lsr.w	r3, r2, r3
 8005c74:	b2da      	uxtb	r2, r3
 8005c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c78:	701a      	strb	r2, [r3, #0]
      i++;
 8005c7a:	6a3b      	ldr	r3, [r7, #32]
 8005c7c:	3301      	adds	r3, #1
 8005c7e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c82:	3301      	adds	r3, #1
 8005c84:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005c86:	8bfb      	ldrh	r3, [r7, #30]
 8005c88:	3b01      	subs	r3, #1
 8005c8a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005c8c:	8bfb      	ldrh	r3, [r7, #30]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d1ea      	bne.n	8005c68 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	372c      	adds	r7, #44	@ 0x2c
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b085      	sub	sp, #20
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	695b      	ldr	r3, [r3, #20]
 8005cac:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	699b      	ldr	r3, [r3, #24]
 8005cb2:	68fa      	ldr	r2, [r7, #12]
 8005cb4:	4013      	ands	r3, r2
 8005cb6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3714      	adds	r7, #20
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc4:	4770      	bx	lr

08005cc6 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8005cc6:	b480      	push	{r7}
 8005cc8:	b085      	sub	sp, #20
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
 8005cce:	460b      	mov	r3, r1
 8005cd0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8005cd6:	78fb      	ldrb	r3, [r7, #3]
 8005cd8:	015a      	lsls	r2, r3, #5
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	4413      	add	r3, r2
 8005cde:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8005ce6:	78fb      	ldrb	r3, [r7, #3]
 8005ce8:	015a      	lsls	r2, r3, #5
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	4413      	add	r3, r2
 8005cee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cf2:	68db      	ldr	r3, [r3, #12]
 8005cf4:	68ba      	ldr	r2, [r7, #8]
 8005cf6:	4013      	ands	r3, r2
 8005cf8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005cfa:	68bb      	ldr	r3, [r7, #8]
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3714      	adds	r7, #20
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr

08005d08 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b083      	sub	sp, #12
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	695b      	ldr	r3, [r3, #20]
 8005d14:	f003 0301 	and.w	r3, r3, #1
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	370c      	adds	r7, #12
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr

08005d24 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b085      	sub	sp, #20
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	3301      	adds	r3, #1
 8005d34:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005d3c:	d901      	bls.n	8005d42 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005d3e:	2303      	movs	r3, #3
 8005d40:	e01b      	b.n	8005d7a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	691b      	ldr	r3, [r3, #16]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	daf2      	bge.n	8005d30 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	691b      	ldr	r3, [r3, #16]
 8005d52:	f043 0201 	orr.w	r2, r3, #1
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	3301      	adds	r3, #1
 8005d5e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005d66:	d901      	bls.n	8005d6c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005d68:	2303      	movs	r3, #3
 8005d6a:	e006      	b.n	8005d7a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	691b      	ldr	r3, [r3, #16]
 8005d70:	f003 0301 	and.w	r3, r3, #1
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d0f0      	beq.n	8005d5a <USB_CoreReset+0x36>

  return HAL_OK;
 8005d78:	2300      	movs	r3, #0
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3714      	adds	r7, #20
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr
	...

08005d88 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d88:	b084      	sub	sp, #16
 8005d8a:	b580      	push	{r7, lr}
 8005d8c:	b086      	sub	sp, #24
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
 8005d92:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005d96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005da8:	461a      	mov	r2, r3
 8005daa:	2300      	movs	r3, #0
 8005dac:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005db2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dbe:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dca:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d119      	bne.n	8005e12 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005dde:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d10a      	bne.n	8005dfc <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	68fa      	ldr	r2, [r7, #12]
 8005df0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005df4:	f043 0304 	orr.w	r3, r3, #4
 8005df8:	6013      	str	r3, [r2, #0]
 8005dfa:	e014      	b.n	8005e26 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	68fa      	ldr	r2, [r7, #12]
 8005e06:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005e0a:	f023 0304 	bic.w	r3, r3, #4
 8005e0e:	6013      	str	r3, [r2, #0]
 8005e10:	e009      	b.n	8005e26 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	68fa      	ldr	r2, [r7, #12]
 8005e1c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005e20:	f023 0304 	bic.w	r3, r3, #4
 8005e24:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005e26:	2110      	movs	r1, #16
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f7ff fe43 	bl	8005ab4 <USB_FlushTxFifo>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d001      	beq.n	8005e38 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f7ff fe6d 	bl	8005b18 <USB_FlushRxFifo>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d001      	beq.n	8005e48 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005e48:	2300      	movs	r3, #0
 8005e4a:	613b      	str	r3, [r7, #16]
 8005e4c:	e015      	b.n	8005e7a <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	015a      	lsls	r2, r3, #5
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	4413      	add	r3, r2
 8005e56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8005e60:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	015a      	lsls	r2, r3, #5
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	4413      	add	r3, r2
 8005e6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e6e:	461a      	mov	r2, r3
 8005e70:	2300      	movs	r3, #0
 8005e72:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	3301      	adds	r3, #1
 8005e78:	613b      	str	r3, [r7, #16]
 8005e7a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005e7e:	461a      	mov	r2, r3
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d3e3      	bcc.n	8005e4e <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f04f 32ff 	mov.w	r2, #4294967295
 8005e92:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	4a18      	ldr	r2, [pc, #96]	@ (8005ef8 <USB_HostInit+0x170>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d10b      	bne.n	8005eb4 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ea2:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	4a15      	ldr	r2, [pc, #84]	@ (8005efc <USB_HostInit+0x174>)
 8005ea8:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	4a14      	ldr	r2, [pc, #80]	@ (8005f00 <USB_HostInit+0x178>)
 8005eae:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8005eb2:	e009      	b.n	8005ec8 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2280      	movs	r2, #128	@ 0x80
 8005eb8:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	4a11      	ldr	r2, [pc, #68]	@ (8005f04 <USB_HostInit+0x17c>)
 8005ebe:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	4a11      	ldr	r2, [pc, #68]	@ (8005f08 <USB_HostInit+0x180>)
 8005ec4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005ec8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d105      	bne.n	8005edc <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	699b      	ldr	r3, [r3, #24]
 8005ed4:	f043 0210 	orr.w	r2, r3, #16
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	699a      	ldr	r2, [r3, #24]
 8005ee0:	4b0a      	ldr	r3, [pc, #40]	@ (8005f0c <USB_HostInit+0x184>)
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005ee8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3718      	adds	r7, #24
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005ef4:	b004      	add	sp, #16
 8005ef6:	4770      	bx	lr
 8005ef8:	40040000 	.word	0x40040000
 8005efc:	01000200 	.word	0x01000200
 8005f00:	00e00300 	.word	0x00e00300
 8005f04:	00600080 	.word	0x00600080
 8005f08:	004000e0 	.word	0x004000e0
 8005f0c:	a3200008 	.word	0xa3200008

08005f10 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b085      	sub	sp, #20
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	460b      	mov	r3, r1
 8005f1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	68fa      	ldr	r2, [r7, #12]
 8005f2a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005f2e:	f023 0303 	bic.w	r3, r3, #3
 8005f32:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	78fb      	ldrb	r3, [r7, #3]
 8005f3e:	f003 0303 	and.w	r3, r3, #3
 8005f42:	68f9      	ldr	r1, [r7, #12]
 8005f44:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005f4c:	78fb      	ldrb	r3, [r7, #3]
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d107      	bne.n	8005f62 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005f58:	461a      	mov	r2, r3
 8005f5a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005f5e:	6053      	str	r3, [r2, #4]
 8005f60:	e00c      	b.n	8005f7c <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8005f62:	78fb      	ldrb	r3, [r7, #3]
 8005f64:	2b02      	cmp	r3, #2
 8005f66:	d107      	bne.n	8005f78 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005f6e:	461a      	mov	r2, r3
 8005f70:	f241 7370 	movw	r3, #6000	@ 0x1770
 8005f74:	6053      	str	r3, [r2, #4]
 8005f76:	e001      	b.n	8005f7c <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	e000      	b.n	8005f7e <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8005f7c:	2300      	movs	r3, #0
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3714      	adds	r7, #20
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr

08005f8a <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8005f8a:	b580      	push	{r7, lr}
 8005f8c:	b084      	sub	sp, #16
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005f96:	2300      	movs	r3, #0
 8005f98:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005faa:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	68fa      	ldr	r2, [r7, #12]
 8005fb0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005fb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005fb8:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005fba:	2064      	movs	r0, #100	@ 0x64
 8005fbc:	f7fb f816 	bl	8000fec <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	68fa      	ldr	r2, [r7, #12]
 8005fc4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005fc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005fcc:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005fce:	200a      	movs	r0, #10
 8005fd0:	f7fb f80c 	bl	8000fec <HAL_Delay>

  return HAL_OK;
 8005fd4:	2300      	movs	r3, #0
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3710      	adds	r7, #16
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}

08005fde <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005fde:	b480      	push	{r7}
 8005fe0:	b085      	sub	sp, #20
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	6078      	str	r0, [r7, #4]
 8005fe6:	460b      	mov	r3, r1
 8005fe8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006002:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800600a:	2b00      	cmp	r3, #0
 800600c:	d109      	bne.n	8006022 <USB_DriveVbus+0x44>
 800600e:	78fb      	ldrb	r3, [r7, #3]
 8006010:	2b01      	cmp	r3, #1
 8006012:	d106      	bne.n	8006022 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	68fa      	ldr	r2, [r7, #12]
 8006018:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800601c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006020:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006028:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800602c:	d109      	bne.n	8006042 <USB_DriveVbus+0x64>
 800602e:	78fb      	ldrb	r3, [r7, #3]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d106      	bne.n	8006042 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	68fa      	ldr	r2, [r7, #12]
 8006038:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800603c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006040:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006042:	2300      	movs	r3, #0
}
 8006044:	4618      	mov	r0, r3
 8006046:	3714      	adds	r7, #20
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr

08006050 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8006050:	b480      	push	{r7}
 8006052:	b085      	sub	sp, #20
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800605c:	2300      	movs	r3, #0
 800605e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	0c5b      	lsrs	r3, r3, #17
 800606e:	f003 0303 	and.w	r3, r3, #3
}
 8006072:	4618      	mov	r0, r3
 8006074:	3714      	adds	r7, #20
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr

0800607e <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800607e:	b480      	push	{r7}
 8006080:	b085      	sub	sp, #20
 8006082:	af00      	add	r7, sp, #0
 8006084:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	b29b      	uxth	r3, r3
}
 8006094:	4618      	mov	r0, r3
 8006096:	3714      	adds	r7, #20
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr

080060a0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b088      	sub	sp, #32
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	4608      	mov	r0, r1
 80060aa:	4611      	mov	r1, r2
 80060ac:	461a      	mov	r2, r3
 80060ae:	4603      	mov	r3, r0
 80060b0:	70fb      	strb	r3, [r7, #3]
 80060b2:	460b      	mov	r3, r1
 80060b4:	70bb      	strb	r3, [r7, #2]
 80060b6:	4613      	mov	r3, r2
 80060b8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80060ba:	2300      	movs	r3, #0
 80060bc:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80060c2:	78fb      	ldrb	r3, [r7, #3]
 80060c4:	015a      	lsls	r2, r3, #5
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	4413      	add	r3, r2
 80060ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060ce:	461a      	mov	r2, r3
 80060d0:	f04f 33ff 	mov.w	r3, #4294967295
 80060d4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80060d6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80060da:	2b03      	cmp	r3, #3
 80060dc:	d87c      	bhi.n	80061d8 <USB_HC_Init+0x138>
 80060de:	a201      	add	r2, pc, #4	@ (adr r2, 80060e4 <USB_HC_Init+0x44>)
 80060e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e4:	080060f5 	.word	0x080060f5
 80060e8:	0800619b 	.word	0x0800619b
 80060ec:	080060f5 	.word	0x080060f5
 80060f0:	0800615d 	.word	0x0800615d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80060f4:	78fb      	ldrb	r3, [r7, #3]
 80060f6:	015a      	lsls	r2, r3, #5
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	4413      	add	r3, r2
 80060fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006100:	461a      	mov	r2, r3
 8006102:	f240 439d 	movw	r3, #1181	@ 0x49d
 8006106:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006108:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800610c:	2b00      	cmp	r3, #0
 800610e:	da10      	bge.n	8006132 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006110:	78fb      	ldrb	r3, [r7, #3]
 8006112:	015a      	lsls	r2, r3, #5
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	4413      	add	r3, r2
 8006118:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800611c:	68db      	ldr	r3, [r3, #12]
 800611e:	78fa      	ldrb	r2, [r7, #3]
 8006120:	0151      	lsls	r1, r2, #5
 8006122:	693a      	ldr	r2, [r7, #16]
 8006124:	440a      	add	r2, r1
 8006126:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800612a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800612e:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8006130:	e055      	b.n	80061de <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a6f      	ldr	r2, [pc, #444]	@ (80062f4 <USB_HC_Init+0x254>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d151      	bne.n	80061de <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800613a:	78fb      	ldrb	r3, [r7, #3]
 800613c:	015a      	lsls	r2, r3, #5
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	4413      	add	r3, r2
 8006142:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	78fa      	ldrb	r2, [r7, #3]
 800614a:	0151      	lsls	r1, r2, #5
 800614c:	693a      	ldr	r2, [r7, #16]
 800614e:	440a      	add	r2, r1
 8006150:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006154:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006158:	60d3      	str	r3, [r2, #12]
      break;
 800615a:	e040      	b.n	80061de <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800615c:	78fb      	ldrb	r3, [r7, #3]
 800615e:	015a      	lsls	r2, r3, #5
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	4413      	add	r3, r2
 8006164:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006168:	461a      	mov	r2, r3
 800616a:	f240 639d 	movw	r3, #1693	@ 0x69d
 800616e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006170:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006174:	2b00      	cmp	r3, #0
 8006176:	da34      	bge.n	80061e2 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006178:	78fb      	ldrb	r3, [r7, #3]
 800617a:	015a      	lsls	r2, r3, #5
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	4413      	add	r3, r2
 8006180:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	78fa      	ldrb	r2, [r7, #3]
 8006188:	0151      	lsls	r1, r2, #5
 800618a:	693a      	ldr	r2, [r7, #16]
 800618c:	440a      	add	r2, r1
 800618e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006192:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006196:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006198:	e023      	b.n	80061e2 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800619a:	78fb      	ldrb	r3, [r7, #3]
 800619c:	015a      	lsls	r2, r3, #5
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	4413      	add	r3, r2
 80061a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061a6:	461a      	mov	r2, r3
 80061a8:	f240 2325 	movw	r3, #549	@ 0x225
 80061ac:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80061ae:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	da17      	bge.n	80061e6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80061b6:	78fb      	ldrb	r3, [r7, #3]
 80061b8:	015a      	lsls	r2, r3, #5
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	4413      	add	r3, r2
 80061be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	78fa      	ldrb	r2, [r7, #3]
 80061c6:	0151      	lsls	r1, r2, #5
 80061c8:	693a      	ldr	r2, [r7, #16]
 80061ca:	440a      	add	r2, r1
 80061cc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80061d0:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 80061d4:	60d3      	str	r3, [r2, #12]
      }
      break;
 80061d6:	e006      	b.n	80061e6 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 80061d8:	2301      	movs	r3, #1
 80061da:	77fb      	strb	r3, [r7, #31]
      break;
 80061dc:	e004      	b.n	80061e8 <USB_HC_Init+0x148>
      break;
 80061de:	bf00      	nop
 80061e0:	e002      	b.n	80061e8 <USB_HC_Init+0x148>
      break;
 80061e2:	bf00      	nop
 80061e4:	e000      	b.n	80061e8 <USB_HC_Init+0x148>
      break;
 80061e6:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80061e8:	78fb      	ldrb	r3, [r7, #3]
 80061ea:	015a      	lsls	r2, r3, #5
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	4413      	add	r3, r2
 80061f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061f4:	461a      	mov	r2, r3
 80061f6:	2300      	movs	r3, #0
 80061f8:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80061fa:	78fb      	ldrb	r3, [r7, #3]
 80061fc:	015a      	lsls	r2, r3, #5
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	4413      	add	r3, r2
 8006202:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006206:	68db      	ldr	r3, [r3, #12]
 8006208:	78fa      	ldrb	r2, [r7, #3]
 800620a:	0151      	lsls	r1, r2, #5
 800620c:	693a      	ldr	r2, [r7, #16]
 800620e:	440a      	add	r2, r1
 8006210:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006214:	f043 0302 	orr.w	r3, r3, #2
 8006218:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006220:	699a      	ldr	r2, [r3, #24]
 8006222:	78fb      	ldrb	r3, [r7, #3]
 8006224:	f003 030f 	and.w	r3, r3, #15
 8006228:	2101      	movs	r1, #1
 800622a:	fa01 f303 	lsl.w	r3, r1, r3
 800622e:	6939      	ldr	r1, [r7, #16]
 8006230:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8006234:	4313      	orrs	r3, r2
 8006236:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	699b      	ldr	r3, [r3, #24]
 800623c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006244:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006248:	2b00      	cmp	r3, #0
 800624a:	da03      	bge.n	8006254 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800624c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006250:	61bb      	str	r3, [r7, #24]
 8006252:	e001      	b.n	8006258 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8006254:	2300      	movs	r3, #0
 8006256:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f7ff fef9 	bl	8006050 <USB_GetHostSpeed>
 800625e:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006260:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006264:	2b02      	cmp	r3, #2
 8006266:	d106      	bne.n	8006276 <USB_HC_Init+0x1d6>
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2b02      	cmp	r3, #2
 800626c:	d003      	beq.n	8006276 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800626e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006272:	617b      	str	r3, [r7, #20]
 8006274:	e001      	b.n	800627a <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006276:	2300      	movs	r3, #0
 8006278:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800627a:	787b      	ldrb	r3, [r7, #1]
 800627c:	059b      	lsls	r3, r3, #22
 800627e:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006282:	78bb      	ldrb	r3, [r7, #2]
 8006284:	02db      	lsls	r3, r3, #11
 8006286:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800628a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800628c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006290:	049b      	lsls	r3, r3, #18
 8006292:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006296:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8006298:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800629a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800629e:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	431a      	orrs	r2, r3
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80062a8:	78fa      	ldrb	r2, [r7, #3]
 80062aa:	0151      	lsls	r1, r2, #5
 80062ac:	693a      	ldr	r2, [r7, #16]
 80062ae:	440a      	add	r2, r1
 80062b0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80062b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80062b8:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80062ba:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80062be:	2b03      	cmp	r3, #3
 80062c0:	d003      	beq.n	80062ca <USB_HC_Init+0x22a>
 80062c2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	d10f      	bne.n	80062ea <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80062ca:	78fb      	ldrb	r3, [r7, #3]
 80062cc:	015a      	lsls	r2, r3, #5
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	4413      	add	r3, r2
 80062d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	78fa      	ldrb	r2, [r7, #3]
 80062da:	0151      	lsls	r1, r2, #5
 80062dc:	693a      	ldr	r2, [r7, #16]
 80062de:	440a      	add	r2, r1
 80062e0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80062e4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80062e8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80062ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3720      	adds	r7, #32
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}
 80062f4:	40040000 	.word	0x40040000

080062f8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b08c      	sub	sp, #48	@ 0x30
 80062fc:	af02      	add	r7, sp, #8
 80062fe:	60f8      	str	r0, [r7, #12]
 8006300:	60b9      	str	r1, [r7, #8]
 8006302:	4613      	mov	r3, r2
 8006304:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	785b      	ldrb	r3, [r3, #1]
 800630e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8006310:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006314:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	4a5d      	ldr	r2, [pc, #372]	@ (8006490 <USB_HC_StartXfer+0x198>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d12f      	bne.n	800637e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800631e:	79fb      	ldrb	r3, [r7, #7]
 8006320:	2b01      	cmp	r3, #1
 8006322:	d11c      	bne.n	800635e <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	7c9b      	ldrb	r3, [r3, #18]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d003      	beq.n	8006334 <USB_HC_StartXfer+0x3c>
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	7c9b      	ldrb	r3, [r3, #18]
 8006330:	2b02      	cmp	r3, #2
 8006332:	d124      	bne.n	800637e <USB_HC_StartXfer+0x86>
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	799b      	ldrb	r3, [r3, #6]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d120      	bne.n	800637e <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	015a      	lsls	r2, r3, #5
 8006340:	6a3b      	ldr	r3, [r7, #32]
 8006342:	4413      	add	r3, r2
 8006344:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006348:	68db      	ldr	r3, [r3, #12]
 800634a:	69fa      	ldr	r2, [r7, #28]
 800634c:	0151      	lsls	r1, r2, #5
 800634e:	6a3a      	ldr	r2, [r7, #32]
 8006350:	440a      	add	r2, r1
 8006352:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006356:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800635a:	60d3      	str	r3, [r2, #12]
 800635c:	e00f      	b.n	800637e <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	791b      	ldrb	r3, [r3, #4]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d10b      	bne.n	800637e <USB_HC_StartXfer+0x86>
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	795b      	ldrb	r3, [r3, #5]
 800636a:	2b01      	cmp	r3, #1
 800636c:	d107      	bne.n	800637e <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	785b      	ldrb	r3, [r3, #1]
 8006372:	4619      	mov	r1, r3
 8006374:	68f8      	ldr	r0, [r7, #12]
 8006376:	f000 fb6b 	bl	8006a50 <USB_DoPing>
        return HAL_OK;
 800637a:	2300      	movs	r3, #0
 800637c:	e232      	b.n	80067e4 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	799b      	ldrb	r3, [r3, #6]
 8006382:	2b01      	cmp	r3, #1
 8006384:	d158      	bne.n	8006438 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8006386:	2301      	movs	r3, #1
 8006388:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	78db      	ldrb	r3, [r3, #3]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d007      	beq.n	80063a2 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006392:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006394:	68ba      	ldr	r2, [r7, #8]
 8006396:	8a92      	ldrh	r2, [r2, #20]
 8006398:	fb03 f202 	mul.w	r2, r3, r2
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	61da      	str	r2, [r3, #28]
 80063a0:	e07c      	b.n	800649c <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	7c9b      	ldrb	r3, [r3, #18]
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	d130      	bne.n	800640c <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	6a1b      	ldr	r3, [r3, #32]
 80063ae:	2bbc      	cmp	r3, #188	@ 0xbc
 80063b0:	d918      	bls.n	80063e4 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	8a9b      	ldrh	r3, [r3, #20]
 80063b6:	461a      	mov	r2, r3
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	69da      	ldr	r2, [r3, #28]
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d003      	beq.n	80063d4 <USB_HC_StartXfer+0xdc>
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	68db      	ldr	r3, [r3, #12]
 80063d0:	2b02      	cmp	r3, #2
 80063d2:	d103      	bne.n	80063dc <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	2202      	movs	r2, #2
 80063d8:	60da      	str	r2, [r3, #12]
 80063da:	e05f      	b.n	800649c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	2201      	movs	r2, #1
 80063e0:	60da      	str	r2, [r3, #12]
 80063e2:	e05b      	b.n	800649c <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	6a1a      	ldr	r2, [r3, #32]
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d007      	beq.n	8006404 <USB_HC_StartXfer+0x10c>
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	2b02      	cmp	r3, #2
 80063fa:	d003      	beq.n	8006404 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	2204      	movs	r2, #4
 8006400:	60da      	str	r2, [r3, #12]
 8006402:	e04b      	b.n	800649c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	2203      	movs	r2, #3
 8006408:	60da      	str	r2, [r3, #12]
 800640a:	e047      	b.n	800649c <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800640c:	79fb      	ldrb	r3, [r7, #7]
 800640e:	2b01      	cmp	r3, #1
 8006410:	d10d      	bne.n	800642e <USB_HC_StartXfer+0x136>
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	6a1b      	ldr	r3, [r3, #32]
 8006416:	68ba      	ldr	r2, [r7, #8]
 8006418:	8a92      	ldrh	r2, [r2, #20]
 800641a:	4293      	cmp	r3, r2
 800641c:	d907      	bls.n	800642e <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800641e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006420:	68ba      	ldr	r2, [r7, #8]
 8006422:	8a92      	ldrh	r2, [r2, #20]
 8006424:	fb03 f202 	mul.w	r2, r3, r2
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	61da      	str	r2, [r3, #28]
 800642c:	e036      	b.n	800649c <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	6a1a      	ldr	r2, [r3, #32]
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	61da      	str	r2, [r3, #28]
 8006436:	e031      	b.n	800649c <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	6a1b      	ldr	r3, [r3, #32]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d018      	beq.n	8006472 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	6a1b      	ldr	r3, [r3, #32]
 8006444:	68ba      	ldr	r2, [r7, #8]
 8006446:	8a92      	ldrh	r2, [r2, #20]
 8006448:	4413      	add	r3, r2
 800644a:	3b01      	subs	r3, #1
 800644c:	68ba      	ldr	r2, [r7, #8]
 800644e:	8a92      	ldrh	r2, [r2, #20]
 8006450:	fbb3 f3f2 	udiv	r3, r3, r2
 8006454:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8006456:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006458:	8b7b      	ldrh	r3, [r7, #26]
 800645a:	429a      	cmp	r2, r3
 800645c:	d90b      	bls.n	8006476 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800645e:	8b7b      	ldrh	r3, [r7, #26]
 8006460:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006462:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006464:	68ba      	ldr	r2, [r7, #8]
 8006466:	8a92      	ldrh	r2, [r2, #20]
 8006468:	fb03 f202 	mul.w	r2, r3, r2
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	61da      	str	r2, [r3, #28]
 8006470:	e001      	b.n	8006476 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8006472:	2301      	movs	r3, #1
 8006474:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	78db      	ldrb	r3, [r3, #3]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d00a      	beq.n	8006494 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800647e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006480:	68ba      	ldr	r2, [r7, #8]
 8006482:	8a92      	ldrh	r2, [r2, #20]
 8006484:	fb03 f202 	mul.w	r2, r3, r2
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	61da      	str	r2, [r3, #28]
 800648c:	e006      	b.n	800649c <USB_HC_StartXfer+0x1a4>
 800648e:	bf00      	nop
 8006490:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	6a1a      	ldr	r2, [r3, #32]
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	69db      	ldr	r3, [r3, #28]
 80064a0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80064a4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80064a6:	04d9      	lsls	r1, r3, #19
 80064a8:	4ba3      	ldr	r3, [pc, #652]	@ (8006738 <USB_HC_StartXfer+0x440>)
 80064aa:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80064ac:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	7d9b      	ldrb	r3, [r3, #22]
 80064b2:	075b      	lsls	r3, r3, #29
 80064b4:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80064b8:	69f9      	ldr	r1, [r7, #28]
 80064ba:	0148      	lsls	r0, r1, #5
 80064bc:	6a39      	ldr	r1, [r7, #32]
 80064be:	4401      	add	r1, r0
 80064c0:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80064c4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80064c6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80064c8:	79fb      	ldrb	r3, [r7, #7]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d009      	beq.n	80064e2 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	6999      	ldr	r1, [r3, #24]
 80064d2:	69fb      	ldr	r3, [r7, #28]
 80064d4:	015a      	lsls	r2, r3, #5
 80064d6:	6a3b      	ldr	r3, [r7, #32]
 80064d8:	4413      	add	r3, r2
 80064da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064de:	460a      	mov	r2, r1
 80064e0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80064e2:	6a3b      	ldr	r3, [r7, #32]
 80064e4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	f003 0301 	and.w	r3, r3, #1
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	bf0c      	ite	eq
 80064f2:	2301      	moveq	r3, #1
 80064f4:	2300      	movne	r3, #0
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80064fa:	69fb      	ldr	r3, [r7, #28]
 80064fc:	015a      	lsls	r2, r3, #5
 80064fe:	6a3b      	ldr	r3, [r7, #32]
 8006500:	4413      	add	r3, r2
 8006502:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	69fa      	ldr	r2, [r7, #28]
 800650a:	0151      	lsls	r1, r2, #5
 800650c:	6a3a      	ldr	r2, [r7, #32]
 800650e:	440a      	add	r2, r1
 8006510:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006514:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006518:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800651a:	69fb      	ldr	r3, [r7, #28]
 800651c:	015a      	lsls	r2, r3, #5
 800651e:	6a3b      	ldr	r3, [r7, #32]
 8006520:	4413      	add	r3, r2
 8006522:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	7e7b      	ldrb	r3, [r7, #25]
 800652a:	075b      	lsls	r3, r3, #29
 800652c:	69f9      	ldr	r1, [r7, #28]
 800652e:	0148      	lsls	r0, r1, #5
 8006530:	6a39      	ldr	r1, [r7, #32]
 8006532:	4401      	add	r1, r0
 8006534:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8006538:	4313      	orrs	r3, r2
 800653a:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	799b      	ldrb	r3, [r3, #6]
 8006540:	2b01      	cmp	r3, #1
 8006542:	f040 80c3 	bne.w	80066cc <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	7c5b      	ldrb	r3, [r3, #17]
 800654a:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800654c:	68ba      	ldr	r2, [r7, #8]
 800654e:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006550:	4313      	orrs	r3, r2
 8006552:	69fa      	ldr	r2, [r7, #28]
 8006554:	0151      	lsls	r1, r2, #5
 8006556:	6a3a      	ldr	r2, [r7, #32]
 8006558:	440a      	add	r2, r1
 800655a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800655e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006562:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8006564:	69fb      	ldr	r3, [r7, #28]
 8006566:	015a      	lsls	r2, r3, #5
 8006568:	6a3b      	ldr	r3, [r7, #32]
 800656a:	4413      	add	r3, r2
 800656c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006570:	68db      	ldr	r3, [r3, #12]
 8006572:	69fa      	ldr	r2, [r7, #28]
 8006574:	0151      	lsls	r1, r2, #5
 8006576:	6a3a      	ldr	r2, [r7, #32]
 8006578:	440a      	add	r2, r1
 800657a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800657e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006582:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	79db      	ldrb	r3, [r3, #7]
 8006588:	2b01      	cmp	r3, #1
 800658a:	d123      	bne.n	80065d4 <USB_HC_StartXfer+0x2dc>
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	78db      	ldrb	r3, [r3, #3]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d11f      	bne.n	80065d4 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006594:	69fb      	ldr	r3, [r7, #28]
 8006596:	015a      	lsls	r2, r3, #5
 8006598:	6a3b      	ldr	r3, [r7, #32]
 800659a:	4413      	add	r3, r2
 800659c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	69fa      	ldr	r2, [r7, #28]
 80065a4:	0151      	lsls	r1, r2, #5
 80065a6:	6a3a      	ldr	r2, [r7, #32]
 80065a8:	440a      	add	r2, r1
 80065aa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80065ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065b2:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80065b4:	69fb      	ldr	r3, [r7, #28]
 80065b6:	015a      	lsls	r2, r3, #5
 80065b8:	6a3b      	ldr	r3, [r7, #32]
 80065ba:	4413      	add	r3, r2
 80065bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065c0:	68db      	ldr	r3, [r3, #12]
 80065c2:	69fa      	ldr	r2, [r7, #28]
 80065c4:	0151      	lsls	r1, r2, #5
 80065c6:	6a3a      	ldr	r2, [r7, #32]
 80065c8:	440a      	add	r2, r1
 80065ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80065ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80065d2:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	7c9b      	ldrb	r3, [r3, #18]
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d003      	beq.n	80065e4 <USB_HC_StartXfer+0x2ec>
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	7c9b      	ldrb	r3, [r3, #18]
 80065e0:	2b03      	cmp	r3, #3
 80065e2:	d117      	bne.n	8006614 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d113      	bne.n	8006614 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	78db      	ldrb	r3, [r3, #3]
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d10f      	bne.n	8006614 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80065f4:	69fb      	ldr	r3, [r7, #28]
 80065f6:	015a      	lsls	r2, r3, #5
 80065f8:	6a3b      	ldr	r3, [r7, #32]
 80065fa:	4413      	add	r3, r2
 80065fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	69fa      	ldr	r2, [r7, #28]
 8006604:	0151      	lsls	r1, r2, #5
 8006606:	6a3a      	ldr	r2, [r7, #32]
 8006608:	440a      	add	r2, r1
 800660a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800660e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006612:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	7c9b      	ldrb	r3, [r3, #18]
 8006618:	2b01      	cmp	r3, #1
 800661a:	d162      	bne.n	80066e2 <USB_HC_StartXfer+0x3ea>
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	78db      	ldrb	r3, [r3, #3]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d15e      	bne.n	80066e2 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	68db      	ldr	r3, [r3, #12]
 8006628:	3b01      	subs	r3, #1
 800662a:	2b03      	cmp	r3, #3
 800662c:	d858      	bhi.n	80066e0 <USB_HC_StartXfer+0x3e8>
 800662e:	a201      	add	r2, pc, #4	@ (adr r2, 8006634 <USB_HC_StartXfer+0x33c>)
 8006630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006634:	08006645 	.word	0x08006645
 8006638:	08006667 	.word	0x08006667
 800663c:	08006689 	.word	0x08006689
 8006640:	080066ab 	.word	0x080066ab
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8006644:	69fb      	ldr	r3, [r7, #28]
 8006646:	015a      	lsls	r2, r3, #5
 8006648:	6a3b      	ldr	r3, [r7, #32]
 800664a:	4413      	add	r3, r2
 800664c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	69fa      	ldr	r2, [r7, #28]
 8006654:	0151      	lsls	r1, r2, #5
 8006656:	6a3a      	ldr	r2, [r7, #32]
 8006658:	440a      	add	r2, r1
 800665a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800665e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006662:	6053      	str	r3, [r2, #4]
          break;
 8006664:	e03d      	b.n	80066e2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8006666:	69fb      	ldr	r3, [r7, #28]
 8006668:	015a      	lsls	r2, r3, #5
 800666a:	6a3b      	ldr	r3, [r7, #32]
 800666c:	4413      	add	r3, r2
 800666e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	69fa      	ldr	r2, [r7, #28]
 8006676:	0151      	lsls	r1, r2, #5
 8006678:	6a3a      	ldr	r2, [r7, #32]
 800667a:	440a      	add	r2, r1
 800667c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006680:	f043 030e 	orr.w	r3, r3, #14
 8006684:	6053      	str	r3, [r2, #4]
          break;
 8006686:	e02c      	b.n	80066e2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8006688:	69fb      	ldr	r3, [r7, #28]
 800668a:	015a      	lsls	r2, r3, #5
 800668c:	6a3b      	ldr	r3, [r7, #32]
 800668e:	4413      	add	r3, r2
 8006690:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	69fa      	ldr	r2, [r7, #28]
 8006698:	0151      	lsls	r1, r2, #5
 800669a:	6a3a      	ldr	r2, [r7, #32]
 800669c:	440a      	add	r2, r1
 800669e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80066a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80066a6:	6053      	str	r3, [r2, #4]
          break;
 80066a8:	e01b      	b.n	80066e2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 80066aa:	69fb      	ldr	r3, [r7, #28]
 80066ac:	015a      	lsls	r2, r3, #5
 80066ae:	6a3b      	ldr	r3, [r7, #32]
 80066b0:	4413      	add	r3, r2
 80066b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	69fa      	ldr	r2, [r7, #28]
 80066ba:	0151      	lsls	r1, r2, #5
 80066bc:	6a3a      	ldr	r2, [r7, #32]
 80066be:	440a      	add	r2, r1
 80066c0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80066c4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80066c8:	6053      	str	r3, [r2, #4]
          break;
 80066ca:	e00a      	b.n	80066e2 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80066cc:	69fb      	ldr	r3, [r7, #28]
 80066ce:	015a      	lsls	r2, r3, #5
 80066d0:	6a3b      	ldr	r3, [r7, #32]
 80066d2:	4413      	add	r3, r2
 80066d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066d8:	461a      	mov	r2, r3
 80066da:	2300      	movs	r3, #0
 80066dc:	6053      	str	r3, [r2, #4]
 80066de:	e000      	b.n	80066e2 <USB_HC_StartXfer+0x3ea>
          break;
 80066e0:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	015a      	lsls	r2, r3, #5
 80066e6:	6a3b      	ldr	r3, [r7, #32]
 80066e8:	4413      	add	r3, r2
 80066ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80066f8:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	78db      	ldrb	r3, [r3, #3]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d004      	beq.n	800670c <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006708:	613b      	str	r3, [r7, #16]
 800670a:	e003      	b.n	8006714 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006712:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800671a:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800671c:	69fb      	ldr	r3, [r7, #28]
 800671e:	015a      	lsls	r2, r3, #5
 8006720:	6a3b      	ldr	r3, [r7, #32]
 8006722:	4413      	add	r3, r2
 8006724:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006728:	461a      	mov	r2, r3
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800672e:	79fb      	ldrb	r3, [r7, #7]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d003      	beq.n	800673c <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8006734:	2300      	movs	r3, #0
 8006736:	e055      	b.n	80067e4 <USB_HC_StartXfer+0x4ec>
 8006738:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	78db      	ldrb	r3, [r3, #3]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d14e      	bne.n	80067e2 <USB_HC_StartXfer+0x4ea>
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	6a1b      	ldr	r3, [r3, #32]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d04a      	beq.n	80067e2 <USB_HC_StartXfer+0x4ea>
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	79db      	ldrb	r3, [r3, #7]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d146      	bne.n	80067e2 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	7c9b      	ldrb	r3, [r3, #18]
 8006758:	2b03      	cmp	r3, #3
 800675a:	d831      	bhi.n	80067c0 <USB_HC_StartXfer+0x4c8>
 800675c:	a201      	add	r2, pc, #4	@ (adr r2, 8006764 <USB_HC_StartXfer+0x46c>)
 800675e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006762:	bf00      	nop
 8006764:	08006775 	.word	0x08006775
 8006768:	08006799 	.word	0x08006799
 800676c:	08006775 	.word	0x08006775
 8006770:	08006799 	.word	0x08006799
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	6a1b      	ldr	r3, [r3, #32]
 8006778:	3303      	adds	r3, #3
 800677a:	089b      	lsrs	r3, r3, #2
 800677c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800677e:	8afa      	ldrh	r2, [r7, #22]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006784:	b29b      	uxth	r3, r3
 8006786:	429a      	cmp	r2, r3
 8006788:	d91c      	bls.n	80067c4 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	699b      	ldr	r3, [r3, #24]
 800678e:	f043 0220 	orr.w	r2, r3, #32
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	619a      	str	r2, [r3, #24]
        }
        break;
 8006796:	e015      	b.n	80067c4 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	6a1b      	ldr	r3, [r3, #32]
 800679c:	3303      	adds	r3, #3
 800679e:	089b      	lsrs	r3, r3, #2
 80067a0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80067a2:	8afa      	ldrh	r2, [r7, #22]
 80067a4:	6a3b      	ldr	r3, [r7, #32]
 80067a6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80067aa:	691b      	ldr	r3, [r3, #16]
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d90a      	bls.n	80067c8 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	699b      	ldr	r3, [r3, #24]
 80067b6:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	619a      	str	r2, [r3, #24]
        }
        break;
 80067be:	e003      	b.n	80067c8 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 80067c0:	bf00      	nop
 80067c2:	e002      	b.n	80067ca <USB_HC_StartXfer+0x4d2>
        break;
 80067c4:	bf00      	nop
 80067c6:	e000      	b.n	80067ca <USB_HC_StartXfer+0x4d2>
        break;
 80067c8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	6999      	ldr	r1, [r3, #24]
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	785a      	ldrb	r2, [r3, #1]
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	6a1b      	ldr	r3, [r3, #32]
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	2000      	movs	r0, #0
 80067da:	9000      	str	r0, [sp, #0]
 80067dc:	68f8      	ldr	r0, [r7, #12]
 80067de:	f7ff f9c9 	bl	8005b74 <USB_WritePacket>
  }

  return HAL_OK;
 80067e2:	2300      	movs	r3, #0
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3728      	adds	r7, #40	@ 0x28
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}

080067ec <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b085      	sub	sp, #20
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80067fe:	695b      	ldr	r3, [r3, #20]
 8006800:	b29b      	uxth	r3, r3
}
 8006802:	4618      	mov	r0, r3
 8006804:	3714      	adds	r7, #20
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr

0800680e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800680e:	b480      	push	{r7}
 8006810:	b089      	sub	sp, #36	@ 0x24
 8006812:	af00      	add	r7, sp, #0
 8006814:	6078      	str	r0, [r7, #4]
 8006816:	460b      	mov	r3, r1
 8006818:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800681e:	78fb      	ldrb	r3, [r7, #3]
 8006820:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006822:	2300      	movs	r3, #0
 8006824:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006826:	69bb      	ldr	r3, [r7, #24]
 8006828:	015a      	lsls	r2, r3, #5
 800682a:	69fb      	ldr	r3, [r7, #28]
 800682c:	4413      	add	r3, r2
 800682e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	0c9b      	lsrs	r3, r3, #18
 8006836:	f003 0303 	and.w	r3, r3, #3
 800683a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800683c:	69bb      	ldr	r3, [r7, #24]
 800683e:	015a      	lsls	r2, r3, #5
 8006840:	69fb      	ldr	r3, [r7, #28]
 8006842:	4413      	add	r3, r2
 8006844:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	0fdb      	lsrs	r3, r3, #31
 800684c:	f003 0301 	and.w	r3, r3, #1
 8006850:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8006852:	69bb      	ldr	r3, [r7, #24]
 8006854:	015a      	lsls	r2, r3, #5
 8006856:	69fb      	ldr	r3, [r7, #28]
 8006858:	4413      	add	r3, r2
 800685a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	0fdb      	lsrs	r3, r3, #31
 8006862:	f003 0301 	and.w	r3, r3, #1
 8006866:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	f003 0320 	and.w	r3, r3, #32
 8006870:	2b20      	cmp	r3, #32
 8006872:	d10d      	bne.n	8006890 <USB_HC_Halt+0x82>
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d10a      	bne.n	8006890 <USB_HC_Halt+0x82>
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d005      	beq.n	800688c <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	2b01      	cmp	r3, #1
 8006884:	d002      	beq.n	800688c <USB_HC_Halt+0x7e>
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	2b03      	cmp	r3, #3
 800688a:	d101      	bne.n	8006890 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800688c:	2300      	movs	r3, #0
 800688e:	e0d8      	b.n	8006a42 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d002      	beq.n	800689c <USB_HC_Halt+0x8e>
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	2b02      	cmp	r3, #2
 800689a:	d173      	bne.n	8006984 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800689c:	69bb      	ldr	r3, [r7, #24]
 800689e:	015a      	lsls	r2, r3, #5
 80068a0:	69fb      	ldr	r3, [r7, #28]
 80068a2:	4413      	add	r3, r2
 80068a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	69ba      	ldr	r2, [r7, #24]
 80068ac:	0151      	lsls	r1, r2, #5
 80068ae:	69fa      	ldr	r2, [r7, #28]
 80068b0:	440a      	add	r2, r1
 80068b2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80068b6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80068ba:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	f003 0320 	and.w	r3, r3, #32
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d14a      	bne.n	800695e <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068cc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d133      	bne.n	800693c <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80068d4:	69bb      	ldr	r3, [r7, #24]
 80068d6:	015a      	lsls	r2, r3, #5
 80068d8:	69fb      	ldr	r3, [r7, #28]
 80068da:	4413      	add	r3, r2
 80068dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	69ba      	ldr	r2, [r7, #24]
 80068e4:	0151      	lsls	r1, r2, #5
 80068e6:	69fa      	ldr	r2, [r7, #28]
 80068e8:	440a      	add	r2, r1
 80068ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80068ee:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80068f2:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80068f4:	69bb      	ldr	r3, [r7, #24]
 80068f6:	015a      	lsls	r2, r3, #5
 80068f8:	69fb      	ldr	r3, [r7, #28]
 80068fa:	4413      	add	r3, r2
 80068fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	69ba      	ldr	r2, [r7, #24]
 8006904:	0151      	lsls	r1, r2, #5
 8006906:	69fa      	ldr	r2, [r7, #28]
 8006908:	440a      	add	r2, r1
 800690a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800690e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006912:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	3301      	adds	r3, #1
 8006918:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006920:	d82e      	bhi.n	8006980 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006922:	69bb      	ldr	r3, [r7, #24]
 8006924:	015a      	lsls	r2, r3, #5
 8006926:	69fb      	ldr	r3, [r7, #28]
 8006928:	4413      	add	r3, r2
 800692a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006934:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006938:	d0ec      	beq.n	8006914 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800693a:	e081      	b.n	8006a40 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800693c:	69bb      	ldr	r3, [r7, #24]
 800693e:	015a      	lsls	r2, r3, #5
 8006940:	69fb      	ldr	r3, [r7, #28]
 8006942:	4413      	add	r3, r2
 8006944:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	69ba      	ldr	r2, [r7, #24]
 800694c:	0151      	lsls	r1, r2, #5
 800694e:	69fa      	ldr	r2, [r7, #28]
 8006950:	440a      	add	r2, r1
 8006952:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006956:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800695a:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800695c:	e070      	b.n	8006a40 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800695e:	69bb      	ldr	r3, [r7, #24]
 8006960:	015a      	lsls	r2, r3, #5
 8006962:	69fb      	ldr	r3, [r7, #28]
 8006964:	4413      	add	r3, r2
 8006966:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	69ba      	ldr	r2, [r7, #24]
 800696e:	0151      	lsls	r1, r2, #5
 8006970:	69fa      	ldr	r2, [r7, #28]
 8006972:	440a      	add	r2, r1
 8006974:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006978:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800697c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800697e:	e05f      	b.n	8006a40 <USB_HC_Halt+0x232>
            break;
 8006980:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006982:	e05d      	b.n	8006a40 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006984:	69bb      	ldr	r3, [r7, #24]
 8006986:	015a      	lsls	r2, r3, #5
 8006988:	69fb      	ldr	r3, [r7, #28]
 800698a:	4413      	add	r3, r2
 800698c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	69ba      	ldr	r2, [r7, #24]
 8006994:	0151      	lsls	r1, r2, #5
 8006996:	69fa      	ldr	r2, [r7, #28]
 8006998:	440a      	add	r2, r1
 800699a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800699e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80069a2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80069a4:	69fb      	ldr	r3, [r7, #28]
 80069a6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80069aa:	691b      	ldr	r3, [r3, #16]
 80069ac:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d133      	bne.n	8006a1c <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80069b4:	69bb      	ldr	r3, [r7, #24]
 80069b6:	015a      	lsls	r2, r3, #5
 80069b8:	69fb      	ldr	r3, [r7, #28]
 80069ba:	4413      	add	r3, r2
 80069bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	69ba      	ldr	r2, [r7, #24]
 80069c4:	0151      	lsls	r1, r2, #5
 80069c6:	69fa      	ldr	r2, [r7, #28]
 80069c8:	440a      	add	r2, r1
 80069ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80069ce:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80069d2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80069d4:	69bb      	ldr	r3, [r7, #24]
 80069d6:	015a      	lsls	r2, r3, #5
 80069d8:	69fb      	ldr	r3, [r7, #28]
 80069da:	4413      	add	r3, r2
 80069dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	69ba      	ldr	r2, [r7, #24]
 80069e4:	0151      	lsls	r1, r2, #5
 80069e6:	69fa      	ldr	r2, [r7, #28]
 80069e8:	440a      	add	r2, r1
 80069ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80069ee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80069f2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	3301      	adds	r3, #1
 80069f8:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006a00:	d81d      	bhi.n	8006a3e <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006a02:	69bb      	ldr	r3, [r7, #24]
 8006a04:	015a      	lsls	r2, r3, #5
 8006a06:	69fb      	ldr	r3, [r7, #28]
 8006a08:	4413      	add	r3, r2
 8006a0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006a14:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006a18:	d0ec      	beq.n	80069f4 <USB_HC_Halt+0x1e6>
 8006a1a:	e011      	b.n	8006a40 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006a1c:	69bb      	ldr	r3, [r7, #24]
 8006a1e:	015a      	lsls	r2, r3, #5
 8006a20:	69fb      	ldr	r3, [r7, #28]
 8006a22:	4413      	add	r3, r2
 8006a24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	69ba      	ldr	r2, [r7, #24]
 8006a2c:	0151      	lsls	r1, r2, #5
 8006a2e:	69fa      	ldr	r2, [r7, #28]
 8006a30:	440a      	add	r2, r1
 8006a32:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006a36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006a3a:	6013      	str	r3, [r2, #0]
 8006a3c:	e000      	b.n	8006a40 <USB_HC_Halt+0x232>
          break;
 8006a3e:	bf00      	nop
    }
  }

  return HAL_OK;
 8006a40:	2300      	movs	r3, #0
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3724      	adds	r7, #36	@ 0x24
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr
	...

08006a50 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b087      	sub	sp, #28
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	460b      	mov	r3, r1
 8006a5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006a60:	78fb      	ldrb	r3, [r7, #3]
 8006a62:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006a64:	2301      	movs	r3, #1
 8006a66:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	04da      	lsls	r2, r3, #19
 8006a6c:	4b15      	ldr	r3, [pc, #84]	@ (8006ac4 <USB_DoPing+0x74>)
 8006a6e:	4013      	ands	r3, r2
 8006a70:	693a      	ldr	r2, [r7, #16]
 8006a72:	0151      	lsls	r1, r2, #5
 8006a74:	697a      	ldr	r2, [r7, #20]
 8006a76:	440a      	add	r2, r1
 8006a78:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006a7c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006a80:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	015a      	lsls	r2, r3, #5
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	4413      	add	r3, r2
 8006a8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006a98:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006aa0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	015a      	lsls	r2, r3, #5
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	4413      	add	r3, r2
 8006aaa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006aae:	461a      	mov	r2, r3
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006ab4:	2300      	movs	r3, #0
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	371c      	adds	r7, #28
 8006aba:	46bd      	mov	sp, r7
 8006abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac0:	4770      	bx	lr
 8006ac2:	bf00      	nop
 8006ac4:	1ff80000 	.word	0x1ff80000

08006ac8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b088      	sub	sp, #32
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f7fe ff8c 	bl	80059fa <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006ae2:	2110      	movs	r1, #16
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f7fe ffe5 	bl	8005ab4 <USB_FlushTxFifo>
 8006aea:	4603      	mov	r3, r0
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d001      	beq.n	8006af4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006af0:	2301      	movs	r3, #1
 8006af2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f7ff f80f 	bl	8005b18 <USB_FlushRxFifo>
 8006afa:	4603      	mov	r3, r0
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d001      	beq.n	8006b04 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006b00:	2301      	movs	r3, #1
 8006b02:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006b04:	2300      	movs	r3, #0
 8006b06:	61bb      	str	r3, [r7, #24]
 8006b08:	e01f      	b.n	8006b4a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006b0a:	69bb      	ldr	r3, [r7, #24]
 8006b0c:	015a      	lsls	r2, r3, #5
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	4413      	add	r3, r2
 8006b12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006b20:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006b28:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006b30:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006b32:	69bb      	ldr	r3, [r7, #24]
 8006b34:	015a      	lsls	r2, r3, #5
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	4413      	add	r3, r2
 8006b3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b3e:	461a      	mov	r2, r3
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006b44:	69bb      	ldr	r3, [r7, #24]
 8006b46:	3301      	adds	r3, #1
 8006b48:	61bb      	str	r3, [r7, #24]
 8006b4a:	69bb      	ldr	r3, [r7, #24]
 8006b4c:	2b0f      	cmp	r3, #15
 8006b4e:	d9dc      	bls.n	8006b0a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006b50:	2300      	movs	r3, #0
 8006b52:	61bb      	str	r3, [r7, #24]
 8006b54:	e034      	b.n	8006bc0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006b56:	69bb      	ldr	r3, [r7, #24]
 8006b58:	015a      	lsls	r2, r3, #5
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	4413      	add	r3, r2
 8006b5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006b6c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006b74:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006b7c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006b7e:	69bb      	ldr	r3, [r7, #24]
 8006b80:	015a      	lsls	r2, r3, #5
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	4413      	add	r3, r2
 8006b86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	3301      	adds	r3, #1
 8006b94:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006b9c:	d80c      	bhi.n	8006bb8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006b9e:	69bb      	ldr	r3, [r7, #24]
 8006ba0:	015a      	lsls	r2, r3, #5
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	4413      	add	r3, r2
 8006ba6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006bb0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006bb4:	d0ec      	beq.n	8006b90 <USB_StopHost+0xc8>
 8006bb6:	e000      	b.n	8006bba <USB_StopHost+0xf2>
        break;
 8006bb8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006bba:	69bb      	ldr	r3, [r7, #24]
 8006bbc:	3301      	adds	r3, #1
 8006bbe:	61bb      	str	r3, [r7, #24]
 8006bc0:	69bb      	ldr	r3, [r7, #24]
 8006bc2:	2b0f      	cmp	r3, #15
 8006bc4:	d9c7      	bls.n	8006b56 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006bcc:	461a      	mov	r2, r3
 8006bce:	f04f 33ff 	mov.w	r3, #4294967295
 8006bd2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f04f 32ff 	mov.w	r2, #4294967295
 8006bda:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f7fe fefb 	bl	80059d8 <USB_EnableGlobalInt>

  return ret;
 8006be2:	7ffb      	ldrb	r3, [r7, #31]
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3720      	adds	r7, #32
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}

08006bec <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006bec:	b590      	push	{r4, r7, lr}
 8006bee:	b089      	sub	sp, #36	@ 0x24
 8006bf0:	af04      	add	r7, sp, #16
 8006bf2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	2202      	movs	r2, #2
 8006bf8:	2102      	movs	r1, #2
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f000 fc85 	bl	800750a <USBH_FindInterface>
 8006c00:	4603      	mov	r3, r0
 8006c02:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006c04:	7bfb      	ldrb	r3, [r7, #15]
 8006c06:	2bff      	cmp	r3, #255	@ 0xff
 8006c08:	d002      	beq.n	8006c10 <USBH_CDC_InterfaceInit+0x24>
 8006c0a:	7bfb      	ldrb	r3, [r7, #15]
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d901      	bls.n	8006c14 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006c10:	2302      	movs	r3, #2
 8006c12:	e13d      	b.n	8006e90 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006c14:	7bfb      	ldrb	r3, [r7, #15]
 8006c16:	4619      	mov	r1, r3
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f000 fc5a 	bl	80074d2 <USBH_SelectInterface>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006c22:	7bbb      	ldrb	r3, [r7, #14]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d001      	beq.n	8006c2c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006c28:	2302      	movs	r3, #2
 8006c2a:	e131      	b.n	8006e90 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8006c32:	2050      	movs	r0, #80	@ 0x50
 8006c34:	f002 fb64 	bl	8009300 <malloc>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006c42:	69db      	ldr	r3, [r3, #28]
 8006c44:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d101      	bne.n	8006c50 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006c4c:	2302      	movs	r3, #2
 8006c4e:	e11f      	b.n	8006e90 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006c50:	2250      	movs	r2, #80	@ 0x50
 8006c52:	2100      	movs	r1, #0
 8006c54:	68b8      	ldr	r0, [r7, #8]
 8006c56:	f002 fc11 	bl	800947c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006c5a:	7bfb      	ldrb	r3, [r7, #15]
 8006c5c:	687a      	ldr	r2, [r7, #4]
 8006c5e:	211a      	movs	r1, #26
 8006c60:	fb01 f303 	mul.w	r3, r1, r3
 8006c64:	4413      	add	r3, r2
 8006c66:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006c6a:	781b      	ldrb	r3, [r3, #0]
 8006c6c:	b25b      	sxtb	r3, r3
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	da15      	bge.n	8006c9e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006c72:	7bfb      	ldrb	r3, [r7, #15]
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	211a      	movs	r1, #26
 8006c78:	fb01 f303 	mul.w	r3, r1, r3
 8006c7c:	4413      	add	r3, r2
 8006c7e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006c82:	781a      	ldrb	r2, [r3, #0]
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006c88:	7bfb      	ldrb	r3, [r7, #15]
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	211a      	movs	r1, #26
 8006c8e:	fb01 f303 	mul.w	r3, r1, r3
 8006c92:	4413      	add	r3, r2
 8006c94:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006c98:	881a      	ldrh	r2, [r3, #0]
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	785b      	ldrb	r3, [r3, #1]
 8006ca2:	4619      	mov	r1, r3
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f001 ffbe 	bl	8008c26 <USBH_AllocPipe>
 8006caa:	4603      	mov	r3, r0
 8006cac:	461a      	mov	r2, r3
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	7819      	ldrb	r1, [r3, #0]
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	7858      	ldrb	r0, [r3, #1]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006cc6:	68ba      	ldr	r2, [r7, #8]
 8006cc8:	8952      	ldrh	r2, [r2, #10]
 8006cca:	9202      	str	r2, [sp, #8]
 8006ccc:	2203      	movs	r2, #3
 8006cce:	9201      	str	r2, [sp, #4]
 8006cd0:	9300      	str	r3, [sp, #0]
 8006cd2:	4623      	mov	r3, r4
 8006cd4:	4602      	mov	r2, r0
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f001 ff76 	bl	8008bc8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	4619      	mov	r1, r3
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f002 fa85 	bl	80091f4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006cea:	2300      	movs	r3, #0
 8006cec:	2200      	movs	r2, #0
 8006cee:	210a      	movs	r1, #10
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f000 fc0a 	bl	800750a <USBH_FindInterface>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006cfa:	7bfb      	ldrb	r3, [r7, #15]
 8006cfc:	2bff      	cmp	r3, #255	@ 0xff
 8006cfe:	d002      	beq.n	8006d06 <USBH_CDC_InterfaceInit+0x11a>
 8006d00:	7bfb      	ldrb	r3, [r7, #15]
 8006d02:	2b01      	cmp	r3, #1
 8006d04:	d901      	bls.n	8006d0a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006d06:	2302      	movs	r3, #2
 8006d08:	e0c2      	b.n	8006e90 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006d0a:	7bfb      	ldrb	r3, [r7, #15]
 8006d0c:	687a      	ldr	r2, [r7, #4]
 8006d0e:	211a      	movs	r1, #26
 8006d10:	fb01 f303 	mul.w	r3, r1, r3
 8006d14:	4413      	add	r3, r2
 8006d16:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	b25b      	sxtb	r3, r3
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	da16      	bge.n	8006d50 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006d22:	7bfb      	ldrb	r3, [r7, #15]
 8006d24:	687a      	ldr	r2, [r7, #4]
 8006d26:	211a      	movs	r1, #26
 8006d28:	fb01 f303 	mul.w	r3, r1, r3
 8006d2c:	4413      	add	r3, r2
 8006d2e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006d32:	781a      	ldrb	r2, [r3, #0]
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006d38:	7bfb      	ldrb	r3, [r7, #15]
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	211a      	movs	r1, #26
 8006d3e:	fb01 f303 	mul.w	r3, r1, r3
 8006d42:	4413      	add	r3, r2
 8006d44:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006d48:	881a      	ldrh	r2, [r3, #0]
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	835a      	strh	r2, [r3, #26]
 8006d4e:	e015      	b.n	8006d7c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006d50:	7bfb      	ldrb	r3, [r7, #15]
 8006d52:	687a      	ldr	r2, [r7, #4]
 8006d54:	211a      	movs	r1, #26
 8006d56:	fb01 f303 	mul.w	r3, r1, r3
 8006d5a:	4413      	add	r3, r2
 8006d5c:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006d60:	781a      	ldrb	r2, [r3, #0]
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006d66:	7bfb      	ldrb	r3, [r7, #15]
 8006d68:	687a      	ldr	r2, [r7, #4]
 8006d6a:	211a      	movs	r1, #26
 8006d6c:	fb01 f303 	mul.w	r3, r1, r3
 8006d70:	4413      	add	r3, r2
 8006d72:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006d76:	881a      	ldrh	r2, [r3, #0]
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006d7c:	7bfb      	ldrb	r3, [r7, #15]
 8006d7e:	687a      	ldr	r2, [r7, #4]
 8006d80:	211a      	movs	r1, #26
 8006d82:	fb01 f303 	mul.w	r3, r1, r3
 8006d86:	4413      	add	r3, r2
 8006d88:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006d8c:	781b      	ldrb	r3, [r3, #0]
 8006d8e:	b25b      	sxtb	r3, r3
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	da16      	bge.n	8006dc2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006d94:	7bfb      	ldrb	r3, [r7, #15]
 8006d96:	687a      	ldr	r2, [r7, #4]
 8006d98:	211a      	movs	r1, #26
 8006d9a:	fb01 f303 	mul.w	r3, r1, r3
 8006d9e:	4413      	add	r3, r2
 8006da0:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006da4:	781a      	ldrb	r2, [r3, #0]
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006daa:	7bfb      	ldrb	r3, [r7, #15]
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	211a      	movs	r1, #26
 8006db0:	fb01 f303 	mul.w	r3, r1, r3
 8006db4:	4413      	add	r3, r2
 8006db6:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006dba:	881a      	ldrh	r2, [r3, #0]
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	835a      	strh	r2, [r3, #26]
 8006dc0:	e015      	b.n	8006dee <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006dc2:	7bfb      	ldrb	r3, [r7, #15]
 8006dc4:	687a      	ldr	r2, [r7, #4]
 8006dc6:	211a      	movs	r1, #26
 8006dc8:	fb01 f303 	mul.w	r3, r1, r3
 8006dcc:	4413      	add	r3, r2
 8006dce:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006dd2:	781a      	ldrb	r2, [r3, #0]
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006dd8:	7bfb      	ldrb	r3, [r7, #15]
 8006dda:	687a      	ldr	r2, [r7, #4]
 8006ddc:	211a      	movs	r1, #26
 8006dde:	fb01 f303 	mul.w	r3, r1, r3
 8006de2:	4413      	add	r3, r2
 8006de4:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006de8:	881a      	ldrh	r2, [r3, #0]
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	7b9b      	ldrb	r3, [r3, #14]
 8006df2:	4619      	mov	r1, r3
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f001 ff16 	bl	8008c26 <USBH_AllocPipe>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	7bdb      	ldrb	r3, [r3, #15]
 8006e06:	4619      	mov	r1, r3
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f001 ff0c 	bl	8008c26 <USBH_AllocPipe>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	461a      	mov	r2, r3
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	7b59      	ldrb	r1, [r3, #13]
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	7b98      	ldrb	r0, [r3, #14]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006e2a:	68ba      	ldr	r2, [r7, #8]
 8006e2c:	8b12      	ldrh	r2, [r2, #24]
 8006e2e:	9202      	str	r2, [sp, #8]
 8006e30:	2202      	movs	r2, #2
 8006e32:	9201      	str	r2, [sp, #4]
 8006e34:	9300      	str	r3, [sp, #0]
 8006e36:	4623      	mov	r3, r4
 8006e38:	4602      	mov	r2, r0
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f001 fec4 	bl	8008bc8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	7b19      	ldrb	r1, [r3, #12]
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	7bd8      	ldrb	r0, [r3, #15]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006e54:	68ba      	ldr	r2, [r7, #8]
 8006e56:	8b52      	ldrh	r2, [r2, #26]
 8006e58:	9202      	str	r2, [sp, #8]
 8006e5a:	2202      	movs	r2, #2
 8006e5c:	9201      	str	r2, [sp, #4]
 8006e5e:	9300      	str	r3, [sp, #0]
 8006e60:	4623      	mov	r3, r4
 8006e62:	4602      	mov	r2, r0
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f001 feaf 	bl	8008bc8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	7b5b      	ldrb	r3, [r3, #13]
 8006e76:	2200      	movs	r2, #0
 8006e78:	4619      	mov	r1, r3
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f002 f9ba 	bl	80091f4 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	7b1b      	ldrb	r3, [r3, #12]
 8006e84:	2200      	movs	r2, #0
 8006e86:	4619      	mov	r1, r3
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f002 f9b3 	bl	80091f4 <USBH_LL_SetToggle>

  return USBH_OK;
 8006e8e:	2300      	movs	r3, #0
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3714      	adds	r7, #20
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd90      	pop	{r4, r7, pc}

08006e98 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b084      	sub	sp, #16
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006ea6:	69db      	ldr	r3, [r3, #28]
 8006ea8:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d00e      	beq.n	8006ed0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	781b      	ldrb	r3, [r3, #0]
 8006eb6:	4619      	mov	r1, r3
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f001 fea4 	bl	8008c06 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	781b      	ldrb	r3, [r3, #0]
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f001 fecf 	bl	8008c68 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	7b1b      	ldrb	r3, [r3, #12]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d00e      	beq.n	8006ef6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	7b1b      	ldrb	r3, [r3, #12]
 8006edc:	4619      	mov	r1, r3
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f001 fe91 	bl	8008c06 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	7b1b      	ldrb	r3, [r3, #12]
 8006ee8:	4619      	mov	r1, r3
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f001 febc 	bl	8008c68 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	7b5b      	ldrb	r3, [r3, #13]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d00e      	beq.n	8006f1c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	7b5b      	ldrb	r3, [r3, #13]
 8006f02:	4619      	mov	r1, r3
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f001 fe7e 	bl	8008c06 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	7b5b      	ldrb	r3, [r3, #13]
 8006f0e:	4619      	mov	r1, r3
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f001 fea9 	bl	8008c68 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006f22:	69db      	ldr	r3, [r3, #28]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d00b      	beq.n	8006f40 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006f2e:	69db      	ldr	r3, [r3, #28]
 8006f30:	4618      	mov	r0, r3
 8006f32:	f002 f9ed 	bl	8009310 <free>
    phost->pActiveClass->pData = 0U;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006f40:	2300      	movs	r3, #0
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3710      	adds	r7, #16
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}

08006f4a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006f4a:	b580      	push	{r7, lr}
 8006f4c:	b084      	sub	sp, #16
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006f58:	69db      	ldr	r3, [r3, #28]
 8006f5a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	3340      	adds	r3, #64	@ 0x40
 8006f60:	4619      	mov	r1, r3
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f000 f8b1 	bl	80070ca <GetLineCoding>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006f6c:	7afb      	ldrb	r3, [r7, #11]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d105      	bne.n	8006f7e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006f78:	2102      	movs	r1, #2
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006f7e:	7afb      	ldrb	r3, [r7, #11]
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3710      	adds	r7, #16
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b084      	sub	sp, #16
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006f90:	2301      	movs	r3, #1
 8006f92:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006f94:	2300      	movs	r3, #0
 8006f96:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006f9e:	69db      	ldr	r3, [r3, #28]
 8006fa0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8006fa8:	2b04      	cmp	r3, #4
 8006faa:	d877      	bhi.n	800709c <USBH_CDC_Process+0x114>
 8006fac:	a201      	add	r2, pc, #4	@ (adr r2, 8006fb4 <USBH_CDC_Process+0x2c>)
 8006fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fb2:	bf00      	nop
 8006fb4:	08006fc9 	.word	0x08006fc9
 8006fb8:	08006fcf 	.word	0x08006fcf
 8006fbc:	08006fff 	.word	0x08006fff
 8006fc0:	08007073 	.word	0x08007073
 8006fc4:	08007081 	.word	0x08007081
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	73fb      	strb	r3, [r7, #15]
      break;
 8006fcc:	e06d      	b.n	80070aa <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006fd2:	4619      	mov	r1, r3
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f000 f897 	bl	8007108 <SetLineCoding>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006fde:	7bbb      	ldrb	r3, [r7, #14]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d104      	bne.n	8006fee <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	2202      	movs	r2, #2
 8006fe8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006fec:	e058      	b.n	80070a0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006fee:	7bbb      	ldrb	r3, [r7, #14]
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d055      	beq.n	80070a0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	2204      	movs	r2, #4
 8006ff8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8006ffc:	e050      	b.n	80070a0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	3340      	adds	r3, #64	@ 0x40
 8007002:	4619      	mov	r1, r3
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f000 f860 	bl	80070ca <GetLineCoding>
 800700a:	4603      	mov	r3, r0
 800700c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800700e:	7bbb      	ldrb	r3, [r7, #14]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d126      	bne.n	8007062 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	2200      	movs	r2, #0
 8007018:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007026:	791b      	ldrb	r3, [r3, #4]
 8007028:	429a      	cmp	r2, r3
 800702a:	d13b      	bne.n	80070a4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007036:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007038:	429a      	cmp	r2, r3
 800703a:	d133      	bne.n	80070a4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007046:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007048:	429a      	cmp	r2, r3
 800704a:	d12b      	bne.n	80070a4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007054:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007056:	429a      	cmp	r2, r3
 8007058:	d124      	bne.n	80070a4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 f958 	bl	8007310 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007060:	e020      	b.n	80070a4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007062:	7bbb      	ldrb	r3, [r7, #14]
 8007064:	2b01      	cmp	r3, #1
 8007066:	d01d      	beq.n	80070a4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	2204      	movs	r2, #4
 800706c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8007070:	e018      	b.n	80070a4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 f867 	bl	8007146 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f000 f8da 	bl	8007232 <CDC_ProcessReception>
      break;
 800707e:	e014      	b.n	80070aa <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007080:	2100      	movs	r1, #0
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f001 f81a 	bl	80080bc <USBH_ClrFeature>
 8007088:	4603      	mov	r3, r0
 800708a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800708c:	7bbb      	ldrb	r3, [r7, #14]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d10a      	bne.n	80070a8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	2200      	movs	r2, #0
 8007096:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800709a:	e005      	b.n	80070a8 <USBH_CDC_Process+0x120>

    default:
      break;
 800709c:	bf00      	nop
 800709e:	e004      	b.n	80070aa <USBH_CDC_Process+0x122>
      break;
 80070a0:	bf00      	nop
 80070a2:	e002      	b.n	80070aa <USBH_CDC_Process+0x122>
      break;
 80070a4:	bf00      	nop
 80070a6:	e000      	b.n	80070aa <USBH_CDC_Process+0x122>
      break;
 80070a8:	bf00      	nop

  }

  return status;
 80070aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3710      	adds	r7, #16
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}

080070b4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b083      	sub	sp, #12
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80070bc:	2300      	movs	r3, #0
}
 80070be:	4618      	mov	r0, r3
 80070c0:	370c      	adds	r7, #12
 80070c2:	46bd      	mov	sp, r7
 80070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c8:	4770      	bx	lr

080070ca <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80070ca:	b580      	push	{r7, lr}
 80070cc:	b082      	sub	sp, #8
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	6078      	str	r0, [r7, #4]
 80070d2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	22a1      	movs	r2, #161	@ 0xa1
 80070d8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2221      	movs	r2, #33	@ 0x21
 80070de:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2200      	movs	r2, #0
 80070e4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2200      	movs	r2, #0
 80070ea:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2207      	movs	r2, #7
 80070f0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	2207      	movs	r2, #7
 80070f6:	4619      	mov	r1, r3
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f001 fb14 	bl	8008726 <USBH_CtlReq>
 80070fe:	4603      	mov	r3, r0
}
 8007100:	4618      	mov	r0, r3
 8007102:	3708      	adds	r7, #8
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b082      	sub	sp, #8
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2221      	movs	r2, #33	@ 0x21
 8007116:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2220      	movs	r2, #32
 800711c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2200      	movs	r2, #0
 8007122:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2200      	movs	r2, #0
 8007128:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2207      	movs	r2, #7
 800712e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	2207      	movs	r2, #7
 8007134:	4619      	mov	r1, r3
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f001 faf5 	bl	8008726 <USBH_CtlReq>
 800713c:	4603      	mov	r3, r0
}
 800713e:	4618      	mov	r0, r3
 8007140:	3708      	adds	r7, #8
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}

08007146 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007146:	b580      	push	{r7, lr}
 8007148:	b086      	sub	sp, #24
 800714a:	af02      	add	r7, sp, #8
 800714c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007154:	69db      	ldr	r3, [r3, #28]
 8007156:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007158:	2300      	movs	r3, #0
 800715a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8007162:	2b01      	cmp	r3, #1
 8007164:	d002      	beq.n	800716c <CDC_ProcessTransmission+0x26>
 8007166:	2b02      	cmp	r3, #2
 8007168:	d023      	beq.n	80071b2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800716a:	e05e      	b.n	800722a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007170:	68fa      	ldr	r2, [r7, #12]
 8007172:	8b12      	ldrh	r2, [r2, #24]
 8007174:	4293      	cmp	r3, r2
 8007176:	d90b      	bls.n	8007190 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	69d9      	ldr	r1, [r3, #28]
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	8b1a      	ldrh	r2, [r3, #24]
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	7b5b      	ldrb	r3, [r3, #13]
 8007184:	2001      	movs	r0, #1
 8007186:	9000      	str	r0, [sp, #0]
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f001 fcda 	bl	8008b42 <USBH_BulkSendData>
 800718e:	e00b      	b.n	80071a8 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8007198:	b29a      	uxth	r2, r3
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	7b5b      	ldrb	r3, [r3, #13]
 800719e:	2001      	movs	r0, #1
 80071a0:	9000      	str	r0, [sp, #0]
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f001 fccd 	bl	8008b42 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2202      	movs	r2, #2
 80071ac:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80071b0:	e03b      	b.n	800722a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	7b5b      	ldrb	r3, [r3, #13]
 80071b6:	4619      	mov	r1, r3
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f001 fff1 	bl	80091a0 <USBH_LL_GetURBState>
 80071be:	4603      	mov	r3, r0
 80071c0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80071c2:	7afb      	ldrb	r3, [r7, #11]
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	d128      	bne.n	800721a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071cc:	68fa      	ldr	r2, [r7, #12]
 80071ce:	8b12      	ldrh	r2, [r2, #24]
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d90e      	bls.n	80071f2 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071d8:	68fa      	ldr	r2, [r7, #12]
 80071da:	8b12      	ldrh	r2, [r2, #24]
 80071dc:	1a9a      	subs	r2, r3, r2
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	69db      	ldr	r3, [r3, #28]
 80071e6:	68fa      	ldr	r2, [r7, #12]
 80071e8:	8b12      	ldrh	r2, [r2, #24]
 80071ea:	441a      	add	r2, r3
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	61da      	str	r2, [r3, #28]
 80071f0:	e002      	b.n	80071f8 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2200      	movs	r2, #0
 80071f6:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d004      	beq.n	800720a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2201      	movs	r2, #1
 8007204:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007208:	e00e      	b.n	8007228 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2200      	movs	r2, #0
 800720e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 f868 	bl	80072e8 <USBH_CDC_TransmitCallback>
      break;
 8007218:	e006      	b.n	8007228 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800721a:	7afb      	ldrb	r3, [r7, #11]
 800721c:	2b02      	cmp	r3, #2
 800721e:	d103      	bne.n	8007228 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2201      	movs	r2, #1
 8007224:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007228:	bf00      	nop
  }
}
 800722a:	bf00      	nop
 800722c:	3710      	adds	r7, #16
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}

08007232 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007232:	b580      	push	{r7, lr}
 8007234:	b086      	sub	sp, #24
 8007236:	af00      	add	r7, sp, #0
 8007238:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007240:	69db      	ldr	r3, [r3, #28]
 8007242:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007244:	2300      	movs	r3, #0
 8007246:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800724e:	2b03      	cmp	r3, #3
 8007250:	d002      	beq.n	8007258 <CDC_ProcessReception+0x26>
 8007252:	2b04      	cmp	r3, #4
 8007254:	d00e      	beq.n	8007274 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007256:	e043      	b.n	80072e0 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	6a19      	ldr	r1, [r3, #32]
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	8b5a      	ldrh	r2, [r3, #26]
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	7b1b      	ldrb	r3, [r3, #12]
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f001 fc91 	bl	8008b8c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	2204      	movs	r2, #4
 800726e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8007272:	e035      	b.n	80072e0 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	7b1b      	ldrb	r3, [r3, #12]
 8007278:	4619      	mov	r1, r3
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f001 ff90 	bl	80091a0 <USBH_LL_GetURBState>
 8007280:	4603      	mov	r3, r0
 8007282:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007284:	7cfb      	ldrb	r3, [r7, #19]
 8007286:	2b01      	cmp	r3, #1
 8007288:	d129      	bne.n	80072de <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	7b1b      	ldrb	r3, [r3, #12]
 800728e:	4619      	mov	r1, r3
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f001 fef3 	bl	800907c <USBH_LL_GetLastXferSize>
 8007296:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800729c:	68fa      	ldr	r2, [r7, #12]
 800729e:	429a      	cmp	r2, r3
 80072a0:	d016      	beq.n	80072d0 <CDC_ProcessReception+0x9e>
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	8b5b      	ldrh	r3, [r3, #26]
 80072a6:	461a      	mov	r2, r3
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d110      	bne.n	80072d0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	1ad2      	subs	r2, r2, r3
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	6a1a      	ldr	r2, [r3, #32]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	441a      	add	r2, r3
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	2203      	movs	r2, #3
 80072ca:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80072ce:	e006      	b.n	80072de <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	2200      	movs	r2, #0
 80072d4:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f000 f80f 	bl	80072fc <USBH_CDC_ReceiveCallback>
      break;
 80072de:	bf00      	nop
  }
}
 80072e0:	bf00      	nop
 80072e2:	3718      	adds	r7, #24
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}

080072e8 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b083      	sub	sp, #12
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80072f0:	bf00      	nop
 80072f2:	370c      	adds	r7, #12
 80072f4:	46bd      	mov	sp, r7
 80072f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fa:	4770      	bx	lr

080072fc <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b083      	sub	sp, #12
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007304:	bf00      	nop
 8007306:	370c      	adds	r7, #12
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007310:	b480      	push	{r7}
 8007312:	b083      	sub	sp, #12
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007318:	bf00      	nop
 800731a:	370c      	adds	r7, #12
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b084      	sub	sp, #16
 8007328:	af00      	add	r7, sp, #0
 800732a:	60f8      	str	r0, [r7, #12]
 800732c:	60b9      	str	r1, [r7, #8]
 800732e:	4613      	mov	r3, r2
 8007330:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d101      	bne.n	800733c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007338:	2302      	movs	r3, #2
 800733a:	e029      	b.n	8007390 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	79fa      	ldrb	r2, [r7, #7]
 8007340:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2200      	movs	r2, #0
 8007348:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2200      	movs	r2, #0
 8007350:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007354:	68f8      	ldr	r0, [r7, #12]
 8007356:	f000 f81f 	bl	8007398 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2200      	movs	r2, #0
 800735e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2200      	movs	r2, #0
 8007366:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2200      	movs	r2, #0
 800736e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2200      	movs	r2, #0
 8007376:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d003      	beq.n	8007388 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	68ba      	ldr	r2, [r7, #8]
 8007384:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007388:	68f8      	ldr	r0, [r7, #12]
 800738a:	f001 fdc3 	bl	8008f14 <USBH_LL_Init>

  return USBH_OK;
 800738e:	2300      	movs	r3, #0
}
 8007390:	4618      	mov	r0, r3
 8007392:	3710      	adds	r7, #16
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}

08007398 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b084      	sub	sp, #16
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80073a0:	2300      	movs	r3, #0
 80073a2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80073a4:	2300      	movs	r3, #0
 80073a6:	60fb      	str	r3, [r7, #12]
 80073a8:	e009      	b.n	80073be <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80073aa:	687a      	ldr	r2, [r7, #4]
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	33e0      	adds	r3, #224	@ 0xe0
 80073b0:	009b      	lsls	r3, r3, #2
 80073b2:	4413      	add	r3, r2
 80073b4:	2200      	movs	r2, #0
 80073b6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	3301      	adds	r3, #1
 80073bc:	60fb      	str	r3, [r7, #12]
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2b0f      	cmp	r3, #15
 80073c2:	d9f2      	bls.n	80073aa <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80073c4:	2300      	movs	r3, #0
 80073c6:	60fb      	str	r3, [r7, #12]
 80073c8:	e009      	b.n	80073de <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80073ca:	687a      	ldr	r2, [r7, #4]
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	4413      	add	r3, r2
 80073d0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80073d4:	2200      	movs	r2, #0
 80073d6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	3301      	adds	r3, #1
 80073dc:	60fb      	str	r3, [r7, #12]
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80073e4:	d3f1      	bcc.n	80073ca <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2200      	movs	r2, #0
 80073ea:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2200      	movs	r2, #0
 80073f0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2201      	movs	r2, #1
 80073f6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2201      	movs	r2, #1
 8007404:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2240      	movs	r2, #64	@ 0x40
 800740a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2200      	movs	r2, #0
 8007416:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2201      	movs	r2, #1
 800741e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2200      	movs	r2, #0
 8007426:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2200      	movs	r2, #0
 800742e:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	331c      	adds	r3, #28
 8007436:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800743a:	2100      	movs	r1, #0
 800743c:	4618      	mov	r0, r3
 800743e:	f002 f81d 	bl	800947c <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007448:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800744c:	2100      	movs	r1, #0
 800744e:	4618      	mov	r0, r3
 8007450:	f002 f814 	bl	800947c <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800745a:	2212      	movs	r2, #18
 800745c:	2100      	movs	r1, #0
 800745e:	4618      	mov	r0, r3
 8007460:	f002 f80c 	bl	800947c <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800746a:	223e      	movs	r2, #62	@ 0x3e
 800746c:	2100      	movs	r1, #0
 800746e:	4618      	mov	r0, r3
 8007470:	f002 f804 	bl	800947c <memset>

  return USBH_OK;
 8007474:	2300      	movs	r3, #0
}
 8007476:	4618      	mov	r0, r3
 8007478:	3710      	adds	r7, #16
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}

0800747e <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800747e:	b480      	push	{r7}
 8007480:	b085      	sub	sp, #20
 8007482:	af00      	add	r7, sp, #0
 8007484:	6078      	str	r0, [r7, #4]
 8007486:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007488:	2300      	movs	r3, #0
 800748a:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d016      	beq.n	80074c0 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007498:	2b00      	cmp	r3, #0
 800749a:	d10e      	bne.n	80074ba <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80074a2:	1c59      	adds	r1, r3, #1
 80074a4:	687a      	ldr	r2, [r7, #4]
 80074a6:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 80074aa:	687a      	ldr	r2, [r7, #4]
 80074ac:	33de      	adds	r3, #222	@ 0xde
 80074ae:	6839      	ldr	r1, [r7, #0]
 80074b0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80074b4:	2300      	movs	r3, #0
 80074b6:	73fb      	strb	r3, [r7, #15]
 80074b8:	e004      	b.n	80074c4 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80074ba:	2302      	movs	r3, #2
 80074bc:	73fb      	strb	r3, [r7, #15]
 80074be:	e001      	b.n	80074c4 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80074c0:	2302      	movs	r3, #2
 80074c2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80074c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3714      	adds	r7, #20
 80074ca:	46bd      	mov	sp, r7
 80074cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d0:	4770      	bx	lr

080074d2 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80074d2:	b480      	push	{r7}
 80074d4:	b085      	sub	sp, #20
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	6078      	str	r0, [r7, #4]
 80074da:	460b      	mov	r3, r1
 80074dc:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80074de:	2300      	movs	r3, #0
 80074e0:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 80074e8:	78fa      	ldrb	r2, [r7, #3]
 80074ea:	429a      	cmp	r2, r3
 80074ec:	d204      	bcs.n	80074f8 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	78fa      	ldrb	r2, [r7, #3]
 80074f2:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 80074f6:	e001      	b.n	80074fc <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80074f8:	2302      	movs	r3, #2
 80074fa:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80074fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3714      	adds	r7, #20
 8007502:	46bd      	mov	sp, r7
 8007504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007508:	4770      	bx	lr

0800750a <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800750a:	b480      	push	{r7}
 800750c:	b087      	sub	sp, #28
 800750e:	af00      	add	r7, sp, #0
 8007510:	6078      	str	r0, [r7, #4]
 8007512:	4608      	mov	r0, r1
 8007514:	4611      	mov	r1, r2
 8007516:	461a      	mov	r2, r3
 8007518:	4603      	mov	r3, r0
 800751a:	70fb      	strb	r3, [r7, #3]
 800751c:	460b      	mov	r3, r1
 800751e:	70bb      	strb	r3, [r7, #2]
 8007520:	4613      	mov	r3, r2
 8007522:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007524:	2300      	movs	r3, #0
 8007526:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007528:	2300      	movs	r3, #0
 800752a:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007532:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007534:	e025      	b.n	8007582 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007536:	7dfb      	ldrb	r3, [r7, #23]
 8007538:	221a      	movs	r2, #26
 800753a:	fb02 f303 	mul.w	r3, r2, r3
 800753e:	3308      	adds	r3, #8
 8007540:	68fa      	ldr	r2, [r7, #12]
 8007542:	4413      	add	r3, r2
 8007544:	3302      	adds	r3, #2
 8007546:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	795b      	ldrb	r3, [r3, #5]
 800754c:	78fa      	ldrb	r2, [r7, #3]
 800754e:	429a      	cmp	r2, r3
 8007550:	d002      	beq.n	8007558 <USBH_FindInterface+0x4e>
 8007552:	78fb      	ldrb	r3, [r7, #3]
 8007554:	2bff      	cmp	r3, #255	@ 0xff
 8007556:	d111      	bne.n	800757c <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800755c:	78ba      	ldrb	r2, [r7, #2]
 800755e:	429a      	cmp	r2, r3
 8007560:	d002      	beq.n	8007568 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007562:	78bb      	ldrb	r3, [r7, #2]
 8007564:	2bff      	cmp	r3, #255	@ 0xff
 8007566:	d109      	bne.n	800757c <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800756c:	787a      	ldrb	r2, [r7, #1]
 800756e:	429a      	cmp	r2, r3
 8007570:	d002      	beq.n	8007578 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007572:	787b      	ldrb	r3, [r7, #1]
 8007574:	2bff      	cmp	r3, #255	@ 0xff
 8007576:	d101      	bne.n	800757c <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007578:	7dfb      	ldrb	r3, [r7, #23]
 800757a:	e006      	b.n	800758a <USBH_FindInterface+0x80>
    }
    if_ix++;
 800757c:	7dfb      	ldrb	r3, [r7, #23]
 800757e:	3301      	adds	r3, #1
 8007580:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007582:	7dfb      	ldrb	r3, [r7, #23]
 8007584:	2b01      	cmp	r3, #1
 8007586:	d9d6      	bls.n	8007536 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007588:	23ff      	movs	r3, #255	@ 0xff
}
 800758a:	4618      	mov	r0, r3
 800758c:	371c      	adds	r7, #28
 800758e:	46bd      	mov	sp, r7
 8007590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007594:	4770      	bx	lr

08007596 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8007596:	b580      	push	{r7, lr}
 8007598:	b082      	sub	sp, #8
 800759a:	af00      	add	r7, sp, #0
 800759c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f001 fcf4 	bl	8008f8c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80075a4:	2101      	movs	r1, #1
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f001 fe0d 	bl	80091c6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80075ac:	2300      	movs	r3, #0
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3708      	adds	r7, #8
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}
	...

080075b8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b088      	sub	sp, #32
 80075bc:	af04      	add	r7, sp, #16
 80075be:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80075c0:	2302      	movs	r3, #2
 80075c2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80075c4:	2300      	movs	r3, #0
 80075c6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 80075ce:	b2db      	uxtb	r3, r3
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d102      	bne.n	80075da <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2203      	movs	r2, #3
 80075d8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	b2db      	uxtb	r3, r3
 80075e0:	2b0b      	cmp	r3, #11
 80075e2:	f200 81bb 	bhi.w	800795c <USBH_Process+0x3a4>
 80075e6:	a201      	add	r2, pc, #4	@ (adr r2, 80075ec <USBH_Process+0x34>)
 80075e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ec:	0800761d 	.word	0x0800761d
 80075f0:	0800764f 	.word	0x0800764f
 80075f4:	080076b7 	.word	0x080076b7
 80075f8:	080078f7 	.word	0x080078f7
 80075fc:	0800795d 	.word	0x0800795d
 8007600:	08007757 	.word	0x08007757
 8007604:	0800789d 	.word	0x0800789d
 8007608:	0800778d 	.word	0x0800778d
 800760c:	080077ad 	.word	0x080077ad
 8007610:	080077cb 	.word	0x080077cb
 8007614:	0800780f 	.word	0x0800780f
 8007618:	080078df 	.word	0x080078df
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8007622:	b2db      	uxtb	r3, r3
 8007624:	2b00      	cmp	r3, #0
 8007626:	f000 819b 	beq.w	8007960 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2201      	movs	r2, #1
 800762e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007630:	20c8      	movs	r0, #200	@ 0xc8
 8007632:	f001 fe12 	bl	800925a <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f001 fd05 	bl	8009046 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2200      	movs	r2, #0
 8007640:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2200      	movs	r2, #0
 8007648:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800764c:	e188      	b.n	8007960 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8007654:	2b01      	cmp	r3, #1
 8007656:	d107      	bne.n	8007668 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2200      	movs	r2, #0
 800765c:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2202      	movs	r2, #2
 8007664:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007666:	e18a      	b.n	800797e <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800766e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007672:	d914      	bls.n	800769e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800767a:	3301      	adds	r3, #1
 800767c:	b2da      	uxtb	r2, r3
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800768a:	2b03      	cmp	r3, #3
 800768c:	d903      	bls.n	8007696 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	220d      	movs	r2, #13
 8007692:	701a      	strb	r2, [r3, #0]
      break;
 8007694:	e173      	b.n	800797e <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2200      	movs	r2, #0
 800769a:	701a      	strb	r2, [r3, #0]
      break;
 800769c:	e16f      	b.n	800797e <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80076a4:	f103 020a 	add.w	r2, r3, #10
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 80076ae:	200a      	movs	r0, #10
 80076b0:	f001 fdd3 	bl	800925a <USBH_Delay>
      break;
 80076b4:	e163      	b.n	800797e <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d005      	beq.n	80076cc <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80076c6:	2104      	movs	r1, #4
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80076cc:	2064      	movs	r0, #100	@ 0x64
 80076ce:	f001 fdc4 	bl	800925a <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f001 fc90 	bl	8008ff8 <USBH_LL_GetSpeed>
 80076d8:	4603      	mov	r3, r0
 80076da:	461a      	mov	r2, r3
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2205      	movs	r2, #5
 80076e6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80076e8:	2100      	movs	r1, #0
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f001 fa9b 	bl	8008c26 <USBH_AllocPipe>
 80076f0:	4603      	mov	r3, r0
 80076f2:	461a      	mov	r2, r3
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80076f8:	2180      	movs	r1, #128	@ 0x80
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f001 fa93 	bl	8008c26 <USBH_AllocPipe>
 8007700:	4603      	mov	r3, r0
 8007702:	461a      	mov	r2, r3
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	7919      	ldrb	r1, [r3, #4]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007718:	687a      	ldr	r2, [r7, #4]
 800771a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800771c:	9202      	str	r2, [sp, #8]
 800771e:	2200      	movs	r2, #0
 8007720:	9201      	str	r2, [sp, #4]
 8007722:	9300      	str	r3, [sp, #0]
 8007724:	4603      	mov	r3, r0
 8007726:	2280      	movs	r2, #128	@ 0x80
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f001 fa4d 	bl	8008bc8 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	7959      	ldrb	r1, [r3, #5]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800773e:	687a      	ldr	r2, [r7, #4]
 8007740:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007742:	9202      	str	r2, [sp, #8]
 8007744:	2200      	movs	r2, #0
 8007746:	9201      	str	r2, [sp, #4]
 8007748:	9300      	str	r3, [sp, #0]
 800774a:	4603      	mov	r3, r0
 800774c:	2200      	movs	r2, #0
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f001 fa3a 	bl	8008bc8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007754:	e113      	b.n	800797e <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 f916 	bl	8007988 <USBH_HandleEnum>
 800775c:	4603      	mov	r3, r0
 800775e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007760:	7bbb      	ldrb	r3, [r7, #14]
 8007762:	b2db      	uxtb	r3, r3
 8007764:	2b00      	cmp	r3, #0
 8007766:	f040 80fd 	bne.w	8007964 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2200      	movs	r2, #0
 800776e:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8007778:	2b01      	cmp	r3, #1
 800777a:	d103      	bne.n	8007784 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2208      	movs	r2, #8
 8007780:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007782:	e0ef      	b.n	8007964 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2207      	movs	r2, #7
 8007788:	701a      	strb	r2, [r3, #0]
      break;
 800778a:	e0eb      	b.n	8007964 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007792:	2b00      	cmp	r3, #0
 8007794:	f000 80e8 	beq.w	8007968 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800779e:	2101      	movs	r1, #1
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2208      	movs	r2, #8
 80077a8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80077aa:	e0dd      	b.n	8007968 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 80077b2:	4619      	mov	r1, r3
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f000 fc3a 	bl	800802e <USBH_SetCfg>
 80077ba:	4603      	mov	r3, r0
 80077bc:	2b00      	cmp	r3, #0
 80077be:	f040 80d5 	bne.w	800796c <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2209      	movs	r2, #9
 80077c6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80077c8:	e0d0      	b.n	800796c <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 80077d0:	f003 0320 	and.w	r3, r3, #32
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d016      	beq.n	8007806 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80077d8:	2101      	movs	r1, #1
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f000 fc4a 	bl	8008074 <USBH_SetFeature>
 80077e0:	4603      	mov	r3, r0
 80077e2:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80077e4:	7bbb      	ldrb	r3, [r7, #14]
 80077e6:	b2db      	uxtb	r3, r3
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d103      	bne.n	80077f4 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	220a      	movs	r2, #10
 80077f0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80077f2:	e0bd      	b.n	8007970 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 80077f4:	7bbb      	ldrb	r3, [r7, #14]
 80077f6:	b2db      	uxtb	r3, r3
 80077f8:	2b03      	cmp	r3, #3
 80077fa:	f040 80b9 	bne.w	8007970 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	220a      	movs	r2, #10
 8007802:	701a      	strb	r2, [r3, #0]
      break;
 8007804:	e0b4      	b.n	8007970 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	220a      	movs	r2, #10
 800780a:	701a      	strb	r2, [r3, #0]
      break;
 800780c:	e0b0      	b.n	8007970 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007814:	2b00      	cmp	r3, #0
 8007816:	f000 80ad 	beq.w	8007974 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2200      	movs	r2, #0
 800781e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007822:	2300      	movs	r3, #0
 8007824:	73fb      	strb	r3, [r7, #15]
 8007826:	e016      	b.n	8007856 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007828:	7bfa      	ldrb	r2, [r7, #15]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	32de      	adds	r2, #222	@ 0xde
 800782e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007832:	791a      	ldrb	r2, [r3, #4]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800783a:	429a      	cmp	r2, r3
 800783c:	d108      	bne.n	8007850 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 800783e:	7bfa      	ldrb	r2, [r7, #15]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	32de      	adds	r2, #222	@ 0xde
 8007844:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800784e:	e005      	b.n	800785c <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007850:	7bfb      	ldrb	r3, [r7, #15]
 8007852:	3301      	adds	r3, #1
 8007854:	73fb      	strb	r3, [r7, #15]
 8007856:	7bfb      	ldrb	r3, [r7, #15]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d0e5      	beq.n	8007828 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007862:	2b00      	cmp	r3, #0
 8007864:	d016      	beq.n	8007894 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800786c:	689b      	ldr	r3, [r3, #8]
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	4798      	blx	r3
 8007872:	4603      	mov	r3, r0
 8007874:	2b00      	cmp	r3, #0
 8007876:	d109      	bne.n	800788c <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2206      	movs	r2, #6
 800787c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007884:	2103      	movs	r1, #3
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800788a:	e073      	b.n	8007974 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	220d      	movs	r2, #13
 8007890:	701a      	strb	r2, [r3, #0]
      break;
 8007892:	e06f      	b.n	8007974 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	220d      	movs	r2, #13
 8007898:	701a      	strb	r2, [r3, #0]
      break;
 800789a:	e06b      	b.n	8007974 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d017      	beq.n	80078d6 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80078ac:	691b      	ldr	r3, [r3, #16]
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	4798      	blx	r3
 80078b2:	4603      	mov	r3, r0
 80078b4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80078b6:	7bbb      	ldrb	r3, [r7, #14]
 80078b8:	b2db      	uxtb	r3, r3
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d103      	bne.n	80078c6 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	220b      	movs	r2, #11
 80078c2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80078c4:	e058      	b.n	8007978 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 80078c6:	7bbb      	ldrb	r3, [r7, #14]
 80078c8:	b2db      	uxtb	r3, r3
 80078ca:	2b02      	cmp	r3, #2
 80078cc:	d154      	bne.n	8007978 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	220d      	movs	r2, #13
 80078d2:	701a      	strb	r2, [r3, #0]
      break;
 80078d4:	e050      	b.n	8007978 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	220d      	movs	r2, #13
 80078da:	701a      	strb	r2, [r3, #0]
      break;
 80078dc:	e04c      	b.n	8007978 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d049      	beq.n	800797c <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80078ee:	695b      	ldr	r3, [r3, #20]
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	4798      	blx	r3
      }
      break;
 80078f4:	e042      	b.n	800797c <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2200      	movs	r2, #0
 80078fa:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f7ff fd4a 	bl	8007398 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800790a:	2b00      	cmp	r3, #0
 800790c:	d009      	beq.n	8007922 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007914:	68db      	ldr	r3, [r3, #12]
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2200      	movs	r2, #0
 800791e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007928:	2b00      	cmp	r3, #0
 800792a:	d005      	beq.n	8007938 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007932:	2105      	movs	r1, #5
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800793e:	b2db      	uxtb	r3, r3
 8007940:	2b01      	cmp	r3, #1
 8007942:	d107      	bne.n	8007954 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2200      	movs	r2, #0
 8007948:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f7ff fe22 	bl	8007596 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007952:	e014      	b.n	800797e <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f001 fb19 	bl	8008f8c <USBH_LL_Start>
      break;
 800795a:	e010      	b.n	800797e <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 800795c:	bf00      	nop
 800795e:	e00e      	b.n	800797e <USBH_Process+0x3c6>
      break;
 8007960:	bf00      	nop
 8007962:	e00c      	b.n	800797e <USBH_Process+0x3c6>
      break;
 8007964:	bf00      	nop
 8007966:	e00a      	b.n	800797e <USBH_Process+0x3c6>
    break;
 8007968:	bf00      	nop
 800796a:	e008      	b.n	800797e <USBH_Process+0x3c6>
      break;
 800796c:	bf00      	nop
 800796e:	e006      	b.n	800797e <USBH_Process+0x3c6>
      break;
 8007970:	bf00      	nop
 8007972:	e004      	b.n	800797e <USBH_Process+0x3c6>
      break;
 8007974:	bf00      	nop
 8007976:	e002      	b.n	800797e <USBH_Process+0x3c6>
      break;
 8007978:	bf00      	nop
 800797a:	e000      	b.n	800797e <USBH_Process+0x3c6>
      break;
 800797c:	bf00      	nop
  }
  return USBH_OK;
 800797e:	2300      	movs	r3, #0
}
 8007980:	4618      	mov	r0, r3
 8007982:	3710      	adds	r7, #16
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}

08007988 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b088      	sub	sp, #32
 800798c:	af04      	add	r7, sp, #16
 800798e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007990:	2301      	movs	r3, #1
 8007992:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007994:	2301      	movs	r3, #1
 8007996:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	785b      	ldrb	r3, [r3, #1]
 800799c:	2b07      	cmp	r3, #7
 800799e:	f200 81bd 	bhi.w	8007d1c <USBH_HandleEnum+0x394>
 80079a2:	a201      	add	r2, pc, #4	@ (adr r2, 80079a8 <USBH_HandleEnum+0x20>)
 80079a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079a8:	080079c9 	.word	0x080079c9
 80079ac:	08007a83 	.word	0x08007a83
 80079b0:	08007aed 	.word	0x08007aed
 80079b4:	08007b77 	.word	0x08007b77
 80079b8:	08007be1 	.word	0x08007be1
 80079bc:	08007c51 	.word	0x08007c51
 80079c0:	08007c97 	.word	0x08007c97
 80079c4:	08007cdd 	.word	0x08007cdd
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80079c8:	2108      	movs	r1, #8
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f000 fa4c 	bl	8007e68 <USBH_Get_DevDesc>
 80079d0:	4603      	mov	r3, r0
 80079d2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80079d4:	7bbb      	ldrb	r3, [r7, #14]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d12e      	bne.n	8007a38 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2201      	movs	r2, #1
 80079e8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	7919      	ldrb	r1, [r3, #4]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80079fa:	687a      	ldr	r2, [r7, #4]
 80079fc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80079fe:	9202      	str	r2, [sp, #8]
 8007a00:	2200      	movs	r2, #0
 8007a02:	9201      	str	r2, [sp, #4]
 8007a04:	9300      	str	r3, [sp, #0]
 8007a06:	4603      	mov	r3, r0
 8007a08:	2280      	movs	r2, #128	@ 0x80
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f001 f8dc 	bl	8008bc8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	7959      	ldrb	r1, [r3, #5]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007a20:	687a      	ldr	r2, [r7, #4]
 8007a22:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007a24:	9202      	str	r2, [sp, #8]
 8007a26:	2200      	movs	r2, #0
 8007a28:	9201      	str	r2, [sp, #4]
 8007a2a:	9300      	str	r3, [sp, #0]
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	2200      	movs	r2, #0
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f001 f8c9 	bl	8008bc8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007a36:	e173      	b.n	8007d20 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a38:	7bbb      	ldrb	r3, [r7, #14]
 8007a3a:	2b03      	cmp	r3, #3
 8007a3c:	f040 8170 	bne.w	8007d20 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007a46:	3301      	adds	r3, #1
 8007a48:	b2da      	uxtb	r2, r3
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007a56:	2b03      	cmp	r3, #3
 8007a58:	d903      	bls.n	8007a62 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	220d      	movs	r2, #13
 8007a5e:	701a      	strb	r2, [r3, #0]
      break;
 8007a60:	e15e      	b.n	8007d20 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	795b      	ldrb	r3, [r3, #5]
 8007a66:	4619      	mov	r1, r3
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f001 f8fd 	bl	8008c68 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	791b      	ldrb	r3, [r3, #4]
 8007a72:	4619      	mov	r1, r3
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f001 f8f7 	bl	8008c68 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	701a      	strb	r2, [r3, #0]
      break;
 8007a80:	e14e      	b.n	8007d20 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007a82:	2112      	movs	r1, #18
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f000 f9ef 	bl	8007e68 <USBH_Get_DevDesc>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007a8e:	7bbb      	ldrb	r3, [r7, #14]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d103      	bne.n	8007a9c <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2202      	movs	r2, #2
 8007a98:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007a9a:	e143      	b.n	8007d24 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a9c:	7bbb      	ldrb	r3, [r7, #14]
 8007a9e:	2b03      	cmp	r3, #3
 8007aa0:	f040 8140 	bne.w	8007d24 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007aaa:	3301      	adds	r3, #1
 8007aac:	b2da      	uxtb	r2, r3
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007aba:	2b03      	cmp	r3, #3
 8007abc:	d903      	bls.n	8007ac6 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	220d      	movs	r2, #13
 8007ac2:	701a      	strb	r2, [r3, #0]
      break;
 8007ac4:	e12e      	b.n	8007d24 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	795b      	ldrb	r3, [r3, #5]
 8007aca:	4619      	mov	r1, r3
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f001 f8cb 	bl	8008c68 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	791b      	ldrb	r3, [r3, #4]
 8007ad6:	4619      	mov	r1, r3
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f001 f8c5 	bl	8008c68 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	701a      	strb	r2, [r3, #0]
      break;
 8007aea:	e11b      	b.n	8007d24 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007aec:	2101      	movs	r1, #1
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f000 fa79 	bl	8007fe6 <USBH_SetAddress>
 8007af4:	4603      	mov	r3, r0
 8007af6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007af8:	7bbb      	ldrb	r3, [r7, #14]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d130      	bne.n	8007b60 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8007afe:	2002      	movs	r0, #2
 8007b00:	f001 fbab 	bl	800925a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2201      	movs	r2, #1
 8007b08:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2203      	movs	r2, #3
 8007b10:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	7919      	ldrb	r1, [r3, #4]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007b22:	687a      	ldr	r2, [r7, #4]
 8007b24:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007b26:	9202      	str	r2, [sp, #8]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	9201      	str	r2, [sp, #4]
 8007b2c:	9300      	str	r3, [sp, #0]
 8007b2e:	4603      	mov	r3, r0
 8007b30:	2280      	movs	r2, #128	@ 0x80
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f001 f848 	bl	8008bc8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	7959      	ldrb	r1, [r3, #5]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007b48:	687a      	ldr	r2, [r7, #4]
 8007b4a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007b4c:	9202      	str	r2, [sp, #8]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	9201      	str	r2, [sp, #4]
 8007b52:	9300      	str	r3, [sp, #0]
 8007b54:	4603      	mov	r3, r0
 8007b56:	2200      	movs	r2, #0
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f001 f835 	bl	8008bc8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007b5e:	e0e3      	b.n	8007d28 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b60:	7bbb      	ldrb	r3, [r7, #14]
 8007b62:	2b03      	cmp	r3, #3
 8007b64:	f040 80e0 	bne.w	8007d28 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	220d      	movs	r2, #13
 8007b6c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2200      	movs	r2, #0
 8007b72:	705a      	strb	r2, [r3, #1]
      break;
 8007b74:	e0d8      	b.n	8007d28 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007b76:	2109      	movs	r1, #9
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f000 f9a1 	bl	8007ec0 <USBH_Get_CfgDesc>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007b82:	7bbb      	ldrb	r3, [r7, #14]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d103      	bne.n	8007b90 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2204      	movs	r2, #4
 8007b8c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007b8e:	e0cd      	b.n	8007d2c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b90:	7bbb      	ldrb	r3, [r7, #14]
 8007b92:	2b03      	cmp	r3, #3
 8007b94:	f040 80ca 	bne.w	8007d2c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007b9e:	3301      	adds	r3, #1
 8007ba0:	b2da      	uxtb	r2, r3
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007bae:	2b03      	cmp	r3, #3
 8007bb0:	d903      	bls.n	8007bba <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	220d      	movs	r2, #13
 8007bb6:	701a      	strb	r2, [r3, #0]
      break;
 8007bb8:	e0b8      	b.n	8007d2c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	795b      	ldrb	r3, [r3, #5]
 8007bbe:	4619      	mov	r1, r3
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f001 f851 	bl	8008c68 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	791b      	ldrb	r3, [r3, #4]
 8007bca:	4619      	mov	r1, r3
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f001 f84b 	bl	8008c68 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	701a      	strb	r2, [r3, #0]
      break;
 8007bde:	e0a5      	b.n	8007d2c <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8007be6:	4619      	mov	r1, r3
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f000 f969 	bl	8007ec0 <USBH_Get_CfgDesc>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007bf2:	7bbb      	ldrb	r3, [r7, #14]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d103      	bne.n	8007c00 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2205      	movs	r2, #5
 8007bfc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007bfe:	e097      	b.n	8007d30 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c00:	7bbb      	ldrb	r3, [r7, #14]
 8007c02:	2b03      	cmp	r3, #3
 8007c04:	f040 8094 	bne.w	8007d30 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007c0e:	3301      	adds	r3, #1
 8007c10:	b2da      	uxtb	r2, r3
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007c1e:	2b03      	cmp	r3, #3
 8007c20:	d903      	bls.n	8007c2a <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	220d      	movs	r2, #13
 8007c26:	701a      	strb	r2, [r3, #0]
      break;
 8007c28:	e082      	b.n	8007d30 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	795b      	ldrb	r3, [r3, #5]
 8007c2e:	4619      	mov	r1, r3
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f001 f819 	bl	8008c68 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	791b      	ldrb	r3, [r3, #4]
 8007c3a:	4619      	mov	r1, r3
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f001 f813 	bl	8008c68 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2200      	movs	r2, #0
 8007c46:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	701a      	strb	r2, [r3, #0]
      break;
 8007c4e:	e06f      	b.n	8007d30 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d019      	beq.n	8007c8e <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007c66:	23ff      	movs	r3, #255	@ 0xff
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f000 f953 	bl	8007f14 <USBH_Get_StringDesc>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007c72:	7bbb      	ldrb	r3, [r7, #14]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d103      	bne.n	8007c80 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2206      	movs	r2, #6
 8007c7c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007c7e:	e059      	b.n	8007d34 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c80:	7bbb      	ldrb	r3, [r7, #14]
 8007c82:	2b03      	cmp	r3, #3
 8007c84:	d156      	bne.n	8007d34 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2206      	movs	r2, #6
 8007c8a:	705a      	strb	r2, [r3, #1]
      break;
 8007c8c:	e052      	b.n	8007d34 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2206      	movs	r2, #6
 8007c92:	705a      	strb	r2, [r3, #1]
      break;
 8007c94:	e04e      	b.n	8007d34 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d019      	beq.n	8007cd4 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007cac:	23ff      	movs	r3, #255	@ 0xff
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f000 f930 	bl	8007f14 <USBH_Get_StringDesc>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007cb8:	7bbb      	ldrb	r3, [r7, #14]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d103      	bne.n	8007cc6 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2207      	movs	r2, #7
 8007cc2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007cc4:	e038      	b.n	8007d38 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007cc6:	7bbb      	ldrb	r3, [r7, #14]
 8007cc8:	2b03      	cmp	r3, #3
 8007cca:	d135      	bne.n	8007d38 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2207      	movs	r2, #7
 8007cd0:	705a      	strb	r2, [r3, #1]
      break;
 8007cd2:	e031      	b.n	8007d38 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2207      	movs	r2, #7
 8007cd8:	705a      	strb	r2, [r3, #1]
      break;
 8007cda:	e02d      	b.n	8007d38 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d017      	beq.n	8007d16 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007cf2:	23ff      	movs	r3, #255	@ 0xff
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f000 f90d 	bl	8007f14 <USBH_Get_StringDesc>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007cfe:	7bbb      	ldrb	r3, [r7, #14]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d102      	bne.n	8007d0a <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007d04:	2300      	movs	r3, #0
 8007d06:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007d08:	e018      	b.n	8007d3c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007d0a:	7bbb      	ldrb	r3, [r7, #14]
 8007d0c:	2b03      	cmp	r3, #3
 8007d0e:	d115      	bne.n	8007d3c <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8007d10:	2300      	movs	r3, #0
 8007d12:	73fb      	strb	r3, [r7, #15]
      break;
 8007d14:	e012      	b.n	8007d3c <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8007d16:	2300      	movs	r3, #0
 8007d18:	73fb      	strb	r3, [r7, #15]
      break;
 8007d1a:	e00f      	b.n	8007d3c <USBH_HandleEnum+0x3b4>

    default:
      break;
 8007d1c:	bf00      	nop
 8007d1e:	e00e      	b.n	8007d3e <USBH_HandleEnum+0x3b6>
      break;
 8007d20:	bf00      	nop
 8007d22:	e00c      	b.n	8007d3e <USBH_HandleEnum+0x3b6>
      break;
 8007d24:	bf00      	nop
 8007d26:	e00a      	b.n	8007d3e <USBH_HandleEnum+0x3b6>
      break;
 8007d28:	bf00      	nop
 8007d2a:	e008      	b.n	8007d3e <USBH_HandleEnum+0x3b6>
      break;
 8007d2c:	bf00      	nop
 8007d2e:	e006      	b.n	8007d3e <USBH_HandleEnum+0x3b6>
      break;
 8007d30:	bf00      	nop
 8007d32:	e004      	b.n	8007d3e <USBH_HandleEnum+0x3b6>
      break;
 8007d34:	bf00      	nop
 8007d36:	e002      	b.n	8007d3e <USBH_HandleEnum+0x3b6>
      break;
 8007d38:	bf00      	nop
 8007d3a:	e000      	b.n	8007d3e <USBH_HandleEnum+0x3b6>
      break;
 8007d3c:	bf00      	nop
  }
  return Status;
 8007d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3710      	adds	r7, #16
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}

08007d48 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b083      	sub	sp, #12
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	683a      	ldr	r2, [r7, #0]
 8007d56:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8007d5a:	bf00      	nop
 8007d5c:	370c      	adds	r7, #12
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d64:	4770      	bx	lr

08007d66 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007d66:	b580      	push	{r7, lr}
 8007d68:	b082      	sub	sp, #8
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007d74:	1c5a      	adds	r2, r3, #1
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 f804 	bl	8007d8a <USBH_HandleSof>
}
 8007d82:	bf00      	nop
 8007d84:	3708      	adds	r7, #8
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}

08007d8a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007d8a:	b580      	push	{r7, lr}
 8007d8c:	b082      	sub	sp, #8
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	781b      	ldrb	r3, [r3, #0]
 8007d96:	b2db      	uxtb	r3, r3
 8007d98:	2b0b      	cmp	r3, #11
 8007d9a:	d10a      	bne.n	8007db2 <USBH_HandleSof+0x28>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d005      	beq.n	8007db2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007dac:	699b      	ldr	r3, [r3, #24]
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	4798      	blx	r3
  }
}
 8007db2:	bf00      	nop
 8007db4:	3708      	adds	r7, #8
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}

08007dba <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007dba:	b480      	push	{r7}
 8007dbc:	b083      	sub	sp, #12
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2201      	movs	r2, #1
 8007dc6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007dca:	bf00      	nop
}
 8007dcc:	370c      	adds	r7, #12
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd4:	4770      	bx	lr

08007dd6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007dd6:	b480      	push	{r7}
 8007dd8:	b083      	sub	sp, #12
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2200      	movs	r2, #0
 8007de2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8007de6:	bf00      	nop
}
 8007de8:	370c      	adds	r7, #12
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr

08007df2 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007df2:	b480      	push	{r7}
 8007df4:	b083      	sub	sp, #12
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2200      	movs	r2, #0
 8007e06:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007e12:	2300      	movs	r3, #0
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	370c      	adds	r7, #12
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr

08007e20 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b082      	sub	sp, #8
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2200      	movs	r2, #0
 8007e34:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f001 f8be 	bl	8008fc2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	791b      	ldrb	r3, [r3, #4]
 8007e4a:	4619      	mov	r1, r3
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f000 ff0b 	bl	8008c68 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	795b      	ldrb	r3, [r3, #5]
 8007e56:	4619      	mov	r1, r3
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f000 ff05 	bl	8008c68 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007e5e:	2300      	movs	r3, #0
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	3708      	adds	r7, #8
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b086      	sub	sp, #24
 8007e6c:	af02      	add	r7, sp, #8
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	460b      	mov	r3, r1
 8007e72:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8007e74:	887b      	ldrh	r3, [r7, #2]
 8007e76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e7a:	d901      	bls.n	8007e80 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007e7c:	2303      	movs	r3, #3
 8007e7e:	e01b      	b.n	8007eb8 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007e86:	887b      	ldrh	r3, [r7, #2]
 8007e88:	9300      	str	r3, [sp, #0]
 8007e8a:	4613      	mov	r3, r2
 8007e8c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007e90:	2100      	movs	r1, #0
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f000 f872 	bl	8007f7c <USBH_GetDescriptor>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8007e9c:	7bfb      	ldrb	r3, [r7, #15]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d109      	bne.n	8007eb6 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007ea8:	887a      	ldrh	r2, [r7, #2]
 8007eaa:	4619      	mov	r1, r3
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f000 f929 	bl	8008104 <USBH_ParseDevDesc>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	3710      	adds	r7, #16
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}

08007ec0 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b086      	sub	sp, #24
 8007ec4:	af02      	add	r7, sp, #8
 8007ec6:	6078      	str	r0, [r7, #4]
 8007ec8:	460b      	mov	r3, r1
 8007eca:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	331c      	adds	r3, #28
 8007ed0:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8007ed2:	887b      	ldrh	r3, [r7, #2]
 8007ed4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ed8:	d901      	bls.n	8007ede <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007eda:	2303      	movs	r3, #3
 8007edc:	e016      	b.n	8007f0c <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007ede:	887b      	ldrh	r3, [r7, #2]
 8007ee0:	9300      	str	r3, [sp, #0]
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007ee8:	2100      	movs	r1, #0
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f000 f846 	bl	8007f7c <USBH_GetDescriptor>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007ef4:	7bfb      	ldrb	r3, [r7, #15]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d107      	bne.n	8007f0a <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007efa:	887b      	ldrh	r3, [r7, #2]
 8007efc:	461a      	mov	r2, r3
 8007efe:	68b9      	ldr	r1, [r7, #8]
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f000 f9af 	bl	8008264 <USBH_ParseCfgDesc>
 8007f06:	4603      	mov	r3, r0
 8007f08:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3710      	adds	r7, #16
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}

08007f14 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b088      	sub	sp, #32
 8007f18:	af02      	add	r7, sp, #8
 8007f1a:	60f8      	str	r0, [r7, #12]
 8007f1c:	607a      	str	r2, [r7, #4]
 8007f1e:	461a      	mov	r2, r3
 8007f20:	460b      	mov	r3, r1
 8007f22:	72fb      	strb	r3, [r7, #11]
 8007f24:	4613      	mov	r3, r2
 8007f26:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8007f28:	893b      	ldrh	r3, [r7, #8]
 8007f2a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f2e:	d802      	bhi.n	8007f36 <USBH_Get_StringDesc+0x22>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d101      	bne.n	8007f3a <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007f36:	2303      	movs	r3, #3
 8007f38:	e01c      	b.n	8007f74 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8007f3a:	7afb      	ldrb	r3, [r7, #11]
 8007f3c:	b29b      	uxth	r3, r3
 8007f3e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8007f42:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007f4a:	893b      	ldrh	r3, [r7, #8]
 8007f4c:	9300      	str	r3, [sp, #0]
 8007f4e:	460b      	mov	r3, r1
 8007f50:	2100      	movs	r1, #0
 8007f52:	68f8      	ldr	r0, [r7, #12]
 8007f54:	f000 f812 	bl	8007f7c <USBH_GetDescriptor>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007f5c:	7dfb      	ldrb	r3, [r7, #23]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d107      	bne.n	8007f72 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007f68:	893a      	ldrh	r2, [r7, #8]
 8007f6a:	6879      	ldr	r1, [r7, #4]
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f000 fb8d 	bl	800868c <USBH_ParseStringDesc>
  }

  return status;
 8007f72:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	3718      	adds	r7, #24
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}

08007f7c <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b084      	sub	sp, #16
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	60f8      	str	r0, [r7, #12]
 8007f84:	607b      	str	r3, [r7, #4]
 8007f86:	460b      	mov	r3, r1
 8007f88:	72fb      	strb	r3, [r7, #11]
 8007f8a:	4613      	mov	r3, r2
 8007f8c:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	789b      	ldrb	r3, [r3, #2]
 8007f92:	2b01      	cmp	r3, #1
 8007f94:	d11c      	bne.n	8007fd0 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007f96:	7afb      	ldrb	r3, [r7, #11]
 8007f98:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007f9c:	b2da      	uxtb	r2, r3
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	2206      	movs	r2, #6
 8007fa6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	893a      	ldrh	r2, [r7, #8]
 8007fac:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007fae:	893b      	ldrh	r3, [r7, #8]
 8007fb0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007fb4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007fb8:	d104      	bne.n	8007fc4 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	f240 4209 	movw	r2, #1033	@ 0x409
 8007fc0:	829a      	strh	r2, [r3, #20]
 8007fc2:	e002      	b.n	8007fca <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	8b3a      	ldrh	r2, [r7, #24]
 8007fce:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007fd0:	8b3b      	ldrh	r3, [r7, #24]
 8007fd2:	461a      	mov	r2, r3
 8007fd4:	6879      	ldr	r1, [r7, #4]
 8007fd6:	68f8      	ldr	r0, [r7, #12]
 8007fd8:	f000 fba5 	bl	8008726 <USBH_CtlReq>
 8007fdc:	4603      	mov	r3, r0
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3710      	adds	r7, #16
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}

08007fe6 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007fe6:	b580      	push	{r7, lr}
 8007fe8:	b082      	sub	sp, #8
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]
 8007fee:	460b      	mov	r3, r1
 8007ff0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	789b      	ldrb	r3, [r3, #2]
 8007ff6:	2b01      	cmp	r3, #1
 8007ff8:	d10f      	bne.n	800801a <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2205      	movs	r2, #5
 8008004:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008006:	78fb      	ldrb	r3, [r7, #3]
 8008008:	b29a      	uxth	r2, r3
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2200      	movs	r2, #0
 8008012:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2200      	movs	r2, #0
 8008018:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800801a:	2200      	movs	r2, #0
 800801c:	2100      	movs	r1, #0
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f000 fb81 	bl	8008726 <USBH_CtlReq>
 8008024:	4603      	mov	r3, r0
}
 8008026:	4618      	mov	r0, r3
 8008028:	3708      	adds	r7, #8
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}

0800802e <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800802e:	b580      	push	{r7, lr}
 8008030:	b082      	sub	sp, #8
 8008032:	af00      	add	r7, sp, #0
 8008034:	6078      	str	r0, [r7, #4]
 8008036:	460b      	mov	r3, r1
 8008038:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	789b      	ldrb	r3, [r3, #2]
 800803e:	2b01      	cmp	r3, #1
 8008040:	d10e      	bne.n	8008060 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2200      	movs	r2, #0
 8008046:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2209      	movs	r2, #9
 800804c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	887a      	ldrh	r2, [r7, #2]
 8008052:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2200      	movs	r2, #0
 8008058:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2200      	movs	r2, #0
 800805e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008060:	2200      	movs	r2, #0
 8008062:	2100      	movs	r1, #0
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f000 fb5e 	bl	8008726 <USBH_CtlReq>
 800806a:	4603      	mov	r3, r0
}
 800806c:	4618      	mov	r0, r3
 800806e:	3708      	adds	r7, #8
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}

08008074 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b082      	sub	sp, #8
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
 800807c:	460b      	mov	r3, r1
 800807e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	789b      	ldrb	r3, [r3, #2]
 8008084:	2b01      	cmp	r3, #1
 8008086:	d10f      	bne.n	80080a8 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2200      	movs	r2, #0
 800808c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2203      	movs	r2, #3
 8008092:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008094:	78fb      	ldrb	r3, [r7, #3]
 8008096:	b29a      	uxth	r2, r3
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2200      	movs	r2, #0
 80080a0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2200      	movs	r2, #0
 80080a6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80080a8:	2200      	movs	r2, #0
 80080aa:	2100      	movs	r1, #0
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f000 fb3a 	bl	8008726 <USBH_CtlReq>
 80080b2:	4603      	mov	r3, r0
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	3708      	adds	r7, #8
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}

080080bc <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b082      	sub	sp, #8
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
 80080c4:	460b      	mov	r3, r1
 80080c6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	789b      	ldrb	r3, [r3, #2]
 80080cc:	2b01      	cmp	r3, #1
 80080ce:	d10f      	bne.n	80080f0 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2202      	movs	r2, #2
 80080d4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2201      	movs	r2, #1
 80080da:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2200      	movs	r2, #0
 80080e0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80080e2:	78fb      	ldrb	r3, [r7, #3]
 80080e4:	b29a      	uxth	r2, r3
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2200      	movs	r2, #0
 80080ee:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80080f0:	2200      	movs	r2, #0
 80080f2:	2100      	movs	r1, #0
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f000 fb16 	bl	8008726 <USBH_CtlReq>
 80080fa:	4603      	mov	r3, r0
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3708      	adds	r7, #8
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}

08008104 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008104:	b480      	push	{r7}
 8008106:	b087      	sub	sp, #28
 8008108:	af00      	add	r7, sp, #0
 800810a:	60f8      	str	r0, [r7, #12]
 800810c:	60b9      	str	r1, [r7, #8]
 800810e:	4613      	mov	r3, r2
 8008110:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008118:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800811a:	2300      	movs	r3, #0
 800811c:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d101      	bne.n	8008128 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8008124:	2302      	movs	r3, #2
 8008126:	e094      	b.n	8008252 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	781a      	ldrb	r2, [r3, #0]
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	785a      	ldrb	r2, [r3, #1]
 8008134:	693b      	ldr	r3, [r7, #16]
 8008136:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	3302      	adds	r3, #2
 800813c:	781b      	ldrb	r3, [r3, #0]
 800813e:	461a      	mov	r2, r3
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	3303      	adds	r3, #3
 8008144:	781b      	ldrb	r3, [r3, #0]
 8008146:	021b      	lsls	r3, r3, #8
 8008148:	b29b      	uxth	r3, r3
 800814a:	4313      	orrs	r3, r2
 800814c:	b29a      	uxth	r2, r3
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	791a      	ldrb	r2, [r3, #4]
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	795a      	ldrb	r2, [r3, #5]
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	799a      	ldrb	r2, [r3, #6]
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	79da      	ldrb	r2, [r3, #7]
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008178:	2b00      	cmp	r3, #0
 800817a:	d004      	beq.n	8008186 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008182:	2b01      	cmp	r3, #1
 8008184:	d11b      	bne.n	80081be <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	79db      	ldrb	r3, [r3, #7]
 800818a:	2b20      	cmp	r3, #32
 800818c:	dc0f      	bgt.n	80081ae <USBH_ParseDevDesc+0xaa>
 800818e:	2b08      	cmp	r3, #8
 8008190:	db0f      	blt.n	80081b2 <USBH_ParseDevDesc+0xae>
 8008192:	3b08      	subs	r3, #8
 8008194:	4a32      	ldr	r2, [pc, #200]	@ (8008260 <USBH_ParseDevDesc+0x15c>)
 8008196:	fa22 f303 	lsr.w	r3, r2, r3
 800819a:	f003 0301 	and.w	r3, r3, #1
 800819e:	2b00      	cmp	r3, #0
 80081a0:	bf14      	ite	ne
 80081a2:	2301      	movne	r3, #1
 80081a4:	2300      	moveq	r3, #0
 80081a6:	b2db      	uxtb	r3, r3
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d106      	bne.n	80081ba <USBH_ParseDevDesc+0xb6>
 80081ac:	e001      	b.n	80081b2 <USBH_ParseDevDesc+0xae>
 80081ae:	2b40      	cmp	r3, #64	@ 0x40
 80081b0:	d003      	beq.n	80081ba <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	2208      	movs	r2, #8
 80081b6:	71da      	strb	r2, [r3, #7]
        break;
 80081b8:	e000      	b.n	80081bc <USBH_ParseDevDesc+0xb8>
        break;
 80081ba:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 80081bc:	e00e      	b.n	80081dc <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80081c4:	2b02      	cmp	r3, #2
 80081c6:	d107      	bne.n	80081d8 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 80081c8:	693b      	ldr	r3, [r7, #16]
 80081ca:	79db      	ldrb	r3, [r3, #7]
 80081cc:	2b08      	cmp	r3, #8
 80081ce:	d005      	beq.n	80081dc <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	2208      	movs	r2, #8
 80081d4:	71da      	strb	r2, [r3, #7]
 80081d6:	e001      	b.n	80081dc <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80081d8:	2303      	movs	r3, #3
 80081da:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 80081dc:	88fb      	ldrh	r3, [r7, #6]
 80081de:	2b08      	cmp	r3, #8
 80081e0:	d936      	bls.n	8008250 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	3308      	adds	r3, #8
 80081e6:	781b      	ldrb	r3, [r3, #0]
 80081e8:	461a      	mov	r2, r3
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	3309      	adds	r3, #9
 80081ee:	781b      	ldrb	r3, [r3, #0]
 80081f0:	021b      	lsls	r3, r3, #8
 80081f2:	b29b      	uxth	r3, r3
 80081f4:	4313      	orrs	r3, r2
 80081f6:	b29a      	uxth	r2, r3
 80081f8:	693b      	ldr	r3, [r7, #16]
 80081fa:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	330a      	adds	r3, #10
 8008200:	781b      	ldrb	r3, [r3, #0]
 8008202:	461a      	mov	r2, r3
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	330b      	adds	r3, #11
 8008208:	781b      	ldrb	r3, [r3, #0]
 800820a:	021b      	lsls	r3, r3, #8
 800820c:	b29b      	uxth	r3, r3
 800820e:	4313      	orrs	r3, r2
 8008210:	b29a      	uxth	r2, r3
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	330c      	adds	r3, #12
 800821a:	781b      	ldrb	r3, [r3, #0]
 800821c:	461a      	mov	r2, r3
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	330d      	adds	r3, #13
 8008222:	781b      	ldrb	r3, [r3, #0]
 8008224:	021b      	lsls	r3, r3, #8
 8008226:	b29b      	uxth	r3, r3
 8008228:	4313      	orrs	r3, r2
 800822a:	b29a      	uxth	r2, r3
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	7b9a      	ldrb	r2, [r3, #14]
 8008234:	693b      	ldr	r3, [r7, #16]
 8008236:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	7bda      	ldrb	r2, [r3, #15]
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	7c1a      	ldrb	r2, [r3, #16]
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	7c5a      	ldrb	r2, [r3, #17]
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8008250:	7dfb      	ldrb	r3, [r7, #23]
}
 8008252:	4618      	mov	r0, r3
 8008254:	371c      	adds	r7, #28
 8008256:	46bd      	mov	sp, r7
 8008258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825c:	4770      	bx	lr
 800825e:	bf00      	nop
 8008260:	01000101 	.word	0x01000101

08008264 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b08c      	sub	sp, #48	@ 0x30
 8008268:	af00      	add	r7, sp, #0
 800826a:	60f8      	str	r0, [r7, #12]
 800826c:	60b9      	str	r1, [r7, #8]
 800826e:	4613      	mov	r3, r2
 8008270:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008278:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800827a:	2300      	movs	r3, #0
 800827c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008280:	2300      	movs	r3, #0
 8008282:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8008286:	2300      	movs	r3, #0
 8008288:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d101      	bne.n	8008296 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8008292:	2302      	movs	r3, #2
 8008294:	e0da      	b.n	800844c <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800829a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800829c:	781b      	ldrb	r3, [r3, #0]
 800829e:	2b09      	cmp	r3, #9
 80082a0:	d002      	beq.n	80082a8 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80082a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082a4:	2209      	movs	r2, #9
 80082a6:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	781a      	ldrb	r2, [r3, #0]
 80082ac:	6a3b      	ldr	r3, [r7, #32]
 80082ae:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	785a      	ldrb	r2, [r3, #1]
 80082b4:	6a3b      	ldr	r3, [r7, #32]
 80082b6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	3302      	adds	r3, #2
 80082bc:	781b      	ldrb	r3, [r3, #0]
 80082be:	461a      	mov	r2, r3
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	3303      	adds	r3, #3
 80082c4:	781b      	ldrb	r3, [r3, #0]
 80082c6:	021b      	lsls	r3, r3, #8
 80082c8:	b29b      	uxth	r3, r3
 80082ca:	4313      	orrs	r3, r2
 80082cc:	b29b      	uxth	r3, r3
 80082ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082d2:	bf28      	it	cs
 80082d4:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 80082d8:	b29a      	uxth	r2, r3
 80082da:	6a3b      	ldr	r3, [r7, #32]
 80082dc:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	791a      	ldrb	r2, [r3, #4]
 80082e2:	6a3b      	ldr	r3, [r7, #32]
 80082e4:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	795a      	ldrb	r2, [r3, #5]
 80082ea:	6a3b      	ldr	r3, [r7, #32]
 80082ec:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	799a      	ldrb	r2, [r3, #6]
 80082f2:	6a3b      	ldr	r3, [r7, #32]
 80082f4:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	79da      	ldrb	r2, [r3, #7]
 80082fa:	6a3b      	ldr	r3, [r7, #32]
 80082fc:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	7a1a      	ldrb	r2, [r3, #8]
 8008302:	6a3b      	ldr	r3, [r7, #32]
 8008304:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008306:	88fb      	ldrh	r3, [r7, #6]
 8008308:	2b09      	cmp	r3, #9
 800830a:	f240 809d 	bls.w	8008448 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800830e:	2309      	movs	r3, #9
 8008310:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008312:	2300      	movs	r3, #0
 8008314:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008316:	e081      	b.n	800841c <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008318:	f107 0316 	add.w	r3, r7, #22
 800831c:	4619      	mov	r1, r3
 800831e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008320:	f000 f9e7 	bl	80086f2 <USBH_GetNextDesc>
 8008324:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008328:	785b      	ldrb	r3, [r3, #1]
 800832a:	2b04      	cmp	r3, #4
 800832c:	d176      	bne.n	800841c <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800832e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008330:	781b      	ldrb	r3, [r3, #0]
 8008332:	2b09      	cmp	r3, #9
 8008334:	d002      	beq.n	800833c <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008338:	2209      	movs	r2, #9
 800833a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800833c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008340:	221a      	movs	r2, #26
 8008342:	fb02 f303 	mul.w	r3, r2, r3
 8008346:	3308      	adds	r3, #8
 8008348:	6a3a      	ldr	r2, [r7, #32]
 800834a:	4413      	add	r3, r2
 800834c:	3302      	adds	r3, #2
 800834e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008350:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008352:	69f8      	ldr	r0, [r7, #28]
 8008354:	f000 f87e 	bl	8008454 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008358:	2300      	movs	r3, #0
 800835a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800835e:	2300      	movs	r3, #0
 8008360:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008362:	e043      	b.n	80083ec <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008364:	f107 0316 	add.w	r3, r7, #22
 8008368:	4619      	mov	r1, r3
 800836a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800836c:	f000 f9c1 	bl	80086f2 <USBH_GetNextDesc>
 8008370:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008374:	785b      	ldrb	r3, [r3, #1]
 8008376:	2b05      	cmp	r3, #5
 8008378:	d138      	bne.n	80083ec <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800837a:	69fb      	ldr	r3, [r7, #28]
 800837c:	795b      	ldrb	r3, [r3, #5]
 800837e:	2b01      	cmp	r3, #1
 8008380:	d113      	bne.n	80083aa <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008382:	69fb      	ldr	r3, [r7, #28]
 8008384:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8008386:	2b02      	cmp	r3, #2
 8008388:	d003      	beq.n	8008392 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800838a:	69fb      	ldr	r3, [r7, #28]
 800838c:	799b      	ldrb	r3, [r3, #6]
 800838e:	2b03      	cmp	r3, #3
 8008390:	d10b      	bne.n	80083aa <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008392:	69fb      	ldr	r3, [r7, #28]
 8008394:	79db      	ldrb	r3, [r3, #7]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d10b      	bne.n	80083b2 <USBH_ParseCfgDesc+0x14e>
 800839a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800839c:	781b      	ldrb	r3, [r3, #0]
 800839e:	2b09      	cmp	r3, #9
 80083a0:	d007      	beq.n	80083b2 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 80083a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083a4:	2209      	movs	r2, #9
 80083a6:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80083a8:	e003      	b.n	80083b2 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80083aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083ac:	2207      	movs	r2, #7
 80083ae:	701a      	strb	r2, [r3, #0]
 80083b0:	e000      	b.n	80083b4 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80083b2:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80083b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80083b8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80083bc:	3201      	adds	r2, #1
 80083be:	00d2      	lsls	r2, r2, #3
 80083c0:	211a      	movs	r1, #26
 80083c2:	fb01 f303 	mul.w	r3, r1, r3
 80083c6:	4413      	add	r3, r2
 80083c8:	3308      	adds	r3, #8
 80083ca:	6a3a      	ldr	r2, [r7, #32]
 80083cc:	4413      	add	r3, r2
 80083ce:	3304      	adds	r3, #4
 80083d0:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80083d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80083d4:	69b9      	ldr	r1, [r7, #24]
 80083d6:	68f8      	ldr	r0, [r7, #12]
 80083d8:	f000 f870 	bl	80084bc <USBH_ParseEPDesc>
 80083dc:	4603      	mov	r3, r0
 80083de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 80083e2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80083e6:	3301      	adds	r3, #1
 80083e8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80083ec:	69fb      	ldr	r3, [r7, #28]
 80083ee:	791b      	ldrb	r3, [r3, #4]
 80083f0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d204      	bcs.n	8008402 <USBH_ParseCfgDesc+0x19e>
 80083f8:	6a3b      	ldr	r3, [r7, #32]
 80083fa:	885a      	ldrh	r2, [r3, #2]
 80083fc:	8afb      	ldrh	r3, [r7, #22]
 80083fe:	429a      	cmp	r2, r3
 8008400:	d8b0      	bhi.n	8008364 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008402:	69fb      	ldr	r3, [r7, #28]
 8008404:	791b      	ldrb	r3, [r3, #4]
 8008406:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800840a:	429a      	cmp	r2, r3
 800840c:	d201      	bcs.n	8008412 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800840e:	2303      	movs	r3, #3
 8008410:	e01c      	b.n	800844c <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8008412:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008416:	3301      	adds	r3, #1
 8008418:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800841c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008420:	2b01      	cmp	r3, #1
 8008422:	d805      	bhi.n	8008430 <USBH_ParseCfgDesc+0x1cc>
 8008424:	6a3b      	ldr	r3, [r7, #32]
 8008426:	885a      	ldrh	r2, [r3, #2]
 8008428:	8afb      	ldrh	r3, [r7, #22]
 800842a:	429a      	cmp	r2, r3
 800842c:	f63f af74 	bhi.w	8008318 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008430:	6a3b      	ldr	r3, [r7, #32]
 8008432:	791b      	ldrb	r3, [r3, #4]
 8008434:	2b02      	cmp	r3, #2
 8008436:	bf28      	it	cs
 8008438:	2302      	movcs	r3, #2
 800843a:	b2db      	uxtb	r3, r3
 800843c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008440:	429a      	cmp	r2, r3
 8008442:	d201      	bcs.n	8008448 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8008444:	2303      	movs	r3, #3
 8008446:	e001      	b.n	800844c <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8008448:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800844c:	4618      	mov	r0, r3
 800844e:	3730      	adds	r7, #48	@ 0x30
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}

08008454 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8008454:	b480      	push	{r7}
 8008456:	b083      	sub	sp, #12
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
 800845c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	781a      	ldrb	r2, [r3, #0]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	785a      	ldrb	r2, [r3, #1]
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	789a      	ldrb	r2, [r3, #2]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	78da      	ldrb	r2, [r3, #3]
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	3304      	adds	r3, #4
 8008482:	781b      	ldrb	r3, [r3, #0]
 8008484:	2b02      	cmp	r3, #2
 8008486:	bf28      	it	cs
 8008488:	2302      	movcs	r3, #2
 800848a:	b2da      	uxtb	r2, r3
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	795a      	ldrb	r2, [r3, #5]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	799a      	ldrb	r2, [r3, #6]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	79da      	ldrb	r2, [r3, #7]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	7a1a      	ldrb	r2, [r3, #8]
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	721a      	strb	r2, [r3, #8]
}
 80084b0:	bf00      	nop
 80084b2:	370c      	adds	r7, #12
 80084b4:	46bd      	mov	sp, r7
 80084b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ba:	4770      	bx	lr

080084bc <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 80084bc:	b480      	push	{r7}
 80084be:	b087      	sub	sp, #28
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	60f8      	str	r0, [r7, #12]
 80084c4:	60b9      	str	r1, [r7, #8]
 80084c6:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80084c8:	2300      	movs	r3, #0
 80084ca:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	781a      	ldrb	r2, [r3, #0]
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	785a      	ldrb	r2, [r3, #1]
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	789a      	ldrb	r2, [r3, #2]
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	78da      	ldrb	r2, [r3, #3]
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	3304      	adds	r3, #4
 80084f0:	781b      	ldrb	r3, [r3, #0]
 80084f2:	461a      	mov	r2, r3
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	3305      	adds	r3, #5
 80084f8:	781b      	ldrb	r3, [r3, #0]
 80084fa:	021b      	lsls	r3, r3, #8
 80084fc:	b29b      	uxth	r3, r3
 80084fe:	4313      	orrs	r3, r2
 8008500:	b29a      	uxth	r2, r3
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	799a      	ldrb	r2, [r3, #6]
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	889b      	ldrh	r3, [r3, #4]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d009      	beq.n	800852a <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800851a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800851e:	d804      	bhi.n	800852a <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008524:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008528:	d901      	bls.n	800852e <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800852a:	2303      	movs	r3, #3
 800852c:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008534:	2b00      	cmp	r3, #0
 8008536:	d136      	bne.n	80085a6 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	78db      	ldrb	r3, [r3, #3]
 800853c:	f003 0303 	and.w	r3, r3, #3
 8008540:	2b02      	cmp	r3, #2
 8008542:	d108      	bne.n	8008556 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	889b      	ldrh	r3, [r3, #4]
 8008548:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800854c:	f240 8097 	bls.w	800867e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008550:	2303      	movs	r3, #3
 8008552:	75fb      	strb	r3, [r7, #23]
 8008554:	e093      	b.n	800867e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	78db      	ldrb	r3, [r3, #3]
 800855a:	f003 0303 	and.w	r3, r3, #3
 800855e:	2b00      	cmp	r3, #0
 8008560:	d107      	bne.n	8008572 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	889b      	ldrh	r3, [r3, #4]
 8008566:	2b40      	cmp	r3, #64	@ 0x40
 8008568:	f240 8089 	bls.w	800867e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800856c:	2303      	movs	r3, #3
 800856e:	75fb      	strb	r3, [r7, #23]
 8008570:	e085      	b.n	800867e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	78db      	ldrb	r3, [r3, #3]
 8008576:	f003 0303 	and.w	r3, r3, #3
 800857a:	2b01      	cmp	r3, #1
 800857c:	d005      	beq.n	800858a <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800857e:	68bb      	ldr	r3, [r7, #8]
 8008580:	78db      	ldrb	r3, [r3, #3]
 8008582:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008586:	2b03      	cmp	r3, #3
 8008588:	d10a      	bne.n	80085a0 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	799b      	ldrb	r3, [r3, #6]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d003      	beq.n	800859a <USBH_ParseEPDesc+0xde>
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	799b      	ldrb	r3, [r3, #6]
 8008596:	2b10      	cmp	r3, #16
 8008598:	d970      	bls.n	800867c <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800859a:	2303      	movs	r3, #3
 800859c:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800859e:	e06d      	b.n	800867c <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80085a0:	2303      	movs	r3, #3
 80085a2:	75fb      	strb	r3, [r7, #23]
 80085a4:	e06b      	b.n	800867e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80085ac:	2b01      	cmp	r3, #1
 80085ae:	d13c      	bne.n	800862a <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	78db      	ldrb	r3, [r3, #3]
 80085b4:	f003 0303 	and.w	r3, r3, #3
 80085b8:	2b02      	cmp	r3, #2
 80085ba:	d005      	beq.n	80085c8 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	78db      	ldrb	r3, [r3, #3]
 80085c0:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d106      	bne.n	80085d6 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	889b      	ldrh	r3, [r3, #4]
 80085cc:	2b40      	cmp	r3, #64	@ 0x40
 80085ce:	d956      	bls.n	800867e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80085d0:	2303      	movs	r3, #3
 80085d2:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 80085d4:	e053      	b.n	800867e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	78db      	ldrb	r3, [r3, #3]
 80085da:	f003 0303 	and.w	r3, r3, #3
 80085de:	2b01      	cmp	r3, #1
 80085e0:	d10e      	bne.n	8008600 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	799b      	ldrb	r3, [r3, #6]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d007      	beq.n	80085fa <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 80085ee:	2b10      	cmp	r3, #16
 80085f0:	d803      	bhi.n	80085fa <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 80085f6:	2b40      	cmp	r3, #64	@ 0x40
 80085f8:	d941      	bls.n	800867e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80085fa:	2303      	movs	r3, #3
 80085fc:	75fb      	strb	r3, [r7, #23]
 80085fe:	e03e      	b.n	800867e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	78db      	ldrb	r3, [r3, #3]
 8008604:	f003 0303 	and.w	r3, r3, #3
 8008608:	2b03      	cmp	r3, #3
 800860a:	d10b      	bne.n	8008624 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	799b      	ldrb	r3, [r3, #6]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d004      	beq.n	800861e <USBH_ParseEPDesc+0x162>
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	889b      	ldrh	r3, [r3, #4]
 8008618:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800861c:	d32f      	bcc.n	800867e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800861e:	2303      	movs	r3, #3
 8008620:	75fb      	strb	r3, [r7, #23]
 8008622:	e02c      	b.n	800867e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008624:	2303      	movs	r3, #3
 8008626:	75fb      	strb	r3, [r7, #23]
 8008628:	e029      	b.n	800867e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008630:	2b02      	cmp	r3, #2
 8008632:	d120      	bne.n	8008676 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	78db      	ldrb	r3, [r3, #3]
 8008638:	f003 0303 	and.w	r3, r3, #3
 800863c:	2b00      	cmp	r3, #0
 800863e:	d106      	bne.n	800864e <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	889b      	ldrh	r3, [r3, #4]
 8008644:	2b08      	cmp	r3, #8
 8008646:	d01a      	beq.n	800867e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008648:	2303      	movs	r3, #3
 800864a:	75fb      	strb	r3, [r7, #23]
 800864c:	e017      	b.n	800867e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	78db      	ldrb	r3, [r3, #3]
 8008652:	f003 0303 	and.w	r3, r3, #3
 8008656:	2b03      	cmp	r3, #3
 8008658:	d10a      	bne.n	8008670 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	799b      	ldrb	r3, [r3, #6]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d003      	beq.n	800866a <USBH_ParseEPDesc+0x1ae>
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	889b      	ldrh	r3, [r3, #4]
 8008666:	2b08      	cmp	r3, #8
 8008668:	d909      	bls.n	800867e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800866a:	2303      	movs	r3, #3
 800866c:	75fb      	strb	r3, [r7, #23]
 800866e:	e006      	b.n	800867e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008670:	2303      	movs	r3, #3
 8008672:	75fb      	strb	r3, [r7, #23]
 8008674:	e003      	b.n	800867e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008676:	2303      	movs	r3, #3
 8008678:	75fb      	strb	r3, [r7, #23]
 800867a:	e000      	b.n	800867e <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800867c:	bf00      	nop
  }

  return status;
 800867e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008680:	4618      	mov	r0, r3
 8008682:	371c      	adds	r7, #28
 8008684:	46bd      	mov	sp, r7
 8008686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868a:	4770      	bx	lr

0800868c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800868c:	b480      	push	{r7}
 800868e:	b087      	sub	sp, #28
 8008690:	af00      	add	r7, sp, #0
 8008692:	60f8      	str	r0, [r7, #12]
 8008694:	60b9      	str	r1, [r7, #8]
 8008696:	4613      	mov	r3, r2
 8008698:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	3301      	adds	r3, #1
 800869e:	781b      	ldrb	r3, [r3, #0]
 80086a0:	2b03      	cmp	r3, #3
 80086a2:	d120      	bne.n	80086e6 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	781b      	ldrb	r3, [r3, #0]
 80086a8:	1e9a      	subs	r2, r3, #2
 80086aa:	88fb      	ldrh	r3, [r7, #6]
 80086ac:	4293      	cmp	r3, r2
 80086ae:	bf28      	it	cs
 80086b0:	4613      	movcs	r3, r2
 80086b2:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	3302      	adds	r3, #2
 80086b8:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80086ba:	2300      	movs	r3, #0
 80086bc:	82fb      	strh	r3, [r7, #22]
 80086be:	e00b      	b.n	80086d8 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80086c0:	8afb      	ldrh	r3, [r7, #22]
 80086c2:	68fa      	ldr	r2, [r7, #12]
 80086c4:	4413      	add	r3, r2
 80086c6:	781a      	ldrb	r2, [r3, #0]
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	701a      	strb	r2, [r3, #0]
      pdest++;
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	3301      	adds	r3, #1
 80086d0:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80086d2:	8afb      	ldrh	r3, [r7, #22]
 80086d4:	3302      	adds	r3, #2
 80086d6:	82fb      	strh	r3, [r7, #22]
 80086d8:	8afa      	ldrh	r2, [r7, #22]
 80086da:	8abb      	ldrh	r3, [r7, #20]
 80086dc:	429a      	cmp	r2, r3
 80086de:	d3ef      	bcc.n	80086c0 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	2200      	movs	r2, #0
 80086e4:	701a      	strb	r2, [r3, #0]
  }
}
 80086e6:	bf00      	nop
 80086e8:	371c      	adds	r7, #28
 80086ea:	46bd      	mov	sp, r7
 80086ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f0:	4770      	bx	lr

080086f2 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80086f2:	b480      	push	{r7}
 80086f4:	b085      	sub	sp, #20
 80086f6:	af00      	add	r7, sp, #0
 80086f8:	6078      	str	r0, [r7, #4]
 80086fa:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	881b      	ldrh	r3, [r3, #0]
 8008700:	687a      	ldr	r2, [r7, #4]
 8008702:	7812      	ldrb	r2, [r2, #0]
 8008704:	4413      	add	r3, r2
 8008706:	b29a      	uxth	r2, r3
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	781b      	ldrb	r3, [r3, #0]
 8008710:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	4413      	add	r3, r2
 8008716:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008718:	68fb      	ldr	r3, [r7, #12]
}
 800871a:	4618      	mov	r0, r3
 800871c:	3714      	adds	r7, #20
 800871e:	46bd      	mov	sp, r7
 8008720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008724:	4770      	bx	lr

08008726 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008726:	b580      	push	{r7, lr}
 8008728:	b086      	sub	sp, #24
 800872a:	af00      	add	r7, sp, #0
 800872c:	60f8      	str	r0, [r7, #12]
 800872e:	60b9      	str	r1, [r7, #8]
 8008730:	4613      	mov	r3, r2
 8008732:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008734:	2301      	movs	r3, #1
 8008736:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	789b      	ldrb	r3, [r3, #2]
 800873c:	2b01      	cmp	r3, #1
 800873e:	d002      	beq.n	8008746 <USBH_CtlReq+0x20>
 8008740:	2b02      	cmp	r3, #2
 8008742:	d00f      	beq.n	8008764 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008744:	e027      	b.n	8008796 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	68ba      	ldr	r2, [r7, #8]
 800874a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	88fa      	ldrh	r2, [r7, #6]
 8008750:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	2201      	movs	r2, #1
 8008756:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2202      	movs	r2, #2
 800875c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800875e:	2301      	movs	r3, #1
 8008760:	75fb      	strb	r3, [r7, #23]
      break;
 8008762:	e018      	b.n	8008796 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008764:	68f8      	ldr	r0, [r7, #12]
 8008766:	f000 f81b 	bl	80087a0 <USBH_HandleControl>
 800876a:	4603      	mov	r3, r0
 800876c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800876e:	7dfb      	ldrb	r3, [r7, #23]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d002      	beq.n	800877a <USBH_CtlReq+0x54>
 8008774:	7dfb      	ldrb	r3, [r7, #23]
 8008776:	2b03      	cmp	r3, #3
 8008778:	d106      	bne.n	8008788 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	2201      	movs	r2, #1
 800877e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	2200      	movs	r2, #0
 8008784:	761a      	strb	r2, [r3, #24]
      break;
 8008786:	e005      	b.n	8008794 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008788:	7dfb      	ldrb	r3, [r7, #23]
 800878a:	2b02      	cmp	r3, #2
 800878c:	d102      	bne.n	8008794 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2201      	movs	r2, #1
 8008792:	709a      	strb	r2, [r3, #2]
      break;
 8008794:	bf00      	nop
  }
  return status;
 8008796:	7dfb      	ldrb	r3, [r7, #23]
}
 8008798:	4618      	mov	r0, r3
 800879a:	3718      	adds	r7, #24
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}

080087a0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b086      	sub	sp, #24
 80087a4:	af02      	add	r7, sp, #8
 80087a6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80087a8:	2301      	movs	r3, #1
 80087aa:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80087ac:	2300      	movs	r3, #0
 80087ae:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	7e1b      	ldrb	r3, [r3, #24]
 80087b4:	3b01      	subs	r3, #1
 80087b6:	2b0a      	cmp	r3, #10
 80087b8:	f200 8156 	bhi.w	8008a68 <USBH_HandleControl+0x2c8>
 80087bc:	a201      	add	r2, pc, #4	@ (adr r2, 80087c4 <USBH_HandleControl+0x24>)
 80087be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087c2:	bf00      	nop
 80087c4:	080087f1 	.word	0x080087f1
 80087c8:	0800880b 	.word	0x0800880b
 80087cc:	08008875 	.word	0x08008875
 80087d0:	0800889b 	.word	0x0800889b
 80087d4:	080088d3 	.word	0x080088d3
 80087d8:	080088fd 	.word	0x080088fd
 80087dc:	0800894f 	.word	0x0800894f
 80087e0:	08008971 	.word	0x08008971
 80087e4:	080089ad 	.word	0x080089ad
 80087e8:	080089d3 	.word	0x080089d3
 80087ec:	08008a11 	.word	0x08008a11
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f103 0110 	add.w	r1, r3, #16
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	795b      	ldrb	r3, [r3, #5]
 80087fa:	461a      	mov	r2, r3
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f000 f943 	bl	8008a88 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2202      	movs	r2, #2
 8008806:	761a      	strb	r2, [r3, #24]
      break;
 8008808:	e139      	b.n	8008a7e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	795b      	ldrb	r3, [r3, #5]
 800880e:	4619      	mov	r1, r3
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f000 fcc5 	bl	80091a0 <USBH_LL_GetURBState>
 8008816:	4603      	mov	r3, r0
 8008818:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800881a:	7bbb      	ldrb	r3, [r7, #14]
 800881c:	2b01      	cmp	r3, #1
 800881e:	d11e      	bne.n	800885e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	7c1b      	ldrb	r3, [r3, #16]
 8008824:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008828:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	8adb      	ldrh	r3, [r3, #22]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d00a      	beq.n	8008848 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008832:	7b7b      	ldrb	r3, [r7, #13]
 8008834:	2b80      	cmp	r3, #128	@ 0x80
 8008836:	d103      	bne.n	8008840 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2203      	movs	r2, #3
 800883c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800883e:	e115      	b.n	8008a6c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2205      	movs	r2, #5
 8008844:	761a      	strb	r2, [r3, #24]
      break;
 8008846:	e111      	b.n	8008a6c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008848:	7b7b      	ldrb	r3, [r7, #13]
 800884a:	2b80      	cmp	r3, #128	@ 0x80
 800884c:	d103      	bne.n	8008856 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2209      	movs	r2, #9
 8008852:	761a      	strb	r2, [r3, #24]
      break;
 8008854:	e10a      	b.n	8008a6c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2207      	movs	r2, #7
 800885a:	761a      	strb	r2, [r3, #24]
      break;
 800885c:	e106      	b.n	8008a6c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800885e:	7bbb      	ldrb	r3, [r7, #14]
 8008860:	2b04      	cmp	r3, #4
 8008862:	d003      	beq.n	800886c <USBH_HandleControl+0xcc>
 8008864:	7bbb      	ldrb	r3, [r7, #14]
 8008866:	2b02      	cmp	r3, #2
 8008868:	f040 8100 	bne.w	8008a6c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	220b      	movs	r2, #11
 8008870:	761a      	strb	r2, [r3, #24]
      break;
 8008872:	e0fb      	b.n	8008a6c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800887a:	b29a      	uxth	r2, r3
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6899      	ldr	r1, [r3, #8]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	899a      	ldrh	r2, [r3, #12]
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	791b      	ldrb	r3, [r3, #4]
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f000 f93a 	bl	8008b06 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2204      	movs	r2, #4
 8008896:	761a      	strb	r2, [r3, #24]
      break;
 8008898:	e0f1      	b.n	8008a7e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	791b      	ldrb	r3, [r3, #4]
 800889e:	4619      	mov	r1, r3
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f000 fc7d 	bl	80091a0 <USBH_LL_GetURBState>
 80088a6:	4603      	mov	r3, r0
 80088a8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80088aa:	7bbb      	ldrb	r3, [r7, #14]
 80088ac:	2b01      	cmp	r3, #1
 80088ae:	d102      	bne.n	80088b6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2209      	movs	r2, #9
 80088b4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80088b6:	7bbb      	ldrb	r3, [r7, #14]
 80088b8:	2b05      	cmp	r3, #5
 80088ba:	d102      	bne.n	80088c2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80088bc:	2303      	movs	r3, #3
 80088be:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80088c0:	e0d6      	b.n	8008a70 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80088c2:	7bbb      	ldrb	r3, [r7, #14]
 80088c4:	2b04      	cmp	r3, #4
 80088c6:	f040 80d3 	bne.w	8008a70 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	220b      	movs	r2, #11
 80088ce:	761a      	strb	r2, [r3, #24]
      break;
 80088d0:	e0ce      	b.n	8008a70 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6899      	ldr	r1, [r3, #8]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	899a      	ldrh	r2, [r3, #12]
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	795b      	ldrb	r3, [r3, #5]
 80088de:	2001      	movs	r0, #1
 80088e0:	9000      	str	r0, [sp, #0]
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f000 f8ea 	bl	8008abc <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80088ee:	b29a      	uxth	r2, r3
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2206      	movs	r2, #6
 80088f8:	761a      	strb	r2, [r3, #24]
      break;
 80088fa:	e0c0      	b.n	8008a7e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	795b      	ldrb	r3, [r3, #5]
 8008900:	4619      	mov	r1, r3
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	f000 fc4c 	bl	80091a0 <USBH_LL_GetURBState>
 8008908:	4603      	mov	r3, r0
 800890a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800890c:	7bbb      	ldrb	r3, [r7, #14]
 800890e:	2b01      	cmp	r3, #1
 8008910:	d103      	bne.n	800891a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2207      	movs	r2, #7
 8008916:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008918:	e0ac      	b.n	8008a74 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800891a:	7bbb      	ldrb	r3, [r7, #14]
 800891c:	2b05      	cmp	r3, #5
 800891e:	d105      	bne.n	800892c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	220c      	movs	r2, #12
 8008924:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008926:	2303      	movs	r3, #3
 8008928:	73fb      	strb	r3, [r7, #15]
      break;
 800892a:	e0a3      	b.n	8008a74 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800892c:	7bbb      	ldrb	r3, [r7, #14]
 800892e:	2b02      	cmp	r3, #2
 8008930:	d103      	bne.n	800893a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2205      	movs	r2, #5
 8008936:	761a      	strb	r2, [r3, #24]
      break;
 8008938:	e09c      	b.n	8008a74 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800893a:	7bbb      	ldrb	r3, [r7, #14]
 800893c:	2b04      	cmp	r3, #4
 800893e:	f040 8099 	bne.w	8008a74 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	220b      	movs	r2, #11
 8008946:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008948:	2302      	movs	r3, #2
 800894a:	73fb      	strb	r3, [r7, #15]
      break;
 800894c:	e092      	b.n	8008a74 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	791b      	ldrb	r3, [r3, #4]
 8008952:	2200      	movs	r2, #0
 8008954:	2100      	movs	r1, #0
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f000 f8d5 	bl	8008b06 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008962:	b29a      	uxth	r2, r3
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2208      	movs	r2, #8
 800896c:	761a      	strb	r2, [r3, #24]

      break;
 800896e:	e086      	b.n	8008a7e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	791b      	ldrb	r3, [r3, #4]
 8008974:	4619      	mov	r1, r3
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f000 fc12 	bl	80091a0 <USBH_LL_GetURBState>
 800897c:	4603      	mov	r3, r0
 800897e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008980:	7bbb      	ldrb	r3, [r7, #14]
 8008982:	2b01      	cmp	r3, #1
 8008984:	d105      	bne.n	8008992 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	220d      	movs	r2, #13
 800898a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800898c:	2300      	movs	r3, #0
 800898e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008990:	e072      	b.n	8008a78 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008992:	7bbb      	ldrb	r3, [r7, #14]
 8008994:	2b04      	cmp	r3, #4
 8008996:	d103      	bne.n	80089a0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	220b      	movs	r2, #11
 800899c:	761a      	strb	r2, [r3, #24]
      break;
 800899e:	e06b      	b.n	8008a78 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80089a0:	7bbb      	ldrb	r3, [r7, #14]
 80089a2:	2b05      	cmp	r3, #5
 80089a4:	d168      	bne.n	8008a78 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80089a6:	2303      	movs	r3, #3
 80089a8:	73fb      	strb	r3, [r7, #15]
      break;
 80089aa:	e065      	b.n	8008a78 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	795b      	ldrb	r3, [r3, #5]
 80089b0:	2201      	movs	r2, #1
 80089b2:	9200      	str	r2, [sp, #0]
 80089b4:	2200      	movs	r2, #0
 80089b6:	2100      	movs	r1, #0
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f000 f87f 	bl	8008abc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80089c4:	b29a      	uxth	r2, r3
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	220a      	movs	r2, #10
 80089ce:	761a      	strb	r2, [r3, #24]
      break;
 80089d0:	e055      	b.n	8008a7e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	795b      	ldrb	r3, [r3, #5]
 80089d6:	4619      	mov	r1, r3
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f000 fbe1 	bl	80091a0 <USBH_LL_GetURBState>
 80089de:	4603      	mov	r3, r0
 80089e0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80089e2:	7bbb      	ldrb	r3, [r7, #14]
 80089e4:	2b01      	cmp	r3, #1
 80089e6:	d105      	bne.n	80089f4 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80089e8:	2300      	movs	r3, #0
 80089ea:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	220d      	movs	r2, #13
 80089f0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80089f2:	e043      	b.n	8008a7c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80089f4:	7bbb      	ldrb	r3, [r7, #14]
 80089f6:	2b02      	cmp	r3, #2
 80089f8:	d103      	bne.n	8008a02 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2209      	movs	r2, #9
 80089fe:	761a      	strb	r2, [r3, #24]
      break;
 8008a00:	e03c      	b.n	8008a7c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008a02:	7bbb      	ldrb	r3, [r7, #14]
 8008a04:	2b04      	cmp	r3, #4
 8008a06:	d139      	bne.n	8008a7c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	220b      	movs	r2, #11
 8008a0c:	761a      	strb	r2, [r3, #24]
      break;
 8008a0e:	e035      	b.n	8008a7c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	7e5b      	ldrb	r3, [r3, #25]
 8008a14:	3301      	adds	r3, #1
 8008a16:	b2da      	uxtb	r2, r3
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	765a      	strb	r2, [r3, #25]
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	7e5b      	ldrb	r3, [r3, #25]
 8008a20:	2b02      	cmp	r3, #2
 8008a22:	d806      	bhi.n	8008a32 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2201      	movs	r2, #1
 8008a28:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2201      	movs	r2, #1
 8008a2e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008a30:	e025      	b.n	8008a7e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008a38:	2106      	movs	r1, #6
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2200      	movs	r2, #0
 8008a42:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	795b      	ldrb	r3, [r3, #5]
 8008a48:	4619      	mov	r1, r3
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f000 f90c 	bl	8008c68 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	791b      	ldrb	r3, [r3, #4]
 8008a54:	4619      	mov	r1, r3
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f000 f906 	bl	8008c68 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008a62:	2302      	movs	r3, #2
 8008a64:	73fb      	strb	r3, [r7, #15]
      break;
 8008a66:	e00a      	b.n	8008a7e <USBH_HandleControl+0x2de>

    default:
      break;
 8008a68:	bf00      	nop
 8008a6a:	e008      	b.n	8008a7e <USBH_HandleControl+0x2de>
      break;
 8008a6c:	bf00      	nop
 8008a6e:	e006      	b.n	8008a7e <USBH_HandleControl+0x2de>
      break;
 8008a70:	bf00      	nop
 8008a72:	e004      	b.n	8008a7e <USBH_HandleControl+0x2de>
      break;
 8008a74:	bf00      	nop
 8008a76:	e002      	b.n	8008a7e <USBH_HandleControl+0x2de>
      break;
 8008a78:	bf00      	nop
 8008a7a:	e000      	b.n	8008a7e <USBH_HandleControl+0x2de>
      break;
 8008a7c:	bf00      	nop
  }

  return status;
 8008a7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	3710      	adds	r7, #16
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}

08008a88 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b088      	sub	sp, #32
 8008a8c:	af04      	add	r7, sp, #16
 8008a8e:	60f8      	str	r0, [r7, #12]
 8008a90:	60b9      	str	r1, [r7, #8]
 8008a92:	4613      	mov	r3, r2
 8008a94:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008a96:	79f9      	ldrb	r1, [r7, #7]
 8008a98:	2300      	movs	r3, #0
 8008a9a:	9303      	str	r3, [sp, #12]
 8008a9c:	2308      	movs	r3, #8
 8008a9e:	9302      	str	r3, [sp, #8]
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	9301      	str	r3, [sp, #4]
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	9300      	str	r3, [sp, #0]
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	2200      	movs	r2, #0
 8008aac:	68f8      	ldr	r0, [r7, #12]
 8008aae:	f000 fb46 	bl	800913e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008ab2:	2300      	movs	r3, #0
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3710      	adds	r7, #16
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}

08008abc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b088      	sub	sp, #32
 8008ac0:	af04      	add	r7, sp, #16
 8008ac2:	60f8      	str	r0, [r7, #12]
 8008ac4:	60b9      	str	r1, [r7, #8]
 8008ac6:	4611      	mov	r1, r2
 8008ac8:	461a      	mov	r2, r3
 8008aca:	460b      	mov	r3, r1
 8008acc:	80fb      	strh	r3, [r7, #6]
 8008ace:	4613      	mov	r3, r2
 8008ad0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d001      	beq.n	8008ae0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008adc:	2300      	movs	r3, #0
 8008ade:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008ae0:	7979      	ldrb	r1, [r7, #5]
 8008ae2:	7e3b      	ldrb	r3, [r7, #24]
 8008ae4:	9303      	str	r3, [sp, #12]
 8008ae6:	88fb      	ldrh	r3, [r7, #6]
 8008ae8:	9302      	str	r3, [sp, #8]
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	9301      	str	r3, [sp, #4]
 8008aee:	2301      	movs	r3, #1
 8008af0:	9300      	str	r3, [sp, #0]
 8008af2:	2300      	movs	r3, #0
 8008af4:	2200      	movs	r2, #0
 8008af6:	68f8      	ldr	r0, [r7, #12]
 8008af8:	f000 fb21 	bl	800913e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008afc:	2300      	movs	r3, #0
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	3710      	adds	r7, #16
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}

08008b06 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008b06:	b580      	push	{r7, lr}
 8008b08:	b088      	sub	sp, #32
 8008b0a:	af04      	add	r7, sp, #16
 8008b0c:	60f8      	str	r0, [r7, #12]
 8008b0e:	60b9      	str	r1, [r7, #8]
 8008b10:	4611      	mov	r1, r2
 8008b12:	461a      	mov	r2, r3
 8008b14:	460b      	mov	r3, r1
 8008b16:	80fb      	strh	r3, [r7, #6]
 8008b18:	4613      	mov	r3, r2
 8008b1a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008b1c:	7979      	ldrb	r1, [r7, #5]
 8008b1e:	2300      	movs	r3, #0
 8008b20:	9303      	str	r3, [sp, #12]
 8008b22:	88fb      	ldrh	r3, [r7, #6]
 8008b24:	9302      	str	r3, [sp, #8]
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	9301      	str	r3, [sp, #4]
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	9300      	str	r3, [sp, #0]
 8008b2e:	2300      	movs	r3, #0
 8008b30:	2201      	movs	r2, #1
 8008b32:	68f8      	ldr	r0, [r7, #12]
 8008b34:	f000 fb03 	bl	800913e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008b38:	2300      	movs	r3, #0

}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3710      	adds	r7, #16
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}

08008b42 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008b42:	b580      	push	{r7, lr}
 8008b44:	b088      	sub	sp, #32
 8008b46:	af04      	add	r7, sp, #16
 8008b48:	60f8      	str	r0, [r7, #12]
 8008b4a:	60b9      	str	r1, [r7, #8]
 8008b4c:	4611      	mov	r1, r2
 8008b4e:	461a      	mov	r2, r3
 8008b50:	460b      	mov	r3, r1
 8008b52:	80fb      	strh	r3, [r7, #6]
 8008b54:	4613      	mov	r3, r2
 8008b56:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d001      	beq.n	8008b66 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008b62:	2300      	movs	r3, #0
 8008b64:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008b66:	7979      	ldrb	r1, [r7, #5]
 8008b68:	7e3b      	ldrb	r3, [r7, #24]
 8008b6a:	9303      	str	r3, [sp, #12]
 8008b6c:	88fb      	ldrh	r3, [r7, #6]
 8008b6e:	9302      	str	r3, [sp, #8]
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	9301      	str	r3, [sp, #4]
 8008b74:	2301      	movs	r3, #1
 8008b76:	9300      	str	r3, [sp, #0]
 8008b78:	2302      	movs	r3, #2
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	68f8      	ldr	r0, [r7, #12]
 8008b7e:	f000 fade 	bl	800913e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008b82:	2300      	movs	r3, #0
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3710      	adds	r7, #16
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}

08008b8c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b088      	sub	sp, #32
 8008b90:	af04      	add	r7, sp, #16
 8008b92:	60f8      	str	r0, [r7, #12]
 8008b94:	60b9      	str	r1, [r7, #8]
 8008b96:	4611      	mov	r1, r2
 8008b98:	461a      	mov	r2, r3
 8008b9a:	460b      	mov	r3, r1
 8008b9c:	80fb      	strh	r3, [r7, #6]
 8008b9e:	4613      	mov	r3, r2
 8008ba0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008ba2:	7979      	ldrb	r1, [r7, #5]
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	9303      	str	r3, [sp, #12]
 8008ba8:	88fb      	ldrh	r3, [r7, #6]
 8008baa:	9302      	str	r3, [sp, #8]
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	9301      	str	r3, [sp, #4]
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	9300      	str	r3, [sp, #0]
 8008bb4:	2302      	movs	r3, #2
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	68f8      	ldr	r0, [r7, #12]
 8008bba:	f000 fac0 	bl	800913e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008bbe:	2300      	movs	r3, #0
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	3710      	adds	r7, #16
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}

08008bc8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b086      	sub	sp, #24
 8008bcc:	af04      	add	r7, sp, #16
 8008bce:	6078      	str	r0, [r7, #4]
 8008bd0:	4608      	mov	r0, r1
 8008bd2:	4611      	mov	r1, r2
 8008bd4:	461a      	mov	r2, r3
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	70fb      	strb	r3, [r7, #3]
 8008bda:	460b      	mov	r3, r1
 8008bdc:	70bb      	strb	r3, [r7, #2]
 8008bde:	4613      	mov	r3, r2
 8008be0:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008be2:	7878      	ldrb	r0, [r7, #1]
 8008be4:	78ba      	ldrb	r2, [r7, #2]
 8008be6:	78f9      	ldrb	r1, [r7, #3]
 8008be8:	8b3b      	ldrh	r3, [r7, #24]
 8008bea:	9302      	str	r3, [sp, #8]
 8008bec:	7d3b      	ldrb	r3, [r7, #20]
 8008bee:	9301      	str	r3, [sp, #4]
 8008bf0:	7c3b      	ldrb	r3, [r7, #16]
 8008bf2:	9300      	str	r3, [sp, #0]
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f000 fa53 	bl	80090a2 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008bfc:	2300      	movs	r3, #0
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	3708      	adds	r7, #8
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}

08008c06 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008c06:	b580      	push	{r7, lr}
 8008c08:	b082      	sub	sp, #8
 8008c0a:	af00      	add	r7, sp, #0
 8008c0c:	6078      	str	r0, [r7, #4]
 8008c0e:	460b      	mov	r3, r1
 8008c10:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008c12:	78fb      	ldrb	r3, [r7, #3]
 8008c14:	4619      	mov	r1, r3
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f000 fa72 	bl	8009100 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008c1c:	2300      	movs	r3, #0
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3708      	adds	r7, #8
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}

08008c26 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008c26:	b580      	push	{r7, lr}
 8008c28:	b084      	sub	sp, #16
 8008c2a:	af00      	add	r7, sp, #0
 8008c2c:	6078      	str	r0, [r7, #4]
 8008c2e:	460b      	mov	r3, r1
 8008c30:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f000 f836 	bl	8008ca4 <USBH_GetFreePipe>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008c3c:	89fb      	ldrh	r3, [r7, #14]
 8008c3e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d00a      	beq.n	8008c5c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008c46:	78fa      	ldrb	r2, [r7, #3]
 8008c48:	89fb      	ldrh	r3, [r7, #14]
 8008c4a:	f003 030f 	and.w	r3, r3, #15
 8008c4e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008c52:	6879      	ldr	r1, [r7, #4]
 8008c54:	33e0      	adds	r3, #224	@ 0xe0
 8008c56:	009b      	lsls	r3, r3, #2
 8008c58:	440b      	add	r3, r1
 8008c5a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008c5c:	89fb      	ldrh	r3, [r7, #14]
 8008c5e:	b2db      	uxtb	r3, r3
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	3710      	adds	r7, #16
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}

08008c68 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b083      	sub	sp, #12
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
 8008c70:	460b      	mov	r3, r1
 8008c72:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008c74:	78fb      	ldrb	r3, [r7, #3]
 8008c76:	2b0f      	cmp	r3, #15
 8008c78:	d80d      	bhi.n	8008c96 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008c7a:	78fb      	ldrb	r3, [r7, #3]
 8008c7c:	687a      	ldr	r2, [r7, #4]
 8008c7e:	33e0      	adds	r3, #224	@ 0xe0
 8008c80:	009b      	lsls	r3, r3, #2
 8008c82:	4413      	add	r3, r2
 8008c84:	685a      	ldr	r2, [r3, #4]
 8008c86:	78fb      	ldrb	r3, [r7, #3]
 8008c88:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008c8c:	6879      	ldr	r1, [r7, #4]
 8008c8e:	33e0      	adds	r3, #224	@ 0xe0
 8008c90:	009b      	lsls	r3, r3, #2
 8008c92:	440b      	add	r3, r1
 8008c94:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008c96:	2300      	movs	r3, #0
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	370c      	adds	r7, #12
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca2:	4770      	bx	lr

08008ca4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b085      	sub	sp, #20
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008cac:	2300      	movs	r3, #0
 8008cae:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	73fb      	strb	r3, [r7, #15]
 8008cb4:	e00f      	b.n	8008cd6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008cb6:	7bfb      	ldrb	r3, [r7, #15]
 8008cb8:	687a      	ldr	r2, [r7, #4]
 8008cba:	33e0      	adds	r3, #224	@ 0xe0
 8008cbc:	009b      	lsls	r3, r3, #2
 8008cbe:	4413      	add	r3, r2
 8008cc0:	685b      	ldr	r3, [r3, #4]
 8008cc2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d102      	bne.n	8008cd0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008cca:	7bfb      	ldrb	r3, [r7, #15]
 8008ccc:	b29b      	uxth	r3, r3
 8008cce:	e007      	b.n	8008ce0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008cd0:	7bfb      	ldrb	r3, [r7, #15]
 8008cd2:	3301      	adds	r3, #1
 8008cd4:	73fb      	strb	r3, [r7, #15]
 8008cd6:	7bfb      	ldrb	r3, [r7, #15]
 8008cd8:	2b0f      	cmp	r3, #15
 8008cda:	d9ec      	bls.n	8008cb6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008cdc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3714      	adds	r7, #20
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cea:	4770      	bx	lr

08008cec <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008cf0:	2201      	movs	r2, #1
 8008cf2:	490e      	ldr	r1, [pc, #56]	@ (8008d2c <MX_USB_HOST_Init+0x40>)
 8008cf4:	480e      	ldr	r0, [pc, #56]	@ (8008d30 <MX_USB_HOST_Init+0x44>)
 8008cf6:	f7fe fb15 	bl	8007324 <USBH_Init>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d001      	beq.n	8008d04 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008d00:	f7f7 ff44 	bl	8000b8c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008d04:	490b      	ldr	r1, [pc, #44]	@ (8008d34 <MX_USB_HOST_Init+0x48>)
 8008d06:	480a      	ldr	r0, [pc, #40]	@ (8008d30 <MX_USB_HOST_Init+0x44>)
 8008d08:	f7fe fbb9 	bl	800747e <USBH_RegisterClass>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d001      	beq.n	8008d16 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008d12:	f7f7 ff3b 	bl	8000b8c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008d16:	4806      	ldr	r0, [pc, #24]	@ (8008d30 <MX_USB_HOST_Init+0x44>)
 8008d18:	f7fe fc3d 	bl	8007596 <USBH_Start>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d001      	beq.n	8008d26 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008d22:	f7f7 ff33 	bl	8000b8c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008d26:	bf00      	nop
 8008d28:	bd80      	pop	{r7, pc}
 8008d2a:	bf00      	nop
 8008d2c:	08008d4d 	.word	0x08008d4d
 8008d30:	20000190 	.word	0x20000190
 8008d34:	2000000c 	.word	0x2000000c

08008d38 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008d3c:	4802      	ldr	r0, [pc, #8]	@ (8008d48 <MX_USB_HOST_Process+0x10>)
 8008d3e:	f7fe fc3b 	bl	80075b8 <USBH_Process>
}
 8008d42:	bf00      	nop
 8008d44:	bd80      	pop	{r7, pc}
 8008d46:	bf00      	nop
 8008d48:	20000190 	.word	0x20000190

08008d4c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	b083      	sub	sp, #12
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
 8008d54:	460b      	mov	r3, r1
 8008d56:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008d58:	78fb      	ldrb	r3, [r7, #3]
 8008d5a:	3b01      	subs	r3, #1
 8008d5c:	2b04      	cmp	r3, #4
 8008d5e:	d819      	bhi.n	8008d94 <USBH_UserProcess+0x48>
 8008d60:	a201      	add	r2, pc, #4	@ (adr r2, 8008d68 <USBH_UserProcess+0x1c>)
 8008d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d66:	bf00      	nop
 8008d68:	08008d95 	.word	0x08008d95
 8008d6c:	08008d85 	.word	0x08008d85
 8008d70:	08008d95 	.word	0x08008d95
 8008d74:	08008d8d 	.word	0x08008d8d
 8008d78:	08008d7d 	.word	0x08008d7d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008d7c:	4b09      	ldr	r3, [pc, #36]	@ (8008da4 <USBH_UserProcess+0x58>)
 8008d7e:	2203      	movs	r2, #3
 8008d80:	701a      	strb	r2, [r3, #0]
  break;
 8008d82:	e008      	b.n	8008d96 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008d84:	4b07      	ldr	r3, [pc, #28]	@ (8008da4 <USBH_UserProcess+0x58>)
 8008d86:	2202      	movs	r2, #2
 8008d88:	701a      	strb	r2, [r3, #0]
  break;
 8008d8a:	e004      	b.n	8008d96 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008d8c:	4b05      	ldr	r3, [pc, #20]	@ (8008da4 <USBH_UserProcess+0x58>)
 8008d8e:	2201      	movs	r2, #1
 8008d90:	701a      	strb	r2, [r3, #0]
  break;
 8008d92:	e000      	b.n	8008d96 <USBH_UserProcess+0x4a>

  default:
  break;
 8008d94:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008d96:	bf00      	nop
 8008d98:	370c      	adds	r7, #12
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da0:	4770      	bx	lr
 8008da2:	bf00      	nop
 8008da4:	20000568 	.word	0x20000568

08008da8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b08a      	sub	sp, #40	@ 0x28
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008db0:	f107 0314 	add.w	r3, r7, #20
 8008db4:	2200      	movs	r2, #0
 8008db6:	601a      	str	r2, [r3, #0]
 8008db8:	605a      	str	r2, [r3, #4]
 8008dba:	609a      	str	r2, [r3, #8]
 8008dbc:	60da      	str	r2, [r3, #12]
 8008dbe:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008dc8:	d147      	bne.n	8008e5a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008dca:	2300      	movs	r3, #0
 8008dcc:	613b      	str	r3, [r7, #16]
 8008dce:	4b25      	ldr	r3, [pc, #148]	@ (8008e64 <HAL_HCD_MspInit+0xbc>)
 8008dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dd2:	4a24      	ldr	r2, [pc, #144]	@ (8008e64 <HAL_HCD_MspInit+0xbc>)
 8008dd4:	f043 0301 	orr.w	r3, r3, #1
 8008dd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8008dda:	4b22      	ldr	r3, [pc, #136]	@ (8008e64 <HAL_HCD_MspInit+0xbc>)
 8008ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dde:	f003 0301 	and.w	r3, r3, #1
 8008de2:	613b      	str	r3, [r7, #16]
 8008de4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008de6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008dea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008dec:	2300      	movs	r3, #0
 8008dee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008df0:	2300      	movs	r3, #0
 8008df2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008df4:	f107 0314 	add.w	r3, r7, #20
 8008df8:	4619      	mov	r1, r3
 8008dfa:	481b      	ldr	r0, [pc, #108]	@ (8008e68 <HAL_HCD_MspInit+0xc0>)
 8008dfc:	f7f8 fe2c 	bl	8001a58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008e00:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8008e04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e06:	2302      	movs	r3, #2
 8008e08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008e12:	230a      	movs	r3, #10
 8008e14:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e16:	f107 0314 	add.w	r3, r7, #20
 8008e1a:	4619      	mov	r1, r3
 8008e1c:	4812      	ldr	r0, [pc, #72]	@ (8008e68 <HAL_HCD_MspInit+0xc0>)
 8008e1e:	f7f8 fe1b 	bl	8001a58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008e22:	4b10      	ldr	r3, [pc, #64]	@ (8008e64 <HAL_HCD_MspInit+0xbc>)
 8008e24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e26:	4a0f      	ldr	r2, [pc, #60]	@ (8008e64 <HAL_HCD_MspInit+0xbc>)
 8008e28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e2c:	6353      	str	r3, [r2, #52]	@ 0x34
 8008e2e:	2300      	movs	r3, #0
 8008e30:	60fb      	str	r3, [r7, #12]
 8008e32:	4b0c      	ldr	r3, [pc, #48]	@ (8008e64 <HAL_HCD_MspInit+0xbc>)
 8008e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e36:	4a0b      	ldr	r2, [pc, #44]	@ (8008e64 <HAL_HCD_MspInit+0xbc>)
 8008e38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008e3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8008e3e:	4b09      	ldr	r3, [pc, #36]	@ (8008e64 <HAL_HCD_MspInit+0xbc>)
 8008e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008e46:	60fb      	str	r3, [r7, #12]
 8008e48:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	2100      	movs	r1, #0
 8008e4e:	2043      	movs	r0, #67	@ 0x43
 8008e50:	f7f8 fdcb 	bl	80019ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008e54:	2043      	movs	r0, #67	@ 0x43
 8008e56:	f7f8 fde4 	bl	8001a22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008e5a:	bf00      	nop
 8008e5c:	3728      	adds	r7, #40	@ 0x28
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}
 8008e62:	bf00      	nop
 8008e64:	40023800 	.word	0x40023800
 8008e68:	40020000 	.word	0x40020000

08008e6c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b082      	sub	sp, #8
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	f7fe ff73 	bl	8007d66 <USBH_LL_IncTimer>
}
 8008e80:	bf00      	nop
 8008e82:	3708      	adds	r7, #8
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd80      	pop	{r7, pc}

08008e88 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b082      	sub	sp, #8
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008e96:	4618      	mov	r0, r3
 8008e98:	f7fe ffab 	bl	8007df2 <USBH_LL_Connect>
}
 8008e9c:	bf00      	nop
 8008e9e:	3708      	adds	r7, #8
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}

08008ea4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b082      	sub	sp, #8
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f7fe ffb4 	bl	8007e20 <USBH_LL_Disconnect>
}
 8008eb8:	bf00      	nop
 8008eba:	3708      	adds	r7, #8
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}

08008ec0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b083      	sub	sp, #12
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
 8008ec8:	460b      	mov	r3, r1
 8008eca:	70fb      	strb	r3, [r7, #3]
 8008ecc:	4613      	mov	r3, r2
 8008ece:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008ed0:	bf00      	nop
 8008ed2:	370c      	adds	r7, #12
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eda:	4770      	bx	lr

08008edc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b082      	sub	sp, #8
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008eea:	4618      	mov	r0, r3
 8008eec:	f7fe ff65 	bl	8007dba <USBH_LL_PortEnabled>
}
 8008ef0:	bf00      	nop
 8008ef2:	3708      	adds	r7, #8
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}

08008ef8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b082      	sub	sp, #8
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008f06:	4618      	mov	r0, r3
 8008f08:	f7fe ff65 	bl	8007dd6 <USBH_LL_PortDisabled>
}
 8008f0c:	bf00      	nop
 8008f0e:	3708      	adds	r7, #8
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}

08008f14 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b082      	sub	sp, #8
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8008f22:	2b01      	cmp	r3, #1
 8008f24:	d12a      	bne.n	8008f7c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008f26:	4a18      	ldr	r2, [pc, #96]	@ (8008f88 <USBH_LL_Init+0x74>)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	4a15      	ldr	r2, [pc, #84]	@ (8008f88 <USBH_LL_Init+0x74>)
 8008f32:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008f36:	4b14      	ldr	r3, [pc, #80]	@ (8008f88 <USBH_LL_Init+0x74>)
 8008f38:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008f3c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008f3e:	4b12      	ldr	r3, [pc, #72]	@ (8008f88 <USBH_LL_Init+0x74>)
 8008f40:	2208      	movs	r2, #8
 8008f42:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008f44:	4b10      	ldr	r3, [pc, #64]	@ (8008f88 <USBH_LL_Init+0x74>)
 8008f46:	2201      	movs	r2, #1
 8008f48:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008f4a:	4b0f      	ldr	r3, [pc, #60]	@ (8008f88 <USBH_LL_Init+0x74>)
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008f50:	4b0d      	ldr	r3, [pc, #52]	@ (8008f88 <USBH_LL_Init+0x74>)
 8008f52:	2202      	movs	r2, #2
 8008f54:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008f56:	4b0c      	ldr	r3, [pc, #48]	@ (8008f88 <USBH_LL_Init+0x74>)
 8008f58:	2200      	movs	r2, #0
 8008f5a:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008f5c:	480a      	ldr	r0, [pc, #40]	@ (8008f88 <USBH_LL_Init+0x74>)
 8008f5e:	f7f8 ff48 	bl	8001df2 <HAL_HCD_Init>
 8008f62:	4603      	mov	r3, r0
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d001      	beq.n	8008f6c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008f68:	f7f7 fe10 	bl	8000b8c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008f6c:	4806      	ldr	r0, [pc, #24]	@ (8008f88 <USBH_LL_Init+0x74>)
 8008f6e:	f7f9 fba9 	bl	80026c4 <HAL_HCD_GetCurrentFrame>
 8008f72:	4603      	mov	r3, r0
 8008f74:	4619      	mov	r1, r3
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f7fe fee6 	bl	8007d48 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008f7c:	2300      	movs	r3, #0
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3708      	adds	r7, #8
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}
 8008f86:	bf00      	nop
 8008f88:	2000056c 	.word	0x2000056c

08008f8c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b084      	sub	sp, #16
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f94:	2300      	movs	r3, #0
 8008f96:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f7f9 fb16 	bl	80025d4 <HAL_HCD_Start>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008fac:	7bfb      	ldrb	r3, [r7, #15]
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f000 f95e 	bl	8009270 <USBH_Get_USB_Status>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fb8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	3710      	adds	r7, #16
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}

08008fc2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008fc2:	b580      	push	{r7, lr}
 8008fc4:	b084      	sub	sp, #16
 8008fc6:	af00      	add	r7, sp, #0
 8008fc8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008fce:	2300      	movs	r3, #0
 8008fd0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f7f9 fb1e 	bl	800261a <HAL_HCD_Stop>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008fe2:	7bfb      	ldrb	r3, [r7, #15]
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	f000 f943 	bl	8009270 <USBH_Get_USB_Status>
 8008fea:	4603      	mov	r3, r0
 8008fec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fee:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3710      	adds	r7, #16
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}

08008ff8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b084      	sub	sp, #16
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009000:	2301      	movs	r3, #1
 8009002:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800900a:	4618      	mov	r0, r3
 800900c:	f7f9 fb68 	bl	80026e0 <HAL_HCD_GetCurrentSpeed>
 8009010:	4603      	mov	r3, r0
 8009012:	2b02      	cmp	r3, #2
 8009014:	d00c      	beq.n	8009030 <USBH_LL_GetSpeed+0x38>
 8009016:	2b02      	cmp	r3, #2
 8009018:	d80d      	bhi.n	8009036 <USBH_LL_GetSpeed+0x3e>
 800901a:	2b00      	cmp	r3, #0
 800901c:	d002      	beq.n	8009024 <USBH_LL_GetSpeed+0x2c>
 800901e:	2b01      	cmp	r3, #1
 8009020:	d003      	beq.n	800902a <USBH_LL_GetSpeed+0x32>
 8009022:	e008      	b.n	8009036 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009024:	2300      	movs	r3, #0
 8009026:	73fb      	strb	r3, [r7, #15]
    break;
 8009028:	e008      	b.n	800903c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800902a:	2301      	movs	r3, #1
 800902c:	73fb      	strb	r3, [r7, #15]
    break;
 800902e:	e005      	b.n	800903c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009030:	2302      	movs	r3, #2
 8009032:	73fb      	strb	r3, [r7, #15]
    break;
 8009034:	e002      	b.n	800903c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8009036:	2301      	movs	r3, #1
 8009038:	73fb      	strb	r3, [r7, #15]
    break;
 800903a:	bf00      	nop
  }
  return  speed;
 800903c:	7bfb      	ldrb	r3, [r7, #15]
}
 800903e:	4618      	mov	r0, r3
 8009040:	3710      	adds	r7, #16
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}

08009046 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009046:	b580      	push	{r7, lr}
 8009048:	b084      	sub	sp, #16
 800904a:	af00      	add	r7, sp, #0
 800904c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800904e:	2300      	movs	r3, #0
 8009050:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009052:	2300      	movs	r3, #0
 8009054:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800905c:	4618      	mov	r0, r3
 800905e:	f7f9 faf9 	bl	8002654 <HAL_HCD_ResetPort>
 8009062:	4603      	mov	r3, r0
 8009064:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009066:	7bfb      	ldrb	r3, [r7, #15]
 8009068:	4618      	mov	r0, r3
 800906a:	f000 f901 	bl	8009270 <USBH_Get_USB_Status>
 800906e:	4603      	mov	r3, r0
 8009070:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009072:	7bbb      	ldrb	r3, [r7, #14]
}
 8009074:	4618      	mov	r0, r3
 8009076:	3710      	adds	r7, #16
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}

0800907c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b082      	sub	sp, #8
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
 8009084:	460b      	mov	r3, r1
 8009086:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800908e:	78fa      	ldrb	r2, [r7, #3]
 8009090:	4611      	mov	r1, r2
 8009092:	4618      	mov	r0, r3
 8009094:	f7f9 fb01 	bl	800269a <HAL_HCD_HC_GetXferCount>
 8009098:	4603      	mov	r3, r0
}
 800909a:	4618      	mov	r0, r3
 800909c:	3708      	adds	r7, #8
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}

080090a2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80090a2:	b590      	push	{r4, r7, lr}
 80090a4:	b089      	sub	sp, #36	@ 0x24
 80090a6:	af04      	add	r7, sp, #16
 80090a8:	6078      	str	r0, [r7, #4]
 80090aa:	4608      	mov	r0, r1
 80090ac:	4611      	mov	r1, r2
 80090ae:	461a      	mov	r2, r3
 80090b0:	4603      	mov	r3, r0
 80090b2:	70fb      	strb	r3, [r7, #3]
 80090b4:	460b      	mov	r3, r1
 80090b6:	70bb      	strb	r3, [r7, #2]
 80090b8:	4613      	mov	r3, r2
 80090ba:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090bc:	2300      	movs	r3, #0
 80090be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80090c0:	2300      	movs	r3, #0
 80090c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80090ca:	787c      	ldrb	r4, [r7, #1]
 80090cc:	78ba      	ldrb	r2, [r7, #2]
 80090ce:	78f9      	ldrb	r1, [r7, #3]
 80090d0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80090d2:	9302      	str	r3, [sp, #8]
 80090d4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80090d8:	9301      	str	r3, [sp, #4]
 80090da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80090de:	9300      	str	r3, [sp, #0]
 80090e0:	4623      	mov	r3, r4
 80090e2:	f7f8 feed 	bl	8001ec0 <HAL_HCD_HC_Init>
 80090e6:	4603      	mov	r3, r0
 80090e8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80090ea:	7bfb      	ldrb	r3, [r7, #15]
 80090ec:	4618      	mov	r0, r3
 80090ee:	f000 f8bf 	bl	8009270 <USBH_Get_USB_Status>
 80090f2:	4603      	mov	r3, r0
 80090f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	3714      	adds	r7, #20
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd90      	pop	{r4, r7, pc}

08009100 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b084      	sub	sp, #16
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
 8009108:	460b      	mov	r3, r1
 800910a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800910c:	2300      	movs	r3, #0
 800910e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009110:	2300      	movs	r3, #0
 8009112:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800911a:	78fa      	ldrb	r2, [r7, #3]
 800911c:	4611      	mov	r1, r2
 800911e:	4618      	mov	r0, r3
 8009120:	f7f8 ff86 	bl	8002030 <HAL_HCD_HC_Halt>
 8009124:	4603      	mov	r3, r0
 8009126:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009128:	7bfb      	ldrb	r3, [r7, #15]
 800912a:	4618      	mov	r0, r3
 800912c:	f000 f8a0 	bl	8009270 <USBH_Get_USB_Status>
 8009130:	4603      	mov	r3, r0
 8009132:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009134:	7bbb      	ldrb	r3, [r7, #14]
}
 8009136:	4618      	mov	r0, r3
 8009138:	3710      	adds	r7, #16
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}

0800913e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800913e:	b590      	push	{r4, r7, lr}
 8009140:	b089      	sub	sp, #36	@ 0x24
 8009142:	af04      	add	r7, sp, #16
 8009144:	6078      	str	r0, [r7, #4]
 8009146:	4608      	mov	r0, r1
 8009148:	4611      	mov	r1, r2
 800914a:	461a      	mov	r2, r3
 800914c:	4603      	mov	r3, r0
 800914e:	70fb      	strb	r3, [r7, #3]
 8009150:	460b      	mov	r3, r1
 8009152:	70bb      	strb	r3, [r7, #2]
 8009154:	4613      	mov	r3, r2
 8009156:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009158:	2300      	movs	r3, #0
 800915a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800915c:	2300      	movs	r3, #0
 800915e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8009166:	787c      	ldrb	r4, [r7, #1]
 8009168:	78ba      	ldrb	r2, [r7, #2]
 800916a:	78f9      	ldrb	r1, [r7, #3]
 800916c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009170:	9303      	str	r3, [sp, #12]
 8009172:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009174:	9302      	str	r3, [sp, #8]
 8009176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009178:	9301      	str	r3, [sp, #4]
 800917a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800917e:	9300      	str	r3, [sp, #0]
 8009180:	4623      	mov	r3, r4
 8009182:	f7f8 ff79 	bl	8002078 <HAL_HCD_HC_SubmitRequest>
 8009186:	4603      	mov	r3, r0
 8009188:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800918a:	7bfb      	ldrb	r3, [r7, #15]
 800918c:	4618      	mov	r0, r3
 800918e:	f000 f86f 	bl	8009270 <USBH_Get_USB_Status>
 8009192:	4603      	mov	r3, r0
 8009194:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009196:	7bbb      	ldrb	r3, [r7, #14]
}
 8009198:	4618      	mov	r0, r3
 800919a:	3714      	adds	r7, #20
 800919c:	46bd      	mov	sp, r7
 800919e:	bd90      	pop	{r4, r7, pc}

080091a0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b082      	sub	sp, #8
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	460b      	mov	r3, r1
 80091aa:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80091b2:	78fa      	ldrb	r2, [r7, #3]
 80091b4:	4611      	mov	r1, r2
 80091b6:	4618      	mov	r0, r3
 80091b8:	f7f9 fa5a 	bl	8002670 <HAL_HCD_HC_GetURBState>
 80091bc:	4603      	mov	r3, r0
}
 80091be:	4618      	mov	r0, r3
 80091c0:	3708      	adds	r7, #8
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}

080091c6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80091c6:	b580      	push	{r7, lr}
 80091c8:	b082      	sub	sp, #8
 80091ca:	af00      	add	r7, sp, #0
 80091cc:	6078      	str	r0, [r7, #4]
 80091ce:	460b      	mov	r3, r1
 80091d0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 80091d8:	2b01      	cmp	r3, #1
 80091da:	d103      	bne.n	80091e4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80091dc:	78fb      	ldrb	r3, [r7, #3]
 80091de:	4618      	mov	r0, r3
 80091e0:	f000 f872 	bl	80092c8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80091e4:	20c8      	movs	r0, #200	@ 0xc8
 80091e6:	f7f7 ff01 	bl	8000fec <HAL_Delay>
  return USBH_OK;
 80091ea:	2300      	movs	r3, #0
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	3708      	adds	r7, #8
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}

080091f4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b085      	sub	sp, #20
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
 80091fc:	460b      	mov	r3, r1
 80091fe:	70fb      	strb	r3, [r7, #3]
 8009200:	4613      	mov	r3, r2
 8009202:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800920a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800920c:	78fa      	ldrb	r2, [r7, #3]
 800920e:	68f9      	ldr	r1, [r7, #12]
 8009210:	4613      	mov	r3, r2
 8009212:	011b      	lsls	r3, r3, #4
 8009214:	1a9b      	subs	r3, r3, r2
 8009216:	009b      	lsls	r3, r3, #2
 8009218:	440b      	add	r3, r1
 800921a:	3317      	adds	r3, #23
 800921c:	781b      	ldrb	r3, [r3, #0]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d00a      	beq.n	8009238 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009222:	78fa      	ldrb	r2, [r7, #3]
 8009224:	68f9      	ldr	r1, [r7, #12]
 8009226:	4613      	mov	r3, r2
 8009228:	011b      	lsls	r3, r3, #4
 800922a:	1a9b      	subs	r3, r3, r2
 800922c:	009b      	lsls	r3, r3, #2
 800922e:	440b      	add	r3, r1
 8009230:	333c      	adds	r3, #60	@ 0x3c
 8009232:	78ba      	ldrb	r2, [r7, #2]
 8009234:	701a      	strb	r2, [r3, #0]
 8009236:	e009      	b.n	800924c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009238:	78fa      	ldrb	r2, [r7, #3]
 800923a:	68f9      	ldr	r1, [r7, #12]
 800923c:	4613      	mov	r3, r2
 800923e:	011b      	lsls	r3, r3, #4
 8009240:	1a9b      	subs	r3, r3, r2
 8009242:	009b      	lsls	r3, r3, #2
 8009244:	440b      	add	r3, r1
 8009246:	333d      	adds	r3, #61	@ 0x3d
 8009248:	78ba      	ldrb	r2, [r7, #2]
 800924a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800924c:	2300      	movs	r3, #0
}
 800924e:	4618      	mov	r0, r3
 8009250:	3714      	adds	r7, #20
 8009252:	46bd      	mov	sp, r7
 8009254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009258:	4770      	bx	lr

0800925a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800925a:	b580      	push	{r7, lr}
 800925c:	b082      	sub	sp, #8
 800925e:	af00      	add	r7, sp, #0
 8009260:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f7f7 fec2 	bl	8000fec <HAL_Delay>
}
 8009268:	bf00      	nop
 800926a:	3708      	adds	r7, #8
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}

08009270 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009270:	b480      	push	{r7}
 8009272:	b085      	sub	sp, #20
 8009274:	af00      	add	r7, sp, #0
 8009276:	4603      	mov	r3, r0
 8009278:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800927a:	2300      	movs	r3, #0
 800927c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800927e:	79fb      	ldrb	r3, [r7, #7]
 8009280:	2b03      	cmp	r3, #3
 8009282:	d817      	bhi.n	80092b4 <USBH_Get_USB_Status+0x44>
 8009284:	a201      	add	r2, pc, #4	@ (adr r2, 800928c <USBH_Get_USB_Status+0x1c>)
 8009286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800928a:	bf00      	nop
 800928c:	0800929d 	.word	0x0800929d
 8009290:	080092a3 	.word	0x080092a3
 8009294:	080092a9 	.word	0x080092a9
 8009298:	080092af 	.word	0x080092af
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800929c:	2300      	movs	r3, #0
 800929e:	73fb      	strb	r3, [r7, #15]
    break;
 80092a0:	e00b      	b.n	80092ba <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80092a2:	2302      	movs	r3, #2
 80092a4:	73fb      	strb	r3, [r7, #15]
    break;
 80092a6:	e008      	b.n	80092ba <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80092a8:	2301      	movs	r3, #1
 80092aa:	73fb      	strb	r3, [r7, #15]
    break;
 80092ac:	e005      	b.n	80092ba <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80092ae:	2302      	movs	r3, #2
 80092b0:	73fb      	strb	r3, [r7, #15]
    break;
 80092b2:	e002      	b.n	80092ba <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80092b4:	2302      	movs	r3, #2
 80092b6:	73fb      	strb	r3, [r7, #15]
    break;
 80092b8:	bf00      	nop
  }
  return usb_status;
 80092ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80092bc:	4618      	mov	r0, r3
 80092be:	3714      	adds	r7, #20
 80092c0:	46bd      	mov	sp, r7
 80092c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c6:	4770      	bx	lr

080092c8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b084      	sub	sp, #16
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	4603      	mov	r3, r0
 80092d0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80092d2:	79fb      	ldrb	r3, [r7, #7]
 80092d4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80092d6:	79fb      	ldrb	r3, [r7, #7]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d102      	bne.n	80092e2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80092dc:	2300      	movs	r3, #0
 80092de:	73fb      	strb	r3, [r7, #15]
 80092e0:	e001      	b.n	80092e6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80092e2:	2301      	movs	r3, #1
 80092e4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80092e6:	7bfb      	ldrb	r3, [r7, #15]
 80092e8:	461a      	mov	r2, r3
 80092ea:	2101      	movs	r1, #1
 80092ec:	4803      	ldr	r0, [pc, #12]	@ (80092fc <MX_DriverVbusFS+0x34>)
 80092ee:	f7f8 fd67 	bl	8001dc0 <HAL_GPIO_WritePin>
}
 80092f2:	bf00      	nop
 80092f4:	3710      	adds	r7, #16
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}
 80092fa:	bf00      	nop
 80092fc:	40020800 	.word	0x40020800

08009300 <malloc>:
 8009300:	4b02      	ldr	r3, [pc, #8]	@ (800930c <malloc+0xc>)
 8009302:	4601      	mov	r1, r0
 8009304:	6818      	ldr	r0, [r3, #0]
 8009306:	f000 b82d 	b.w	8009364 <_malloc_r>
 800930a:	bf00      	nop
 800930c:	2000002c 	.word	0x2000002c

08009310 <free>:
 8009310:	4b02      	ldr	r3, [pc, #8]	@ (800931c <free+0xc>)
 8009312:	4601      	mov	r1, r0
 8009314:	6818      	ldr	r0, [r3, #0]
 8009316:	f000 b8f5 	b.w	8009504 <_free_r>
 800931a:	bf00      	nop
 800931c:	2000002c 	.word	0x2000002c

08009320 <sbrk_aligned>:
 8009320:	b570      	push	{r4, r5, r6, lr}
 8009322:	4e0f      	ldr	r6, [pc, #60]	@ (8009360 <sbrk_aligned+0x40>)
 8009324:	460c      	mov	r4, r1
 8009326:	6831      	ldr	r1, [r6, #0]
 8009328:	4605      	mov	r5, r0
 800932a:	b911      	cbnz	r1, 8009332 <sbrk_aligned+0x12>
 800932c:	f000 f8ae 	bl	800948c <_sbrk_r>
 8009330:	6030      	str	r0, [r6, #0]
 8009332:	4621      	mov	r1, r4
 8009334:	4628      	mov	r0, r5
 8009336:	f000 f8a9 	bl	800948c <_sbrk_r>
 800933a:	1c43      	adds	r3, r0, #1
 800933c:	d103      	bne.n	8009346 <sbrk_aligned+0x26>
 800933e:	f04f 34ff 	mov.w	r4, #4294967295
 8009342:	4620      	mov	r0, r4
 8009344:	bd70      	pop	{r4, r5, r6, pc}
 8009346:	1cc4      	adds	r4, r0, #3
 8009348:	f024 0403 	bic.w	r4, r4, #3
 800934c:	42a0      	cmp	r0, r4
 800934e:	d0f8      	beq.n	8009342 <sbrk_aligned+0x22>
 8009350:	1a21      	subs	r1, r4, r0
 8009352:	4628      	mov	r0, r5
 8009354:	f000 f89a 	bl	800948c <_sbrk_r>
 8009358:	3001      	adds	r0, #1
 800935a:	d1f2      	bne.n	8009342 <sbrk_aligned+0x22>
 800935c:	e7ef      	b.n	800933e <sbrk_aligned+0x1e>
 800935e:	bf00      	nop
 8009360:	2000094c 	.word	0x2000094c

08009364 <_malloc_r>:
 8009364:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009368:	1ccd      	adds	r5, r1, #3
 800936a:	f025 0503 	bic.w	r5, r5, #3
 800936e:	3508      	adds	r5, #8
 8009370:	2d0c      	cmp	r5, #12
 8009372:	bf38      	it	cc
 8009374:	250c      	movcc	r5, #12
 8009376:	2d00      	cmp	r5, #0
 8009378:	4606      	mov	r6, r0
 800937a:	db01      	blt.n	8009380 <_malloc_r+0x1c>
 800937c:	42a9      	cmp	r1, r5
 800937e:	d904      	bls.n	800938a <_malloc_r+0x26>
 8009380:	230c      	movs	r3, #12
 8009382:	6033      	str	r3, [r6, #0]
 8009384:	2000      	movs	r0, #0
 8009386:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800938a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009460 <_malloc_r+0xfc>
 800938e:	f000 f869 	bl	8009464 <__malloc_lock>
 8009392:	f8d8 3000 	ldr.w	r3, [r8]
 8009396:	461c      	mov	r4, r3
 8009398:	bb44      	cbnz	r4, 80093ec <_malloc_r+0x88>
 800939a:	4629      	mov	r1, r5
 800939c:	4630      	mov	r0, r6
 800939e:	f7ff ffbf 	bl	8009320 <sbrk_aligned>
 80093a2:	1c43      	adds	r3, r0, #1
 80093a4:	4604      	mov	r4, r0
 80093a6:	d158      	bne.n	800945a <_malloc_r+0xf6>
 80093a8:	f8d8 4000 	ldr.w	r4, [r8]
 80093ac:	4627      	mov	r7, r4
 80093ae:	2f00      	cmp	r7, #0
 80093b0:	d143      	bne.n	800943a <_malloc_r+0xd6>
 80093b2:	2c00      	cmp	r4, #0
 80093b4:	d04b      	beq.n	800944e <_malloc_r+0xea>
 80093b6:	6823      	ldr	r3, [r4, #0]
 80093b8:	4639      	mov	r1, r7
 80093ba:	4630      	mov	r0, r6
 80093bc:	eb04 0903 	add.w	r9, r4, r3
 80093c0:	f000 f864 	bl	800948c <_sbrk_r>
 80093c4:	4581      	cmp	r9, r0
 80093c6:	d142      	bne.n	800944e <_malloc_r+0xea>
 80093c8:	6821      	ldr	r1, [r4, #0]
 80093ca:	1a6d      	subs	r5, r5, r1
 80093cc:	4629      	mov	r1, r5
 80093ce:	4630      	mov	r0, r6
 80093d0:	f7ff ffa6 	bl	8009320 <sbrk_aligned>
 80093d4:	3001      	adds	r0, #1
 80093d6:	d03a      	beq.n	800944e <_malloc_r+0xea>
 80093d8:	6823      	ldr	r3, [r4, #0]
 80093da:	442b      	add	r3, r5
 80093dc:	6023      	str	r3, [r4, #0]
 80093de:	f8d8 3000 	ldr.w	r3, [r8]
 80093e2:	685a      	ldr	r2, [r3, #4]
 80093e4:	bb62      	cbnz	r2, 8009440 <_malloc_r+0xdc>
 80093e6:	f8c8 7000 	str.w	r7, [r8]
 80093ea:	e00f      	b.n	800940c <_malloc_r+0xa8>
 80093ec:	6822      	ldr	r2, [r4, #0]
 80093ee:	1b52      	subs	r2, r2, r5
 80093f0:	d420      	bmi.n	8009434 <_malloc_r+0xd0>
 80093f2:	2a0b      	cmp	r2, #11
 80093f4:	d917      	bls.n	8009426 <_malloc_r+0xc2>
 80093f6:	1961      	adds	r1, r4, r5
 80093f8:	42a3      	cmp	r3, r4
 80093fa:	6025      	str	r5, [r4, #0]
 80093fc:	bf18      	it	ne
 80093fe:	6059      	strne	r1, [r3, #4]
 8009400:	6863      	ldr	r3, [r4, #4]
 8009402:	bf08      	it	eq
 8009404:	f8c8 1000 	streq.w	r1, [r8]
 8009408:	5162      	str	r2, [r4, r5]
 800940a:	604b      	str	r3, [r1, #4]
 800940c:	4630      	mov	r0, r6
 800940e:	f000 f82f 	bl	8009470 <__malloc_unlock>
 8009412:	f104 000b 	add.w	r0, r4, #11
 8009416:	1d23      	adds	r3, r4, #4
 8009418:	f020 0007 	bic.w	r0, r0, #7
 800941c:	1ac2      	subs	r2, r0, r3
 800941e:	bf1c      	itt	ne
 8009420:	1a1b      	subne	r3, r3, r0
 8009422:	50a3      	strne	r3, [r4, r2]
 8009424:	e7af      	b.n	8009386 <_malloc_r+0x22>
 8009426:	6862      	ldr	r2, [r4, #4]
 8009428:	42a3      	cmp	r3, r4
 800942a:	bf0c      	ite	eq
 800942c:	f8c8 2000 	streq.w	r2, [r8]
 8009430:	605a      	strne	r2, [r3, #4]
 8009432:	e7eb      	b.n	800940c <_malloc_r+0xa8>
 8009434:	4623      	mov	r3, r4
 8009436:	6864      	ldr	r4, [r4, #4]
 8009438:	e7ae      	b.n	8009398 <_malloc_r+0x34>
 800943a:	463c      	mov	r4, r7
 800943c:	687f      	ldr	r7, [r7, #4]
 800943e:	e7b6      	b.n	80093ae <_malloc_r+0x4a>
 8009440:	461a      	mov	r2, r3
 8009442:	685b      	ldr	r3, [r3, #4]
 8009444:	42a3      	cmp	r3, r4
 8009446:	d1fb      	bne.n	8009440 <_malloc_r+0xdc>
 8009448:	2300      	movs	r3, #0
 800944a:	6053      	str	r3, [r2, #4]
 800944c:	e7de      	b.n	800940c <_malloc_r+0xa8>
 800944e:	230c      	movs	r3, #12
 8009450:	6033      	str	r3, [r6, #0]
 8009452:	4630      	mov	r0, r6
 8009454:	f000 f80c 	bl	8009470 <__malloc_unlock>
 8009458:	e794      	b.n	8009384 <_malloc_r+0x20>
 800945a:	6005      	str	r5, [r0, #0]
 800945c:	e7d6      	b.n	800940c <_malloc_r+0xa8>
 800945e:	bf00      	nop
 8009460:	20000950 	.word	0x20000950

08009464 <__malloc_lock>:
 8009464:	4801      	ldr	r0, [pc, #4]	@ (800946c <__malloc_lock+0x8>)
 8009466:	f000 b84b 	b.w	8009500 <__retarget_lock_acquire_recursive>
 800946a:	bf00      	nop
 800946c:	20000a90 	.word	0x20000a90

08009470 <__malloc_unlock>:
 8009470:	4801      	ldr	r0, [pc, #4]	@ (8009478 <__malloc_unlock+0x8>)
 8009472:	f000 b846 	b.w	8009502 <__retarget_lock_release_recursive>
 8009476:	bf00      	nop
 8009478:	20000a90 	.word	0x20000a90

0800947c <memset>:
 800947c:	4402      	add	r2, r0
 800947e:	4603      	mov	r3, r0
 8009480:	4293      	cmp	r3, r2
 8009482:	d100      	bne.n	8009486 <memset+0xa>
 8009484:	4770      	bx	lr
 8009486:	f803 1b01 	strb.w	r1, [r3], #1
 800948a:	e7f9      	b.n	8009480 <memset+0x4>

0800948c <_sbrk_r>:
 800948c:	b538      	push	{r3, r4, r5, lr}
 800948e:	4d06      	ldr	r5, [pc, #24]	@ (80094a8 <_sbrk_r+0x1c>)
 8009490:	2300      	movs	r3, #0
 8009492:	4604      	mov	r4, r0
 8009494:	4608      	mov	r0, r1
 8009496:	602b      	str	r3, [r5, #0]
 8009498:	f7f7 fcc4 	bl	8000e24 <_sbrk>
 800949c:	1c43      	adds	r3, r0, #1
 800949e:	d102      	bne.n	80094a6 <_sbrk_r+0x1a>
 80094a0:	682b      	ldr	r3, [r5, #0]
 80094a2:	b103      	cbz	r3, 80094a6 <_sbrk_r+0x1a>
 80094a4:	6023      	str	r3, [r4, #0]
 80094a6:	bd38      	pop	{r3, r4, r5, pc}
 80094a8:	20000a8c 	.word	0x20000a8c

080094ac <__errno>:
 80094ac:	4b01      	ldr	r3, [pc, #4]	@ (80094b4 <__errno+0x8>)
 80094ae:	6818      	ldr	r0, [r3, #0]
 80094b0:	4770      	bx	lr
 80094b2:	bf00      	nop
 80094b4:	2000002c 	.word	0x2000002c

080094b8 <__libc_init_array>:
 80094b8:	b570      	push	{r4, r5, r6, lr}
 80094ba:	4d0d      	ldr	r5, [pc, #52]	@ (80094f0 <__libc_init_array+0x38>)
 80094bc:	4c0d      	ldr	r4, [pc, #52]	@ (80094f4 <__libc_init_array+0x3c>)
 80094be:	1b64      	subs	r4, r4, r5
 80094c0:	10a4      	asrs	r4, r4, #2
 80094c2:	2600      	movs	r6, #0
 80094c4:	42a6      	cmp	r6, r4
 80094c6:	d109      	bne.n	80094dc <__libc_init_array+0x24>
 80094c8:	4d0b      	ldr	r5, [pc, #44]	@ (80094f8 <__libc_init_array+0x40>)
 80094ca:	4c0c      	ldr	r4, [pc, #48]	@ (80094fc <__libc_init_array+0x44>)
 80094cc:	f000 f864 	bl	8009598 <_init>
 80094d0:	1b64      	subs	r4, r4, r5
 80094d2:	10a4      	asrs	r4, r4, #2
 80094d4:	2600      	movs	r6, #0
 80094d6:	42a6      	cmp	r6, r4
 80094d8:	d105      	bne.n	80094e6 <__libc_init_array+0x2e>
 80094da:	bd70      	pop	{r4, r5, r6, pc}
 80094dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80094e0:	4798      	blx	r3
 80094e2:	3601      	adds	r6, #1
 80094e4:	e7ee      	b.n	80094c4 <__libc_init_array+0xc>
 80094e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80094ea:	4798      	blx	r3
 80094ec:	3601      	adds	r6, #1
 80094ee:	e7f2      	b.n	80094d6 <__libc_init_array+0x1e>
 80094f0:	080095d4 	.word	0x080095d4
 80094f4:	080095d4 	.word	0x080095d4
 80094f8:	080095d4 	.word	0x080095d4
 80094fc:	080095d8 	.word	0x080095d8

08009500 <__retarget_lock_acquire_recursive>:
 8009500:	4770      	bx	lr

08009502 <__retarget_lock_release_recursive>:
 8009502:	4770      	bx	lr

08009504 <_free_r>:
 8009504:	b538      	push	{r3, r4, r5, lr}
 8009506:	4605      	mov	r5, r0
 8009508:	2900      	cmp	r1, #0
 800950a:	d041      	beq.n	8009590 <_free_r+0x8c>
 800950c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009510:	1f0c      	subs	r4, r1, #4
 8009512:	2b00      	cmp	r3, #0
 8009514:	bfb8      	it	lt
 8009516:	18e4      	addlt	r4, r4, r3
 8009518:	f7ff ffa4 	bl	8009464 <__malloc_lock>
 800951c:	4a1d      	ldr	r2, [pc, #116]	@ (8009594 <_free_r+0x90>)
 800951e:	6813      	ldr	r3, [r2, #0]
 8009520:	b933      	cbnz	r3, 8009530 <_free_r+0x2c>
 8009522:	6063      	str	r3, [r4, #4]
 8009524:	6014      	str	r4, [r2, #0]
 8009526:	4628      	mov	r0, r5
 8009528:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800952c:	f7ff bfa0 	b.w	8009470 <__malloc_unlock>
 8009530:	42a3      	cmp	r3, r4
 8009532:	d908      	bls.n	8009546 <_free_r+0x42>
 8009534:	6820      	ldr	r0, [r4, #0]
 8009536:	1821      	adds	r1, r4, r0
 8009538:	428b      	cmp	r3, r1
 800953a:	bf01      	itttt	eq
 800953c:	6819      	ldreq	r1, [r3, #0]
 800953e:	685b      	ldreq	r3, [r3, #4]
 8009540:	1809      	addeq	r1, r1, r0
 8009542:	6021      	streq	r1, [r4, #0]
 8009544:	e7ed      	b.n	8009522 <_free_r+0x1e>
 8009546:	461a      	mov	r2, r3
 8009548:	685b      	ldr	r3, [r3, #4]
 800954a:	b10b      	cbz	r3, 8009550 <_free_r+0x4c>
 800954c:	42a3      	cmp	r3, r4
 800954e:	d9fa      	bls.n	8009546 <_free_r+0x42>
 8009550:	6811      	ldr	r1, [r2, #0]
 8009552:	1850      	adds	r0, r2, r1
 8009554:	42a0      	cmp	r0, r4
 8009556:	d10b      	bne.n	8009570 <_free_r+0x6c>
 8009558:	6820      	ldr	r0, [r4, #0]
 800955a:	4401      	add	r1, r0
 800955c:	1850      	adds	r0, r2, r1
 800955e:	4283      	cmp	r3, r0
 8009560:	6011      	str	r1, [r2, #0]
 8009562:	d1e0      	bne.n	8009526 <_free_r+0x22>
 8009564:	6818      	ldr	r0, [r3, #0]
 8009566:	685b      	ldr	r3, [r3, #4]
 8009568:	6053      	str	r3, [r2, #4]
 800956a:	4408      	add	r0, r1
 800956c:	6010      	str	r0, [r2, #0]
 800956e:	e7da      	b.n	8009526 <_free_r+0x22>
 8009570:	d902      	bls.n	8009578 <_free_r+0x74>
 8009572:	230c      	movs	r3, #12
 8009574:	602b      	str	r3, [r5, #0]
 8009576:	e7d6      	b.n	8009526 <_free_r+0x22>
 8009578:	6820      	ldr	r0, [r4, #0]
 800957a:	1821      	adds	r1, r4, r0
 800957c:	428b      	cmp	r3, r1
 800957e:	bf04      	itt	eq
 8009580:	6819      	ldreq	r1, [r3, #0]
 8009582:	685b      	ldreq	r3, [r3, #4]
 8009584:	6063      	str	r3, [r4, #4]
 8009586:	bf04      	itt	eq
 8009588:	1809      	addeq	r1, r1, r0
 800958a:	6021      	streq	r1, [r4, #0]
 800958c:	6054      	str	r4, [r2, #4]
 800958e:	e7ca      	b.n	8009526 <_free_r+0x22>
 8009590:	bd38      	pop	{r3, r4, r5, pc}
 8009592:	bf00      	nop
 8009594:	20000950 	.word	0x20000950

08009598 <_init>:
 8009598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800959a:	bf00      	nop
 800959c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800959e:	bc08      	pop	{r3}
 80095a0:	469e      	mov	lr, r3
 80095a2:	4770      	bx	lr

080095a4 <_fini>:
 80095a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095a6:	bf00      	nop
 80095a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095aa:	bc08      	pop	{r3}
 80095ac:	469e      	mov	lr, r3
 80095ae:	4770      	bx	lr
