
UltraSonic_Sensor_Challenge.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e8c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  0800a014  0800a014  0000b014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a030  0800a030  0000c07c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a030  0800a030  0000b030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a038  0800a038  0000c07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a038  0800a038  0000b038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a03c  0800a03c  0000b03c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  0800a040  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c07c  2**0
                  CONTENTS
 10 .bss          00000a20  2000007c  2000007c  0000c07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000a9c  20000a9c  0000c07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015ea4  00000000  00000000  0000c0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034c8  00000000  00000000  00021f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012e8  00000000  00000000  00025418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e99  00000000  00000000  00026700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002339c  00000000  00000000  00027599  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000183e8  00000000  00000000  0004a935  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d068c  00000000  00000000  00062d1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001333a9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005498  00000000  00000000  001333ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  00138884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009ffc 	.word	0x08009ffc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08009ffc 	.word	0x08009ffc

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_uldivmod>:
 8000a04:	b953      	cbnz	r3, 8000a1c <__aeabi_uldivmod+0x18>
 8000a06:	b94a      	cbnz	r2, 8000a1c <__aeabi_uldivmod+0x18>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bf08      	it	eq
 8000a0c:	2800      	cmpeq	r0, #0
 8000a0e:	bf1c      	itt	ne
 8000a10:	f04f 31ff 	movne.w	r1, #4294967295
 8000a14:	f04f 30ff 	movne.w	r0, #4294967295
 8000a18:	f000 b988 	b.w	8000d2c <__aeabi_idiv0>
 8000a1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a24:	f000 f806 	bl	8000a34 <__udivmoddi4>
 8000a28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a30:	b004      	add	sp, #16
 8000a32:	4770      	bx	lr

08000a34 <__udivmoddi4>:
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	9d08      	ldr	r5, [sp, #32]
 8000a3a:	468e      	mov	lr, r1
 8000a3c:	4604      	mov	r4, r0
 8000a3e:	4688      	mov	r8, r1
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d14a      	bne.n	8000ada <__udivmoddi4+0xa6>
 8000a44:	428a      	cmp	r2, r1
 8000a46:	4617      	mov	r7, r2
 8000a48:	d962      	bls.n	8000b10 <__udivmoddi4+0xdc>
 8000a4a:	fab2 f682 	clz	r6, r2
 8000a4e:	b14e      	cbz	r6, 8000a64 <__udivmoddi4+0x30>
 8000a50:	f1c6 0320 	rsb	r3, r6, #32
 8000a54:	fa01 f806 	lsl.w	r8, r1, r6
 8000a58:	fa20 f303 	lsr.w	r3, r0, r3
 8000a5c:	40b7      	lsls	r7, r6
 8000a5e:	ea43 0808 	orr.w	r8, r3, r8
 8000a62:	40b4      	lsls	r4, r6
 8000a64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a68:	fa1f fc87 	uxth.w	ip, r7
 8000a6c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000a70:	0c23      	lsrs	r3, r4, #16
 8000a72:	fb0e 8811 	mls	r8, lr, r1, r8
 8000a76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a7a:	fb01 f20c 	mul.w	r2, r1, ip
 8000a7e:	429a      	cmp	r2, r3
 8000a80:	d909      	bls.n	8000a96 <__udivmoddi4+0x62>
 8000a82:	18fb      	adds	r3, r7, r3
 8000a84:	f101 30ff 	add.w	r0, r1, #4294967295
 8000a88:	f080 80ea 	bcs.w	8000c60 <__udivmoddi4+0x22c>
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	f240 80e7 	bls.w	8000c60 <__udivmoddi4+0x22c>
 8000a92:	3902      	subs	r1, #2
 8000a94:	443b      	add	r3, r7
 8000a96:	1a9a      	subs	r2, r3, r2
 8000a98:	b2a3      	uxth	r3, r4
 8000a9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000aa2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000aa6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000aaa:	459c      	cmp	ip, r3
 8000aac:	d909      	bls.n	8000ac2 <__udivmoddi4+0x8e>
 8000aae:	18fb      	adds	r3, r7, r3
 8000ab0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ab4:	f080 80d6 	bcs.w	8000c64 <__udivmoddi4+0x230>
 8000ab8:	459c      	cmp	ip, r3
 8000aba:	f240 80d3 	bls.w	8000c64 <__udivmoddi4+0x230>
 8000abe:	443b      	add	r3, r7
 8000ac0:	3802      	subs	r0, #2
 8000ac2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ac6:	eba3 030c 	sub.w	r3, r3, ip
 8000aca:	2100      	movs	r1, #0
 8000acc:	b11d      	cbz	r5, 8000ad6 <__udivmoddi4+0xa2>
 8000ace:	40f3      	lsrs	r3, r6
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	e9c5 3200 	strd	r3, r2, [r5]
 8000ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ada:	428b      	cmp	r3, r1
 8000adc:	d905      	bls.n	8000aea <__udivmoddi4+0xb6>
 8000ade:	b10d      	cbz	r5, 8000ae4 <__udivmoddi4+0xb0>
 8000ae0:	e9c5 0100 	strd	r0, r1, [r5]
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	4608      	mov	r0, r1
 8000ae8:	e7f5      	b.n	8000ad6 <__udivmoddi4+0xa2>
 8000aea:	fab3 f183 	clz	r1, r3
 8000aee:	2900      	cmp	r1, #0
 8000af0:	d146      	bne.n	8000b80 <__udivmoddi4+0x14c>
 8000af2:	4573      	cmp	r3, lr
 8000af4:	d302      	bcc.n	8000afc <__udivmoddi4+0xc8>
 8000af6:	4282      	cmp	r2, r0
 8000af8:	f200 8105 	bhi.w	8000d06 <__udivmoddi4+0x2d2>
 8000afc:	1a84      	subs	r4, r0, r2
 8000afe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b02:	2001      	movs	r0, #1
 8000b04:	4690      	mov	r8, r2
 8000b06:	2d00      	cmp	r5, #0
 8000b08:	d0e5      	beq.n	8000ad6 <__udivmoddi4+0xa2>
 8000b0a:	e9c5 4800 	strd	r4, r8, [r5]
 8000b0e:	e7e2      	b.n	8000ad6 <__udivmoddi4+0xa2>
 8000b10:	2a00      	cmp	r2, #0
 8000b12:	f000 8090 	beq.w	8000c36 <__udivmoddi4+0x202>
 8000b16:	fab2 f682 	clz	r6, r2
 8000b1a:	2e00      	cmp	r6, #0
 8000b1c:	f040 80a4 	bne.w	8000c68 <__udivmoddi4+0x234>
 8000b20:	1a8a      	subs	r2, r1, r2
 8000b22:	0c03      	lsrs	r3, r0, #16
 8000b24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b28:	b280      	uxth	r0, r0
 8000b2a:	b2bc      	uxth	r4, r7
 8000b2c:	2101      	movs	r1, #1
 8000b2e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000b32:	fb0e 221c 	mls	r2, lr, ip, r2
 8000b36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b3a:	fb04 f20c 	mul.w	r2, r4, ip
 8000b3e:	429a      	cmp	r2, r3
 8000b40:	d907      	bls.n	8000b52 <__udivmoddi4+0x11e>
 8000b42:	18fb      	adds	r3, r7, r3
 8000b44:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000b48:	d202      	bcs.n	8000b50 <__udivmoddi4+0x11c>
 8000b4a:	429a      	cmp	r2, r3
 8000b4c:	f200 80e0 	bhi.w	8000d10 <__udivmoddi4+0x2dc>
 8000b50:	46c4      	mov	ip, r8
 8000b52:	1a9b      	subs	r3, r3, r2
 8000b54:	fbb3 f2fe 	udiv	r2, r3, lr
 8000b58:	fb0e 3312 	mls	r3, lr, r2, r3
 8000b5c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000b60:	fb02 f404 	mul.w	r4, r2, r4
 8000b64:	429c      	cmp	r4, r3
 8000b66:	d907      	bls.n	8000b78 <__udivmoddi4+0x144>
 8000b68:	18fb      	adds	r3, r7, r3
 8000b6a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000b6e:	d202      	bcs.n	8000b76 <__udivmoddi4+0x142>
 8000b70:	429c      	cmp	r4, r3
 8000b72:	f200 80ca 	bhi.w	8000d0a <__udivmoddi4+0x2d6>
 8000b76:	4602      	mov	r2, r0
 8000b78:	1b1b      	subs	r3, r3, r4
 8000b7a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000b7e:	e7a5      	b.n	8000acc <__udivmoddi4+0x98>
 8000b80:	f1c1 0620 	rsb	r6, r1, #32
 8000b84:	408b      	lsls	r3, r1
 8000b86:	fa22 f706 	lsr.w	r7, r2, r6
 8000b8a:	431f      	orrs	r7, r3
 8000b8c:	fa0e f401 	lsl.w	r4, lr, r1
 8000b90:	fa20 f306 	lsr.w	r3, r0, r6
 8000b94:	fa2e fe06 	lsr.w	lr, lr, r6
 8000b98:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000b9c:	4323      	orrs	r3, r4
 8000b9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ba2:	fa1f fc87 	uxth.w	ip, r7
 8000ba6:	fbbe f0f9 	udiv	r0, lr, r9
 8000baa:	0c1c      	lsrs	r4, r3, #16
 8000bac:	fb09 ee10 	mls	lr, r9, r0, lr
 8000bb0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000bb4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000bb8:	45a6      	cmp	lr, r4
 8000bba:	fa02 f201 	lsl.w	r2, r2, r1
 8000bbe:	d909      	bls.n	8000bd4 <__udivmoddi4+0x1a0>
 8000bc0:	193c      	adds	r4, r7, r4
 8000bc2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000bc6:	f080 809c 	bcs.w	8000d02 <__udivmoddi4+0x2ce>
 8000bca:	45a6      	cmp	lr, r4
 8000bcc:	f240 8099 	bls.w	8000d02 <__udivmoddi4+0x2ce>
 8000bd0:	3802      	subs	r0, #2
 8000bd2:	443c      	add	r4, r7
 8000bd4:	eba4 040e 	sub.w	r4, r4, lr
 8000bd8:	fa1f fe83 	uxth.w	lr, r3
 8000bdc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000be0:	fb09 4413 	mls	r4, r9, r3, r4
 8000be4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000be8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bec:	45a4      	cmp	ip, r4
 8000bee:	d908      	bls.n	8000c02 <__udivmoddi4+0x1ce>
 8000bf0:	193c      	adds	r4, r7, r4
 8000bf2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000bf6:	f080 8082 	bcs.w	8000cfe <__udivmoddi4+0x2ca>
 8000bfa:	45a4      	cmp	ip, r4
 8000bfc:	d97f      	bls.n	8000cfe <__udivmoddi4+0x2ca>
 8000bfe:	3b02      	subs	r3, #2
 8000c00:	443c      	add	r4, r7
 8000c02:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c06:	eba4 040c 	sub.w	r4, r4, ip
 8000c0a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c0e:	4564      	cmp	r4, ip
 8000c10:	4673      	mov	r3, lr
 8000c12:	46e1      	mov	r9, ip
 8000c14:	d362      	bcc.n	8000cdc <__udivmoddi4+0x2a8>
 8000c16:	d05f      	beq.n	8000cd8 <__udivmoddi4+0x2a4>
 8000c18:	b15d      	cbz	r5, 8000c32 <__udivmoddi4+0x1fe>
 8000c1a:	ebb8 0203 	subs.w	r2, r8, r3
 8000c1e:	eb64 0409 	sbc.w	r4, r4, r9
 8000c22:	fa04 f606 	lsl.w	r6, r4, r6
 8000c26:	fa22 f301 	lsr.w	r3, r2, r1
 8000c2a:	431e      	orrs	r6, r3
 8000c2c:	40cc      	lsrs	r4, r1
 8000c2e:	e9c5 6400 	strd	r6, r4, [r5]
 8000c32:	2100      	movs	r1, #0
 8000c34:	e74f      	b.n	8000ad6 <__udivmoddi4+0xa2>
 8000c36:	fbb1 fcf2 	udiv	ip, r1, r2
 8000c3a:	0c01      	lsrs	r1, r0, #16
 8000c3c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000c40:	b280      	uxth	r0, r0
 8000c42:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000c46:	463b      	mov	r3, r7
 8000c48:	4638      	mov	r0, r7
 8000c4a:	463c      	mov	r4, r7
 8000c4c:	46b8      	mov	r8, r7
 8000c4e:	46be      	mov	lr, r7
 8000c50:	2620      	movs	r6, #32
 8000c52:	fbb1 f1f7 	udiv	r1, r1, r7
 8000c56:	eba2 0208 	sub.w	r2, r2, r8
 8000c5a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000c5e:	e766      	b.n	8000b2e <__udivmoddi4+0xfa>
 8000c60:	4601      	mov	r1, r0
 8000c62:	e718      	b.n	8000a96 <__udivmoddi4+0x62>
 8000c64:	4610      	mov	r0, r2
 8000c66:	e72c      	b.n	8000ac2 <__udivmoddi4+0x8e>
 8000c68:	f1c6 0220 	rsb	r2, r6, #32
 8000c6c:	fa2e f302 	lsr.w	r3, lr, r2
 8000c70:	40b7      	lsls	r7, r6
 8000c72:	40b1      	lsls	r1, r6
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c7c:	430a      	orrs	r2, r1
 8000c7e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000c82:	b2bc      	uxth	r4, r7
 8000c84:	fb0e 3318 	mls	r3, lr, r8, r3
 8000c88:	0c11      	lsrs	r1, r2, #16
 8000c8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c8e:	fb08 f904 	mul.w	r9, r8, r4
 8000c92:	40b0      	lsls	r0, r6
 8000c94:	4589      	cmp	r9, r1
 8000c96:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000c9a:	b280      	uxth	r0, r0
 8000c9c:	d93e      	bls.n	8000d1c <__udivmoddi4+0x2e8>
 8000c9e:	1879      	adds	r1, r7, r1
 8000ca0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ca4:	d201      	bcs.n	8000caa <__udivmoddi4+0x276>
 8000ca6:	4589      	cmp	r9, r1
 8000ca8:	d81f      	bhi.n	8000cea <__udivmoddi4+0x2b6>
 8000caa:	eba1 0109 	sub.w	r1, r1, r9
 8000cae:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cb2:	fb09 f804 	mul.w	r8, r9, r4
 8000cb6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000cba:	b292      	uxth	r2, r2
 8000cbc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cc0:	4542      	cmp	r2, r8
 8000cc2:	d229      	bcs.n	8000d18 <__udivmoddi4+0x2e4>
 8000cc4:	18ba      	adds	r2, r7, r2
 8000cc6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000cca:	d2c4      	bcs.n	8000c56 <__udivmoddi4+0x222>
 8000ccc:	4542      	cmp	r2, r8
 8000cce:	d2c2      	bcs.n	8000c56 <__udivmoddi4+0x222>
 8000cd0:	f1a9 0102 	sub.w	r1, r9, #2
 8000cd4:	443a      	add	r2, r7
 8000cd6:	e7be      	b.n	8000c56 <__udivmoddi4+0x222>
 8000cd8:	45f0      	cmp	r8, lr
 8000cda:	d29d      	bcs.n	8000c18 <__udivmoddi4+0x1e4>
 8000cdc:	ebbe 0302 	subs.w	r3, lr, r2
 8000ce0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ce4:	3801      	subs	r0, #1
 8000ce6:	46e1      	mov	r9, ip
 8000ce8:	e796      	b.n	8000c18 <__udivmoddi4+0x1e4>
 8000cea:	eba7 0909 	sub.w	r9, r7, r9
 8000cee:	4449      	add	r1, r9
 8000cf0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000cf4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cf8:	fb09 f804 	mul.w	r8, r9, r4
 8000cfc:	e7db      	b.n	8000cb6 <__udivmoddi4+0x282>
 8000cfe:	4673      	mov	r3, lr
 8000d00:	e77f      	b.n	8000c02 <__udivmoddi4+0x1ce>
 8000d02:	4650      	mov	r0, sl
 8000d04:	e766      	b.n	8000bd4 <__udivmoddi4+0x1a0>
 8000d06:	4608      	mov	r0, r1
 8000d08:	e6fd      	b.n	8000b06 <__udivmoddi4+0xd2>
 8000d0a:	443b      	add	r3, r7
 8000d0c:	3a02      	subs	r2, #2
 8000d0e:	e733      	b.n	8000b78 <__udivmoddi4+0x144>
 8000d10:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d14:	443b      	add	r3, r7
 8000d16:	e71c      	b.n	8000b52 <__udivmoddi4+0x11e>
 8000d18:	4649      	mov	r1, r9
 8000d1a:	e79c      	b.n	8000c56 <__udivmoddi4+0x222>
 8000d1c:	eba1 0109 	sub.w	r1, r1, r9
 8000d20:	46c4      	mov	ip, r8
 8000d22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d26:	fb09 f804 	mul.w	r8, r9, r4
 8000d2a:	e7c4      	b.n	8000cb6 <__udivmoddi4+0x282>

08000d2c <__aeabi_idiv0>:
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop

08000d30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d34:	f000 fd4e 	bl	80017d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d38:	f000 f86e 	bl	8000e18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d3c:	f000 fa12 	bl	8001164 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d40:	f000 f8d4 	bl	8000eec <MX_I2C1_Init>
  MX_USB_HOST_Init();
 8000d44:	f008 fd04 	bl	8009750 <MX_USB_HOST_Init>
  MX_TIM1_Init();
 8000d48:	f000 f8fe 	bl	8000f48 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000d4c:	f000 f9aa 	bl	80010a4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  // Start Timer in one pulse mode
  HAL_TIM_OnePulse_Start(&htim1, TIM_CHANNEL_1);
 8000d50:	2100      	movs	r1, #0
 8000d52:	4828      	ldr	r0, [pc, #160]	@ (8000df4 <main+0xc4>)
 8000d54:	f004 fa12 	bl	800517c <HAL_TIM_OnePulse_Start>

  HAL_GPIO_WritePin(PULSE_TRIG_GPIO_Port, PULSE_TRIG_Pin, GPIO_PIN_RESET);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	2120      	movs	r1, #32
 8000d5c:	4826      	ldr	r0, [pc, #152]	@ (8000df8 <main+0xc8>)
 8000d5e:	f001 f87d 	bl	8001e5c <HAL_GPIO_WritePin>

  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000d62:	2100      	movs	r1, #0
 8000d64:	4825      	ldr	r0, [pc, #148]	@ (8000dfc <main+0xcc>)
 8000d66:	f004 f887 	bl	8004e78 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 8000d6a:	2104      	movs	r1, #4
 8000d6c:	4823      	ldr	r0, [pc, #140]	@ (8000dfc <main+0xcc>)
 8000d6e:	f004 f883 	bl	8004e78 <HAL_TIM_IC_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(PULSE_TRIG_GPIO_Port, PULSE_TRIG_Pin, GPIO_PIN_SET);
 8000d72:	2201      	movs	r2, #1
 8000d74:	2120      	movs	r1, #32
 8000d76:	4820      	ldr	r0, [pc, #128]	@ (8000df8 <main+0xc8>)
 8000d78:	f001 f870 	bl	8001e5c <HAL_GPIO_WritePin>
	  HAL_Delay(200);
 8000d7c:	20c8      	movs	r0, #200	@ 0xc8
 8000d7e:	f000 fd9b 	bl	80018b8 <HAL_Delay>
	  HAL_GPIO_WritePin(PULSE_TRIG_GPIO_Port, PULSE_TRIG_Pin, GPIO_PIN_RESET);
 8000d82:	2200      	movs	r2, #0
 8000d84:	2120      	movs	r1, #32
 8000d86:	481c      	ldr	r0, [pc, #112]	@ (8000df8 <main+0xc8>)
 8000d88:	f001 f868 	bl	8001e5c <HAL_GPIO_WritePin>

	  while (gEchoFlag == 0);
 8000d8c:	bf00      	nop
 8000d8e:	4b1c      	ldr	r3, [pc, #112]	@ (8000e00 <main+0xd0>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d0fb      	beq.n	8000d8e <main+0x5e>

	  gEchoFlag = 0;
 8000d96:	4b1a      	ldr	r3, [pc, #104]	@ (8000e00 <main+0xd0>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]

	  if (gFallingTime >= gRisingTime)
 8000d9c:	4b19      	ldr	r3, [pc, #100]	@ (8000e04 <main+0xd4>)
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	4b19      	ldr	r3, [pc, #100]	@ (8000e08 <main+0xd8>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	d307      	bcc.n	8000db8 <main+0x88>
	  {
	      gTimeOn = gFallingTime - gRisingTime;
 8000da8:	4b16      	ldr	r3, [pc, #88]	@ (8000e04 <main+0xd4>)
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	4b16      	ldr	r3, [pc, #88]	@ (8000e08 <main+0xd8>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	1ad3      	subs	r3, r2, r3
 8000db2:	4a16      	ldr	r2, [pc, #88]	@ (8000e0c <main+0xdc>)
 8000db4:	6013      	str	r3, [r2, #0]
 8000db6:	e006      	b.n	8000dc6 <main+0x96>
	  }
	  else
	  {
	      // Timer overflowed between captures
	      gTimeOn = (0xFFFFFFFF - gRisingTime) + gFallingTime + 1;
 8000db8:	4b12      	ldr	r3, [pc, #72]	@ (8000e04 <main+0xd4>)
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	4b12      	ldr	r3, [pc, #72]	@ (8000e08 <main+0xd8>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	4a12      	ldr	r2, [pc, #72]	@ (8000e0c <main+0xdc>)
 8000dc4:	6013      	str	r3, [r2, #0]
	  }

	  gDistance = gTimeOn / 58.0;
 8000dc6:	4b11      	ldr	r3, [pc, #68]	@ (8000e0c <main+0xdc>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f7ff fb3e 	bl	800044c <__aeabi_ui2d>
 8000dd0:	f04f 0200 	mov.w	r2, #0
 8000dd4:	4b0e      	ldr	r3, [pc, #56]	@ (8000e10 <main+0xe0>)
 8000dd6:	f7ff fcdd 	bl	8000794 <__aeabi_ddiv>
 8000dda:	4602      	mov	r2, r0
 8000ddc:	460b      	mov	r3, r1
 8000dde:	4610      	mov	r0, r2
 8000de0:	4619      	mov	r1, r3
 8000de2:	f7ff fdbf 	bl	8000964 <__aeabi_d2f>
 8000de6:	4603      	mov	r3, r0
 8000de8:	4a0a      	ldr	r2, [pc, #40]	@ (8000e14 <main+0xe4>)
 8000dea:	6013      	str	r3, [r2, #0]

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000dec:	f008 fcd6 	bl	800979c <MX_USB_HOST_Process>
	  HAL_GPIO_WritePin(PULSE_TRIG_GPIO_Port, PULSE_TRIG_Pin, GPIO_PIN_SET);
 8000df0:	e7bf      	b.n	8000d72 <main+0x42>
 8000df2:	bf00      	nop
 8000df4:	200000ec 	.word	0x200000ec
 8000df8:	40020800 	.word	0x40020800
 8000dfc:	20000134 	.word	0x20000134
 8000e00:	2000018c 	.word	0x2000018c
 8000e04:	20000180 	.word	0x20000180
 8000e08:	2000017c 	.word	0x2000017c
 8000e0c:	20000184 	.word	0x20000184
 8000e10:	404d0000 	.word	0x404d0000
 8000e14:	20000188 	.word	0x20000188

08000e18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b094      	sub	sp, #80	@ 0x50
 8000e1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e1e:	f107 0320 	add.w	r3, r7, #32
 8000e22:	2230      	movs	r2, #48	@ 0x30
 8000e24:	2100      	movs	r1, #0
 8000e26:	4618      	mov	r0, r3
 8000e28:	f009 f85a 	bl	8009ee0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e2c:	f107 030c 	add.w	r3, r7, #12
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]
 8000e38:	60da      	str	r2, [r3, #12]
 8000e3a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	60bb      	str	r3, [r7, #8]
 8000e40:	4b28      	ldr	r3, [pc, #160]	@ (8000ee4 <SystemClock_Config+0xcc>)
 8000e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e44:	4a27      	ldr	r2, [pc, #156]	@ (8000ee4 <SystemClock_Config+0xcc>)
 8000e46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e4a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e4c:	4b25      	ldr	r3, [pc, #148]	@ (8000ee4 <SystemClock_Config+0xcc>)
 8000e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e54:	60bb      	str	r3, [r7, #8]
 8000e56:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e58:	2300      	movs	r3, #0
 8000e5a:	607b      	str	r3, [r7, #4]
 8000e5c:	4b22      	ldr	r3, [pc, #136]	@ (8000ee8 <SystemClock_Config+0xd0>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a21      	ldr	r2, [pc, #132]	@ (8000ee8 <SystemClock_Config+0xd0>)
 8000e62:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e66:	6013      	str	r3, [r2, #0]
 8000e68:	4b1f      	ldr	r3, [pc, #124]	@ (8000ee8 <SystemClock_Config+0xd0>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e70:	607b      	str	r3, [r7, #4]
 8000e72:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e74:	2301      	movs	r3, #1
 8000e76:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e78:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e7c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e82:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000e86:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e88:	2308      	movs	r3, #8
 8000e8a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000e8c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000e90:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e92:	2302      	movs	r3, #2
 8000e94:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000e96:	2307      	movs	r3, #7
 8000e98:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e9a:	f107 0320 	add.w	r3, r7, #32
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f003 fa6e 	bl	8004380 <HAL_RCC_OscConfig>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000eaa:	f000 fa97 	bl	80013dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eae:	230f      	movs	r3, #15
 8000eb0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000eba:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000ebe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ec0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ec4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ec6:	f107 030c 	add.w	r3, r7, #12
 8000eca:	2105      	movs	r1, #5
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f003 fccf 	bl	8004870 <HAL_RCC_ClockConfig>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000ed8:	f000 fa80 	bl	80013dc <Error_Handler>
  }
}
 8000edc:	bf00      	nop
 8000ede:	3750      	adds	r7, #80	@ 0x50
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	40023800 	.word	0x40023800
 8000ee8:	40007000 	.word	0x40007000

08000eec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ef0:	4b12      	ldr	r3, [pc, #72]	@ (8000f3c <MX_I2C1_Init+0x50>)
 8000ef2:	4a13      	ldr	r2, [pc, #76]	@ (8000f40 <MX_I2C1_Init+0x54>)
 8000ef4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ef6:	4b11      	ldr	r3, [pc, #68]	@ (8000f3c <MX_I2C1_Init+0x50>)
 8000ef8:	4a12      	ldr	r2, [pc, #72]	@ (8000f44 <MX_I2C1_Init+0x58>)
 8000efa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000efc:	4b0f      	ldr	r3, [pc, #60]	@ (8000f3c <MX_I2C1_Init+0x50>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f02:	4b0e      	ldr	r3, [pc, #56]	@ (8000f3c <MX_I2C1_Init+0x50>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f08:	4b0c      	ldr	r3, [pc, #48]	@ (8000f3c <MX_I2C1_Init+0x50>)
 8000f0a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f0e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f10:	4b0a      	ldr	r3, [pc, #40]	@ (8000f3c <MX_I2C1_Init+0x50>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f16:	4b09      	ldr	r3, [pc, #36]	@ (8000f3c <MX_I2C1_Init+0x50>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f1c:	4b07      	ldr	r3, [pc, #28]	@ (8000f3c <MX_I2C1_Init+0x50>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f22:	4b06      	ldr	r3, [pc, #24]	@ (8000f3c <MX_I2C1_Init+0x50>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f28:	4804      	ldr	r0, [pc, #16]	@ (8000f3c <MX_I2C1_Init+0x50>)
 8000f2a:	f003 f8e5 	bl	80040f8 <HAL_I2C_Init>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f34:	f000 fa52 	bl	80013dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f38:	bf00      	nop
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20000098 	.word	0x20000098
 8000f40:	40005400 	.word	0x40005400
 8000f44:	000186a0 	.word	0x000186a0

08000f48 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b096      	sub	sp, #88	@ 0x58
 8000f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000f4e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	605a      	str	r2, [r3, #4]
 8000f58:	609a      	str	r2, [r3, #8]
 8000f5a:	60da      	str	r2, [r3, #12]
 8000f5c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f5e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f68:	f107 0320 	add.w	r3, r7, #32
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]
 8000f78:	615a      	str	r2, [r3, #20]
 8000f7a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f7c:	463b      	mov	r3, r7
 8000f7e:	2220      	movs	r2, #32
 8000f80:	2100      	movs	r1, #0
 8000f82:	4618      	mov	r0, r3
 8000f84:	f008 ffac 	bl	8009ee0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f88:	4b44      	ldr	r3, [pc, #272]	@ (800109c <MX_TIM1_Init+0x154>)
 8000f8a:	4a45      	ldr	r2, [pc, #276]	@ (80010a0 <MX_TIM1_Init+0x158>)
 8000f8c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 8000f8e:	4b43      	ldr	r3, [pc, #268]	@ (800109c <MX_TIM1_Init+0x154>)
 8000f90:	22a7      	movs	r2, #167	@ 0xa7
 8000f92:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f94:	4b41      	ldr	r3, [pc, #260]	@ (800109c <MX_TIM1_Init+0x154>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20-1;
 8000f9a:	4b40      	ldr	r3, [pc, #256]	@ (800109c <MX_TIM1_Init+0x154>)
 8000f9c:	2213      	movs	r2, #19
 8000f9e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fa0:	4b3e      	ldr	r3, [pc, #248]	@ (800109c <MX_TIM1_Init+0x154>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fa6:	4b3d      	ldr	r3, [pc, #244]	@ (800109c <MX_TIM1_Init+0x154>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fac:	4b3b      	ldr	r3, [pc, #236]	@ (800109c <MX_TIM1_Init+0x154>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fb2:	483a      	ldr	r0, [pc, #232]	@ (800109c <MX_TIM1_Init+0x154>)
 8000fb4:	f003 fe68 	bl	8004c88 <HAL_TIM_Base_Init>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000fbe:	f000 fa0d 	bl	80013dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000fc2:	4836      	ldr	r0, [pc, #216]	@ (800109c <MX_TIM1_Init+0x154>)
 8000fc4:	f003 feaf 	bl	8004d26 <HAL_TIM_PWM_Init>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000fce:	f000 fa05 	bl	80013dc <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 8000fd2:	2108      	movs	r1, #8
 8000fd4:	4831      	ldr	r0, [pc, #196]	@ (800109c <MX_TIM1_Init+0x154>)
 8000fd6:	f004 f877 	bl	80050c8 <HAL_TIM_OnePulse_Init>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000fe0:	f000 f9fc 	bl	80013dc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000fe4:	2306      	movs	r3, #6
 8000fe6:	647b      	str	r3, [r7, #68]	@ 0x44
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8000fe8:	2360      	movs	r3, #96	@ 0x60
 8000fea:	64bb      	str	r3, [r7, #72]	@ 0x48
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8000fec:	2300      	movs	r3, #0
 8000fee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sSlaveConfig.TriggerFilter = 0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000ff4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4828      	ldr	r0, [pc, #160]	@ (800109c <MX_TIM1_Init+0x154>)
 8000ffc:	f004 fb6e 	bl	80056dc <HAL_TIM_SlaveConfigSynchro>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001006:	f000 f9e9 	bl	80013dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800100a:	2300      	movs	r3, #0
 800100c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800100e:	2300      	movs	r3, #0
 8001010:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001012:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001016:	4619      	mov	r1, r3
 8001018:	4820      	ldr	r0, [pc, #128]	@ (800109c <MX_TIM1_Init+0x154>)
 800101a:	f005 f8c9 	bl	80061b0 <HAL_TIMEx_MasterConfigSynchronization>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_TIM1_Init+0xe0>
  {
    Error_Handler();
 8001024:	f000 f9da 	bl	80013dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001028:	2370      	movs	r3, #112	@ 0x70
 800102a:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 10-1;
 800102c:	2309      	movs	r3, #9
 800102e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001030:	2300      	movs	r3, #0
 8001032:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001034:	2300      	movs	r3, #0
 8001036:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001038:	2300      	movs	r3, #0
 800103a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800103c:	2300      	movs	r3, #0
 800103e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001040:	2300      	movs	r3, #0
 8001042:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001044:	f107 0320 	add.w	r3, r7, #32
 8001048:	2200      	movs	r2, #0
 800104a:	4619      	mov	r1, r3
 800104c:	4813      	ldr	r0, [pc, #76]	@ (800109c <MX_TIM1_Init+0x154>)
 800104e:	f004 fa83 	bl	8005558 <HAL_TIM_PWM_ConfigChannel>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8001058:	f000 f9c0 	bl	80013dc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800105c:	2300      	movs	r3, #0
 800105e:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001060:	2300      	movs	r3, #0
 8001062:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001064:	2300      	movs	r3, #0
 8001066:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001068:	2300      	movs	r3, #0
 800106a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800106c:	2300      	movs	r3, #0
 800106e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001070:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001074:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001076:	2300      	movs	r3, #0
 8001078:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800107a:	463b      	mov	r3, r7
 800107c:	4619      	mov	r1, r3
 800107e:	4807      	ldr	r0, [pc, #28]	@ (800109c <MX_TIM1_Init+0x154>)
 8001080:	f005 f912 	bl	80062a8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 800108a:	f000 f9a7 	bl	80013dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800108e:	4803      	ldr	r0, [pc, #12]	@ (800109c <MX_TIM1_Init+0x154>)
 8001090:	f000 fab0 	bl	80015f4 <HAL_TIM_MspPostInit>

}
 8001094:	bf00      	nop
 8001096:	3758      	adds	r7, #88	@ 0x58
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	200000ec 	.word	0x200000ec
 80010a0:	40010000 	.word	0x40010000

080010a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010aa:	f107 0310 	add.w	r3, r7, #16
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80010b4:	463b      	mov	r3, r7
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010c0:	4b27      	ldr	r3, [pc, #156]	@ (8001160 <MX_TIM2_Init+0xbc>)
 80010c2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 80010c8:	4b25      	ldr	r3, [pc, #148]	@ (8001160 <MX_TIM2_Init+0xbc>)
 80010ca:	2253      	movs	r2, #83	@ 0x53
 80010cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ce:	4b24      	ldr	r3, [pc, #144]	@ (8001160 <MX_TIM2_Init+0xbc>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80010d4:	4b22      	ldr	r3, [pc, #136]	@ (8001160 <MX_TIM2_Init+0xbc>)
 80010d6:	f04f 32ff 	mov.w	r2, #4294967295
 80010da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010dc:	4b20      	ldr	r3, [pc, #128]	@ (8001160 <MX_TIM2_Init+0xbc>)
 80010de:	2200      	movs	r2, #0
 80010e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001160 <MX_TIM2_Init+0xbc>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80010e8:	481d      	ldr	r0, [pc, #116]	@ (8001160 <MX_TIM2_Init+0xbc>)
 80010ea:	f003 fe75 	bl	8004dd8 <HAL_TIM_IC_Init>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80010f4:	f000 f972 	bl	80013dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010f8:	2300      	movs	r3, #0
 80010fa:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010fc:	2300      	movs	r3, #0
 80010fe:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001100:	f107 0310 	add.w	r3, r7, #16
 8001104:	4619      	mov	r1, r3
 8001106:	4816      	ldr	r0, [pc, #88]	@ (8001160 <MX_TIM2_Init+0xbc>)
 8001108:	f005 f852 	bl	80061b0 <HAL_TIMEx_MasterConfigSynchronization>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001112:	f000 f963 	bl	80013dc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001116:	2300      	movs	r3, #0
 8001118:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800111a:	2301      	movs	r3, #1
 800111c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800111e:	2300      	movs	r3, #0
 8001120:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001122:	2300      	movs	r3, #0
 8001124:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001126:	463b      	mov	r3, r7
 8001128:	2200      	movs	r2, #0
 800112a:	4619      	mov	r1, r3
 800112c:	480c      	ldr	r0, [pc, #48]	@ (8001160 <MX_TIM2_Init+0xbc>)
 800112e:	f004 f977 	bl	8005420 <HAL_TIM_IC_ConfigChannel>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001138:	f000 f950 	bl	80013dc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800113c:	2302      	movs	r3, #2
 800113e:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001140:	463b      	mov	r3, r7
 8001142:	2204      	movs	r2, #4
 8001144:	4619      	mov	r1, r3
 8001146:	4806      	ldr	r0, [pc, #24]	@ (8001160 <MX_TIM2_Init+0xbc>)
 8001148:	f004 f96a 	bl	8005420 <HAL_TIM_IC_ConfigChannel>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001152:	f000 f943 	bl	80013dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001156:	bf00      	nop
 8001158:	3718      	adds	r7, #24
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000134 	.word	0x20000134

08001164 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b08c      	sub	sp, #48	@ 0x30
 8001168:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116a:	f107 031c 	add.w	r3, r7, #28
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]
 8001176:	60da      	str	r2, [r3, #12]
 8001178:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	61bb      	str	r3, [r7, #24]
 800117e:	4b7d      	ldr	r3, [pc, #500]	@ (8001374 <MX_GPIO_Init+0x210>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001182:	4a7c      	ldr	r2, [pc, #496]	@ (8001374 <MX_GPIO_Init+0x210>)
 8001184:	f043 0310 	orr.w	r3, r3, #16
 8001188:	6313      	str	r3, [r2, #48]	@ 0x30
 800118a:	4b7a      	ldr	r3, [pc, #488]	@ (8001374 <MX_GPIO_Init+0x210>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118e:	f003 0310 	and.w	r3, r3, #16
 8001192:	61bb      	str	r3, [r7, #24]
 8001194:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	617b      	str	r3, [r7, #20]
 800119a:	4b76      	ldr	r3, [pc, #472]	@ (8001374 <MX_GPIO_Init+0x210>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119e:	4a75      	ldr	r2, [pc, #468]	@ (8001374 <MX_GPIO_Init+0x210>)
 80011a0:	f043 0304 	orr.w	r3, r3, #4
 80011a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011a6:	4b73      	ldr	r3, [pc, #460]	@ (8001374 <MX_GPIO_Init+0x210>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011aa:	f003 0304 	and.w	r3, r3, #4
 80011ae:	617b      	str	r3, [r7, #20]
 80011b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	613b      	str	r3, [r7, #16]
 80011b6:	4b6f      	ldr	r3, [pc, #444]	@ (8001374 <MX_GPIO_Init+0x210>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ba:	4a6e      	ldr	r2, [pc, #440]	@ (8001374 <MX_GPIO_Init+0x210>)
 80011bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011c2:	4b6c      	ldr	r3, [pc, #432]	@ (8001374 <MX_GPIO_Init+0x210>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011ca:	613b      	str	r3, [r7, #16]
 80011cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	4b68      	ldr	r3, [pc, #416]	@ (8001374 <MX_GPIO_Init+0x210>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d6:	4a67      	ldr	r2, [pc, #412]	@ (8001374 <MX_GPIO_Init+0x210>)
 80011d8:	f043 0301 	orr.w	r3, r3, #1
 80011dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011de:	4b65      	ldr	r3, [pc, #404]	@ (8001374 <MX_GPIO_Init+0x210>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e2:	f003 0301 	and.w	r3, r3, #1
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	60bb      	str	r3, [r7, #8]
 80011ee:	4b61      	ldr	r3, [pc, #388]	@ (8001374 <MX_GPIO_Init+0x210>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f2:	4a60      	ldr	r2, [pc, #384]	@ (8001374 <MX_GPIO_Init+0x210>)
 80011f4:	f043 0302 	orr.w	r3, r3, #2
 80011f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011fa:	4b5e      	ldr	r3, [pc, #376]	@ (8001374 <MX_GPIO_Init+0x210>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	60bb      	str	r3, [r7, #8]
 8001204:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	607b      	str	r3, [r7, #4]
 800120a:	4b5a      	ldr	r3, [pc, #360]	@ (8001374 <MX_GPIO_Init+0x210>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120e:	4a59      	ldr	r2, [pc, #356]	@ (8001374 <MX_GPIO_Init+0x210>)
 8001210:	f043 0308 	orr.w	r3, r3, #8
 8001214:	6313      	str	r3, [r2, #48]	@ 0x30
 8001216:	4b57      	ldr	r3, [pc, #348]	@ (8001374 <MX_GPIO_Init+0x210>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121a:	f003 0308 	and.w	r3, r3, #8
 800121e:	607b      	str	r3, [r7, #4]
 8001220:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001222:	2200      	movs	r2, #0
 8001224:	2108      	movs	r1, #8
 8001226:	4854      	ldr	r0, [pc, #336]	@ (8001378 <MX_GPIO_Init+0x214>)
 8001228:	f000 fe18 	bl	8001e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800122c:	2201      	movs	r2, #1
 800122e:	2101      	movs	r1, #1
 8001230:	4852      	ldr	r0, [pc, #328]	@ (800137c <MX_GPIO_Init+0x218>)
 8001232:	f000 fe13 	bl	8001e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PULSE_TRIG_GPIO_Port, PULSE_TRIG_Pin, GPIO_PIN_RESET);
 8001236:	2200      	movs	r2, #0
 8001238:	2120      	movs	r1, #32
 800123a:	4850      	ldr	r0, [pc, #320]	@ (800137c <MX_GPIO_Init+0x218>)
 800123c:	f000 fe0e 	bl	8001e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001240:	2200      	movs	r2, #0
 8001242:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8001246:	484e      	ldr	r0, [pc, #312]	@ (8001380 <MX_GPIO_Init+0x21c>)
 8001248:	f000 fe08 	bl	8001e5c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800124c:	2308      	movs	r3, #8
 800124e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001250:	2301      	movs	r3, #1
 8001252:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	2300      	movs	r3, #0
 8001256:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001258:	2300      	movs	r3, #0
 800125a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800125c:	f107 031c 	add.w	r3, r7, #28
 8001260:	4619      	mov	r1, r3
 8001262:	4845      	ldr	r0, [pc, #276]	@ (8001378 <MX_GPIO_Init+0x214>)
 8001264:	f000 fc5e 	bl	8001b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin PULSE_TRIG_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|PULSE_TRIG_Pin;
 8001268:	2321      	movs	r3, #33	@ 0x21
 800126a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800126c:	2301      	movs	r3, #1
 800126e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001274:	2300      	movs	r3, #0
 8001276:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001278:	f107 031c 	add.w	r3, r7, #28
 800127c:	4619      	mov	r1, r3
 800127e:	483f      	ldr	r0, [pc, #252]	@ (800137c <MX_GPIO_Init+0x218>)
 8001280:	f000 fc50 	bl	8001b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001284:	2308      	movs	r3, #8
 8001286:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001288:	2302      	movs	r3, #2
 800128a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128c:	2300      	movs	r3, #0
 800128e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001290:	2300      	movs	r3, #0
 8001292:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001294:	2305      	movs	r3, #5
 8001296:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001298:	f107 031c 	add.w	r3, r7, #28
 800129c:	4619      	mov	r1, r3
 800129e:	4837      	ldr	r0, [pc, #220]	@ (800137c <MX_GPIO_Init+0x218>)
 80012a0:	f000 fc40 	bl	8001b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012a4:	2301      	movs	r3, #1
 80012a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80012a8:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80012ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ae:	2300      	movs	r3, #0
 80012b0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012b2:	f107 031c 	add.w	r3, r7, #28
 80012b6:	4619      	mov	r1, r3
 80012b8:	4832      	ldr	r0, [pc, #200]	@ (8001384 <MX_GPIO_Init+0x220>)
 80012ba:	f000 fc33 	bl	8001b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80012be:	2304      	movs	r3, #4
 80012c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012c2:	2300      	movs	r3, #0
 80012c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80012ca:	f107 031c 	add.w	r3, r7, #28
 80012ce:	4619      	mov	r1, r3
 80012d0:	482d      	ldr	r0, [pc, #180]	@ (8001388 <MX_GPIO_Init+0x224>)
 80012d2:	f000 fc27 	bl	8001b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80012d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012dc:	2302      	movs	r3, #2
 80012de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e4:	2300      	movs	r3, #0
 80012e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012e8:	2305      	movs	r3, #5
 80012ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80012ec:	f107 031c 	add.w	r3, r7, #28
 80012f0:	4619      	mov	r1, r3
 80012f2:	4825      	ldr	r0, [pc, #148]	@ (8001388 <MX_GPIO_Init+0x224>)
 80012f4:	f000 fc16 	bl	8001b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80012f8:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80012fc:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012fe:	2301      	movs	r3, #1
 8001300:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001306:	2300      	movs	r3, #0
 8001308:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800130a:	f107 031c 	add.w	r3, r7, #28
 800130e:	4619      	mov	r1, r3
 8001310:	481b      	ldr	r0, [pc, #108]	@ (8001380 <MX_GPIO_Init+0x21c>)
 8001312:	f000 fc07 	bl	8001b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001316:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 800131a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131c:	2302      	movs	r3, #2
 800131e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001324:	2300      	movs	r3, #0
 8001326:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001328:	2306      	movs	r3, #6
 800132a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800132c:	f107 031c 	add.w	r3, r7, #28
 8001330:	4619      	mov	r1, r3
 8001332:	4812      	ldr	r0, [pc, #72]	@ (800137c <MX_GPIO_Init+0x218>)
 8001334:	f000 fbf6 	bl	8001b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001338:	2320      	movs	r3, #32
 800133a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800133c:	2300      	movs	r3, #0
 800133e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001344:	f107 031c 	add.w	r3, r7, #28
 8001348:	4619      	mov	r1, r3
 800134a:	480d      	ldr	r0, [pc, #52]	@ (8001380 <MX_GPIO_Init+0x21c>)
 800134c:	f000 fbea 	bl	8001b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001350:	2302      	movs	r3, #2
 8001352:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001354:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001358:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800135e:	f107 031c 	add.w	r3, r7, #28
 8001362:	4619      	mov	r1, r3
 8001364:	4804      	ldr	r0, [pc, #16]	@ (8001378 <MX_GPIO_Init+0x214>)
 8001366:	f000 fbdd 	bl	8001b24 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800136a:	bf00      	nop
 800136c:	3730      	adds	r7, #48	@ 0x30
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40023800 	.word	0x40023800
 8001378:	40021000 	.word	0x40021000
 800137c:	40020800 	.word	0x40020800
 8001380:	40020c00 	.word	0x40020c00
 8001384:	40020000 	.word	0x40020000
 8001388:	40020400 	.word	0x40020400

0800138c <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
    if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	7f1b      	ldrb	r3, [r3, #28]
 8001398:	2b01      	cmp	r3, #1
 800139a:	d106      	bne.n	80013aa <HAL_TIM_IC_CaptureCallback+0x1e>
    {
        gRisingTime = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800139c:	2100      	movs	r1, #0
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f004 f9de 	bl	8005760 <HAL_TIM_ReadCapturedValue>
 80013a4:	4603      	mov	r3, r0
 80013a6:	4a0a      	ldr	r2, [pc, #40]	@ (80013d0 <HAL_TIM_IC_CaptureCallback+0x44>)
 80013a8:	6013      	str	r3, [r2, #0]
    }
    if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	7f1b      	ldrb	r3, [r3, #28]
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d106      	bne.n	80013c0 <HAL_TIM_IC_CaptureCallback+0x34>
    {
        gFallingTime = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80013b2:	2104      	movs	r1, #4
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f004 f9d3 	bl	8005760 <HAL_TIM_ReadCapturedValue>
 80013ba:	4603      	mov	r3, r0
 80013bc:	4a05      	ldr	r2, [pc, #20]	@ (80013d4 <HAL_TIM_IC_CaptureCallback+0x48>)
 80013be:	6013      	str	r3, [r2, #0]
    }
    gEchoFlag = 1;
 80013c0:	4b05      	ldr	r3, [pc, #20]	@ (80013d8 <HAL_TIM_IC_CaptureCallback+0x4c>)
 80013c2:	2201      	movs	r2, #1
 80013c4:	601a      	str	r2, [r3, #0]
}
 80013c6:	bf00      	nop
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	2000017c 	.word	0x2000017c
 80013d4:	20000180 	.word	0x20000180
 80013d8:	2000018c 	.word	0x2000018c

080013dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013e0:	b672      	cpsid	i
}
 80013e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013e4:	bf00      	nop
 80013e6:	e7fd      	b.n	80013e4 <Error_Handler+0x8>

080013e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	607b      	str	r3, [r7, #4]
 80013f2:	4b10      	ldr	r3, [pc, #64]	@ (8001434 <HAL_MspInit+0x4c>)
 80013f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013f6:	4a0f      	ldr	r2, [pc, #60]	@ (8001434 <HAL_MspInit+0x4c>)
 80013f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80013fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001434 <HAL_MspInit+0x4c>)
 8001400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001402:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001406:	607b      	str	r3, [r7, #4]
 8001408:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	603b      	str	r3, [r7, #0]
 800140e:	4b09      	ldr	r3, [pc, #36]	@ (8001434 <HAL_MspInit+0x4c>)
 8001410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001412:	4a08      	ldr	r2, [pc, #32]	@ (8001434 <HAL_MspInit+0x4c>)
 8001414:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001418:	6413      	str	r3, [r2, #64]	@ 0x40
 800141a:	4b06      	ldr	r3, [pc, #24]	@ (8001434 <HAL_MspInit+0x4c>)
 800141c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800141e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001422:	603b      	str	r3, [r7, #0]
 8001424:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001426:	2007      	movs	r0, #7
 8001428:	f000 fb3a 	bl	8001aa0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800142c:	bf00      	nop
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40023800 	.word	0x40023800

08001438 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b08a      	sub	sp, #40	@ 0x28
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001440:	f107 0314 	add.w	r3, r7, #20
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]
 800144e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a19      	ldr	r2, [pc, #100]	@ (80014bc <HAL_I2C_MspInit+0x84>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d12c      	bne.n	80014b4 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	613b      	str	r3, [r7, #16]
 800145e:	4b18      	ldr	r3, [pc, #96]	@ (80014c0 <HAL_I2C_MspInit+0x88>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001462:	4a17      	ldr	r2, [pc, #92]	@ (80014c0 <HAL_I2C_MspInit+0x88>)
 8001464:	f043 0302 	orr.w	r3, r3, #2
 8001468:	6313      	str	r3, [r2, #48]	@ 0x30
 800146a:	4b15      	ldr	r3, [pc, #84]	@ (80014c0 <HAL_I2C_MspInit+0x88>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	613b      	str	r3, [r7, #16]
 8001474:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001476:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800147a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800147c:	2312      	movs	r3, #18
 800147e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001480:	2301      	movs	r3, #1
 8001482:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001484:	2300      	movs	r3, #0
 8001486:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001488:	2304      	movs	r3, #4
 800148a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	4619      	mov	r1, r3
 8001492:	480c      	ldr	r0, [pc, #48]	@ (80014c4 <HAL_I2C_MspInit+0x8c>)
 8001494:	f000 fb46 	bl	8001b24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001498:	2300      	movs	r3, #0
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	4b08      	ldr	r3, [pc, #32]	@ (80014c0 <HAL_I2C_MspInit+0x88>)
 800149e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a0:	4a07      	ldr	r2, [pc, #28]	@ (80014c0 <HAL_I2C_MspInit+0x88>)
 80014a2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80014a8:	4b05      	ldr	r3, [pc, #20]	@ (80014c0 <HAL_I2C_MspInit+0x88>)
 80014aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014b0:	60fb      	str	r3, [r7, #12]
 80014b2:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80014b4:	bf00      	nop
 80014b6:	3728      	adds	r7, #40	@ 0x28
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	40005400 	.word	0x40005400
 80014c0:	40023800 	.word	0x40023800
 80014c4:	40020400 	.word	0x40020400

080014c8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b08a      	sub	sp, #40	@ 0x28
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d0:	f107 0314 	add.w	r3, r7, #20
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]
 80014de:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a19      	ldr	r2, [pc, #100]	@ (800154c <HAL_TIM_Base_MspInit+0x84>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d12c      	bne.n	8001544 <HAL_TIM_Base_MspInit+0x7c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	613b      	str	r3, [r7, #16]
 80014ee:	4b18      	ldr	r3, [pc, #96]	@ (8001550 <HAL_TIM_Base_MspInit+0x88>)
 80014f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014f2:	4a17      	ldr	r2, [pc, #92]	@ (8001550 <HAL_TIM_Base_MspInit+0x88>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80014fa:	4b15      	ldr	r3, [pc, #84]	@ (8001550 <HAL_TIM_Base_MspInit+0x88>)
 80014fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	613b      	str	r3, [r7, #16]
 8001504:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	4b11      	ldr	r3, [pc, #68]	@ (8001550 <HAL_TIM_Base_MspInit+0x88>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150e:	4a10      	ldr	r2, [pc, #64]	@ (8001550 <HAL_TIM_Base_MspInit+0x88>)
 8001510:	f043 0310 	orr.w	r3, r3, #16
 8001514:	6313      	str	r3, [r2, #48]	@ 0x30
 8001516:	4b0e      	ldr	r3, [pc, #56]	@ (8001550 <HAL_TIM_Base_MspInit+0x88>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151a:	f003 0310 	and.w	r3, r3, #16
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001522:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001526:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001528:	2302      	movs	r3, #2
 800152a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152c:	2300      	movs	r3, #0
 800152e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001530:	2300      	movs	r3, #0
 8001532:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001534:	2301      	movs	r3, #1
 8001536:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001538:	f107 0314 	add.w	r3, r7, #20
 800153c:	4619      	mov	r1, r3
 800153e:	4805      	ldr	r0, [pc, #20]	@ (8001554 <HAL_TIM_Base_MspInit+0x8c>)
 8001540:	f000 faf0 	bl	8001b24 <HAL_GPIO_Init>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001544:	bf00      	nop
 8001546:	3728      	adds	r7, #40	@ 0x28
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40010000 	.word	0x40010000
 8001550:	40023800 	.word	0x40023800
 8001554:	40021000 	.word	0x40021000

08001558 <HAL_TIM_IC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_ic: TIM_IC handle pointer
  * @retval None
  */
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b08a      	sub	sp, #40	@ 0x28
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001560:	f107 0314 	add.w	r3, r7, #20
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]
 800156c:	60da      	str	r2, [r3, #12]
 800156e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001578:	d133      	bne.n	80015e2 <HAL_TIM_IC_MspInit+0x8a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	613b      	str	r3, [r7, #16]
 800157e:	4b1b      	ldr	r3, [pc, #108]	@ (80015ec <HAL_TIM_IC_MspInit+0x94>)
 8001580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001582:	4a1a      	ldr	r2, [pc, #104]	@ (80015ec <HAL_TIM_IC_MspInit+0x94>)
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	6413      	str	r3, [r2, #64]	@ 0x40
 800158a:	4b18      	ldr	r3, [pc, #96]	@ (80015ec <HAL_TIM_IC_MspInit+0x94>)
 800158c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	613b      	str	r3, [r7, #16]
 8001594:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	60fb      	str	r3, [r7, #12]
 800159a:	4b14      	ldr	r3, [pc, #80]	@ (80015ec <HAL_TIM_IC_MspInit+0x94>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159e:	4a13      	ldr	r2, [pc, #76]	@ (80015ec <HAL_TIM_IC_MspInit+0x94>)
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015a6:	4b11      	ldr	r3, [pc, #68]	@ (80015ec <HAL_TIM_IC_MspInit+0x94>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 80015b2:	2322      	movs	r3, #34	@ 0x22
 80015b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b6:	2302      	movs	r3, #2
 80015b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015be:	2300      	movs	r3, #0
 80015c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80015c2:	2301      	movs	r3, #1
 80015c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c6:	f107 0314 	add.w	r3, r7, #20
 80015ca:	4619      	mov	r1, r3
 80015cc:	4808      	ldr	r0, [pc, #32]	@ (80015f0 <HAL_TIM_IC_MspInit+0x98>)
 80015ce:	f000 faa9 	bl	8001b24 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80015d2:	2200      	movs	r2, #0
 80015d4:	2100      	movs	r1, #0
 80015d6:	201c      	movs	r0, #28
 80015d8:	f000 fa6d 	bl	8001ab6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80015dc:	201c      	movs	r0, #28
 80015de:	f000 fa86 	bl	8001aee <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80015e2:	bf00      	nop
 80015e4:	3728      	adds	r7, #40	@ 0x28
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40023800 	.word	0x40023800
 80015f0:	40020000 	.word	0x40020000

080015f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b088      	sub	sp, #32
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fc:	f107 030c 	add.w	r3, r7, #12
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	609a      	str	r2, [r3, #8]
 8001608:	60da      	str	r2, [r3, #12]
 800160a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a12      	ldr	r2, [pc, #72]	@ (800165c <HAL_TIM_MspPostInit+0x68>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d11e      	bne.n	8001654 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	60bb      	str	r3, [r7, #8]
 800161a:	4b11      	ldr	r3, [pc, #68]	@ (8001660 <HAL_TIM_MspPostInit+0x6c>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161e:	4a10      	ldr	r2, [pc, #64]	@ (8001660 <HAL_TIM_MspPostInit+0x6c>)
 8001620:	f043 0310 	orr.w	r3, r3, #16
 8001624:	6313      	str	r3, [r2, #48]	@ 0x30
 8001626:	4b0e      	ldr	r3, [pc, #56]	@ (8001660 <HAL_TIM_MspPostInit+0x6c>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162a:	f003 0310 	and.w	r3, r3, #16
 800162e:	60bb      	str	r3, [r7, #8]
 8001630:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001632:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001636:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001638:	2302      	movs	r3, #2
 800163a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163c:	2300      	movs	r3, #0
 800163e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001640:	2300      	movs	r3, #0
 8001642:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001644:	2301      	movs	r3, #1
 8001646:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001648:	f107 030c 	add.w	r3, r7, #12
 800164c:	4619      	mov	r1, r3
 800164e:	4805      	ldr	r0, [pc, #20]	@ (8001664 <HAL_TIM_MspPostInit+0x70>)
 8001650:	f000 fa68 	bl	8001b24 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001654:	bf00      	nop
 8001656:	3720      	adds	r7, #32
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40010000 	.word	0x40010000
 8001660:	40023800 	.word	0x40023800
 8001664:	40021000 	.word	0x40021000

08001668 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800166c:	bf00      	nop
 800166e:	e7fd      	b.n	800166c <NMI_Handler+0x4>

08001670 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001674:	bf00      	nop
 8001676:	e7fd      	b.n	8001674 <HardFault_Handler+0x4>

08001678 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800167c:	bf00      	nop
 800167e:	e7fd      	b.n	800167c <MemManage_Handler+0x4>

08001680 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001684:	bf00      	nop
 8001686:	e7fd      	b.n	8001684 <BusFault_Handler+0x4>

08001688 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800168c:	bf00      	nop
 800168e:	e7fd      	b.n	800168c <UsageFault_Handler+0x4>

08001690 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001694:	bf00      	nop
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr

0800169e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800169e:	b480      	push	{r7}
 80016a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016b0:	bf00      	nop
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr

080016ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016be:	f000 f8db 	bl	8001878 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
	...

080016c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016cc:	4802      	ldr	r0, [pc, #8]	@ (80016d8 <TIM2_IRQHandler+0x10>)
 80016ce:	f003 fdb7 	bl	8005240 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	20000134 	.word	0x20000134

080016dc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80016e0:	4802      	ldr	r0, [pc, #8]	@ (80016ec <OTG_FS_IRQHandler+0x10>)
 80016e2:	f000 feb5 	bl	8002450 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20000574 	.word	0x20000574

080016f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016f8:	4a14      	ldr	r2, [pc, #80]	@ (800174c <_sbrk+0x5c>)
 80016fa:	4b15      	ldr	r3, [pc, #84]	@ (8001750 <_sbrk+0x60>)
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001704:	4b13      	ldr	r3, [pc, #76]	@ (8001754 <_sbrk+0x64>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d102      	bne.n	8001712 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800170c:	4b11      	ldr	r3, [pc, #68]	@ (8001754 <_sbrk+0x64>)
 800170e:	4a12      	ldr	r2, [pc, #72]	@ (8001758 <_sbrk+0x68>)
 8001710:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001712:	4b10      	ldr	r3, [pc, #64]	@ (8001754 <_sbrk+0x64>)
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4413      	add	r3, r2
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	429a      	cmp	r2, r3
 800171e:	d207      	bcs.n	8001730 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001720:	f008 fbf6 	bl	8009f10 <__errno>
 8001724:	4603      	mov	r3, r0
 8001726:	220c      	movs	r2, #12
 8001728:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800172a:	f04f 33ff 	mov.w	r3, #4294967295
 800172e:	e009      	b.n	8001744 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001730:	4b08      	ldr	r3, [pc, #32]	@ (8001754 <_sbrk+0x64>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001736:	4b07      	ldr	r3, [pc, #28]	@ (8001754 <_sbrk+0x64>)
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4413      	add	r3, r2
 800173e:	4a05      	ldr	r2, [pc, #20]	@ (8001754 <_sbrk+0x64>)
 8001740:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001742:	68fb      	ldr	r3, [r7, #12]
}
 8001744:	4618      	mov	r0, r3
 8001746:	3718      	adds	r7, #24
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	20020000 	.word	0x20020000
 8001750:	00000400 	.word	0x00000400
 8001754:	20000190 	.word	0x20000190
 8001758:	20000aa0 	.word	0x20000aa0

0800175c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001760:	4b06      	ldr	r3, [pc, #24]	@ (800177c <SystemInit+0x20>)
 8001762:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001766:	4a05      	ldr	r2, [pc, #20]	@ (800177c <SystemInit+0x20>)
 8001768:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800176c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001770:	bf00      	nop
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	e000ed00 	.word	0xe000ed00

08001780 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001780:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017b8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001784:	f7ff ffea 	bl	800175c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001788:	480c      	ldr	r0, [pc, #48]	@ (80017bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800178a:	490d      	ldr	r1, [pc, #52]	@ (80017c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800178c:	4a0d      	ldr	r2, [pc, #52]	@ (80017c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800178e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001790:	e002      	b.n	8001798 <LoopCopyDataInit>

08001792 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001792:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001794:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001796:	3304      	adds	r3, #4

08001798 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001798:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800179a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800179c:	d3f9      	bcc.n	8001792 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800179e:	4a0a      	ldr	r2, [pc, #40]	@ (80017c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017a0:	4c0a      	ldr	r4, [pc, #40]	@ (80017cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80017a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017a4:	e001      	b.n	80017aa <LoopFillZerobss>

080017a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017a8:	3204      	adds	r2, #4

080017aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017ac:	d3fb      	bcc.n	80017a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017ae:	f008 fbb5 	bl	8009f1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017b2:	f7ff fabd 	bl	8000d30 <main>
  bx  lr    
 80017b6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80017b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017c0:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80017c4:	0800a040 	.word	0x0800a040
  ldr r2, =_sbss
 80017c8:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80017cc:	20000a9c 	.word	0x20000a9c

080017d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017d0:	e7fe      	b.n	80017d0 <ADC_IRQHandler>
	...

080017d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001814 <HAL_Init+0x40>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001814 <HAL_Init+0x40>)
 80017de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001814 <HAL_Init+0x40>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a0a      	ldr	r2, [pc, #40]	@ (8001814 <HAL_Init+0x40>)
 80017ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017f0:	4b08      	ldr	r3, [pc, #32]	@ (8001814 <HAL_Init+0x40>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a07      	ldr	r2, [pc, #28]	@ (8001814 <HAL_Init+0x40>)
 80017f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017fc:	2003      	movs	r0, #3
 80017fe:	f000 f94f 	bl	8001aa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001802:	2000      	movs	r0, #0
 8001804:	f000 f808 	bl	8001818 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001808:	f7ff fdee 	bl	80013e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40023c00 	.word	0x40023c00

08001818 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001820:	4b12      	ldr	r3, [pc, #72]	@ (800186c <HAL_InitTick+0x54>)
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	4b12      	ldr	r3, [pc, #72]	@ (8001870 <HAL_InitTick+0x58>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	4619      	mov	r1, r3
 800182a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800182e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001832:	fbb2 f3f3 	udiv	r3, r2, r3
 8001836:	4618      	mov	r0, r3
 8001838:	f000 f967 	bl	8001b0a <HAL_SYSTICK_Config>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e00e      	b.n	8001864 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2b0f      	cmp	r3, #15
 800184a:	d80a      	bhi.n	8001862 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800184c:	2200      	movs	r2, #0
 800184e:	6879      	ldr	r1, [r7, #4]
 8001850:	f04f 30ff 	mov.w	r0, #4294967295
 8001854:	f000 f92f 	bl	8001ab6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001858:	4a06      	ldr	r2, [pc, #24]	@ (8001874 <HAL_InitTick+0x5c>)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800185e:	2300      	movs	r3, #0
 8001860:	e000      	b.n	8001864 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
}
 8001864:	4618      	mov	r0, r3
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	20000000 	.word	0x20000000
 8001870:	20000008 	.word	0x20000008
 8001874:	20000004 	.word	0x20000004

08001878 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800187c:	4b06      	ldr	r3, [pc, #24]	@ (8001898 <HAL_IncTick+0x20>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	461a      	mov	r2, r3
 8001882:	4b06      	ldr	r3, [pc, #24]	@ (800189c <HAL_IncTick+0x24>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4413      	add	r3, r2
 8001888:	4a04      	ldr	r2, [pc, #16]	@ (800189c <HAL_IncTick+0x24>)
 800188a:	6013      	str	r3, [r2, #0]
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	20000008 	.word	0x20000008
 800189c:	20000194 	.word	0x20000194

080018a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  return uwTick;
 80018a4:	4b03      	ldr	r3, [pc, #12]	@ (80018b4 <HAL_GetTick+0x14>)
 80018a6:	681b      	ldr	r3, [r3, #0]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	20000194 	.word	0x20000194

080018b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018c0:	f7ff ffee 	bl	80018a0 <HAL_GetTick>
 80018c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018d0:	d005      	beq.n	80018de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018d2:	4b0a      	ldr	r3, [pc, #40]	@ (80018fc <HAL_Delay+0x44>)
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	461a      	mov	r2, r3
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	4413      	add	r3, r2
 80018dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018de:	bf00      	nop
 80018e0:	f7ff ffde 	bl	80018a0 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	68fa      	ldr	r2, [r7, #12]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d8f7      	bhi.n	80018e0 <HAL_Delay+0x28>
  {
  }
}
 80018f0:	bf00      	nop
 80018f2:	bf00      	nop
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	20000008 	.word	0x20000008

08001900 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f003 0307 	and.w	r3, r3, #7
 800190e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001910:	4b0c      	ldr	r3, [pc, #48]	@ (8001944 <__NVIC_SetPriorityGrouping+0x44>)
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001916:	68ba      	ldr	r2, [r7, #8]
 8001918:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800191c:	4013      	ands	r3, r2
 800191e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001928:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800192c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001930:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001932:	4a04      	ldr	r2, [pc, #16]	@ (8001944 <__NVIC_SetPriorityGrouping+0x44>)
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	60d3      	str	r3, [r2, #12]
}
 8001938:	bf00      	nop
 800193a:	3714      	adds	r7, #20
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	e000ed00 	.word	0xe000ed00

08001948 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800194c:	4b04      	ldr	r3, [pc, #16]	@ (8001960 <__NVIC_GetPriorityGrouping+0x18>)
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	0a1b      	lsrs	r3, r3, #8
 8001952:	f003 0307 	and.w	r3, r3, #7
}
 8001956:	4618      	mov	r0, r3
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr
 8001960:	e000ed00 	.word	0xe000ed00

08001964 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800196e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001972:	2b00      	cmp	r3, #0
 8001974:	db0b      	blt.n	800198e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001976:	79fb      	ldrb	r3, [r7, #7]
 8001978:	f003 021f 	and.w	r2, r3, #31
 800197c:	4907      	ldr	r1, [pc, #28]	@ (800199c <__NVIC_EnableIRQ+0x38>)
 800197e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001982:	095b      	lsrs	r3, r3, #5
 8001984:	2001      	movs	r0, #1
 8001986:	fa00 f202 	lsl.w	r2, r0, r2
 800198a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800198e:	bf00      	nop
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	e000e100 	.word	0xe000e100

080019a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	4603      	mov	r3, r0
 80019a8:	6039      	str	r1, [r7, #0]
 80019aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	db0a      	blt.n	80019ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	b2da      	uxtb	r2, r3
 80019b8:	490c      	ldr	r1, [pc, #48]	@ (80019ec <__NVIC_SetPriority+0x4c>)
 80019ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019be:	0112      	lsls	r2, r2, #4
 80019c0:	b2d2      	uxtb	r2, r2
 80019c2:	440b      	add	r3, r1
 80019c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019c8:	e00a      	b.n	80019e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	b2da      	uxtb	r2, r3
 80019ce:	4908      	ldr	r1, [pc, #32]	@ (80019f0 <__NVIC_SetPriority+0x50>)
 80019d0:	79fb      	ldrb	r3, [r7, #7]
 80019d2:	f003 030f 	and.w	r3, r3, #15
 80019d6:	3b04      	subs	r3, #4
 80019d8:	0112      	lsls	r2, r2, #4
 80019da:	b2d2      	uxtb	r2, r2
 80019dc:	440b      	add	r3, r1
 80019de:	761a      	strb	r2, [r3, #24]
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	e000e100 	.word	0xe000e100
 80019f0:	e000ed00 	.word	0xe000ed00

080019f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b089      	sub	sp, #36	@ 0x24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f003 0307 	and.w	r3, r3, #7
 8001a06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	f1c3 0307 	rsb	r3, r3, #7
 8001a0e:	2b04      	cmp	r3, #4
 8001a10:	bf28      	it	cs
 8001a12:	2304      	movcs	r3, #4
 8001a14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	3304      	adds	r3, #4
 8001a1a:	2b06      	cmp	r3, #6
 8001a1c:	d902      	bls.n	8001a24 <NVIC_EncodePriority+0x30>
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	3b03      	subs	r3, #3
 8001a22:	e000      	b.n	8001a26 <NVIC_EncodePriority+0x32>
 8001a24:	2300      	movs	r3, #0
 8001a26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a28:	f04f 32ff 	mov.w	r2, #4294967295
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	43da      	mvns	r2, r3
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	401a      	ands	r2, r3
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	fa01 f303 	lsl.w	r3, r1, r3
 8001a46:	43d9      	mvns	r1, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a4c:	4313      	orrs	r3, r2
         );
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3724      	adds	r7, #36	@ 0x24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
	...

08001a5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	3b01      	subs	r3, #1
 8001a68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a6c:	d301      	bcc.n	8001a72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e00f      	b.n	8001a92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a72:	4a0a      	ldr	r2, [pc, #40]	@ (8001a9c <SysTick_Config+0x40>)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	3b01      	subs	r3, #1
 8001a78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a7a:	210f      	movs	r1, #15
 8001a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a80:	f7ff ff8e 	bl	80019a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a84:	4b05      	ldr	r3, [pc, #20]	@ (8001a9c <SysTick_Config+0x40>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a8a:	4b04      	ldr	r3, [pc, #16]	@ (8001a9c <SysTick_Config+0x40>)
 8001a8c:	2207      	movs	r2, #7
 8001a8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	e000e010 	.word	0xe000e010

08001aa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f7ff ff29 	bl	8001900 <__NVIC_SetPriorityGrouping>
}
 8001aae:	bf00      	nop
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b086      	sub	sp, #24
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	4603      	mov	r3, r0
 8001abe:	60b9      	str	r1, [r7, #8]
 8001ac0:	607a      	str	r2, [r7, #4]
 8001ac2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ac8:	f7ff ff3e 	bl	8001948 <__NVIC_GetPriorityGrouping>
 8001acc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	68b9      	ldr	r1, [r7, #8]
 8001ad2:	6978      	ldr	r0, [r7, #20]
 8001ad4:	f7ff ff8e 	bl	80019f4 <NVIC_EncodePriority>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ade:	4611      	mov	r1, r2
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff ff5d 	bl	80019a0 <__NVIC_SetPriority>
}
 8001ae6:	bf00      	nop
 8001ae8:	3718      	adds	r7, #24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b082      	sub	sp, #8
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	4603      	mov	r3, r0
 8001af6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff ff31 	bl	8001964 <__NVIC_EnableIRQ>
}
 8001b02:	bf00      	nop
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b082      	sub	sp, #8
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f7ff ffa2 	bl	8001a5c <SysTick_Config>
 8001b18:	4603      	mov	r3, r0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
	...

08001b24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b089      	sub	sp, #36	@ 0x24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b32:	2300      	movs	r3, #0
 8001b34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b36:	2300      	movs	r3, #0
 8001b38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	61fb      	str	r3, [r7, #28]
 8001b3e:	e16b      	b.n	8001e18 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b40:	2201      	movs	r2, #1
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	697a      	ldr	r2, [r7, #20]
 8001b50:	4013      	ands	r3, r2
 8001b52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b54:	693a      	ldr	r2, [r7, #16]
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	f040 815a 	bne.w	8001e12 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f003 0303 	and.w	r3, r3, #3
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d005      	beq.n	8001b76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d130      	bne.n	8001bd8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	2203      	movs	r2, #3
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	43db      	mvns	r3, r3
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	68da      	ldr	r2, [r3, #12]
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bac:	2201      	movs	r2, #1
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	091b      	lsrs	r3, r3, #4
 8001bc2:	f003 0201 	and.w	r2, r3, #1
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f003 0303 	and.w	r3, r3, #3
 8001be0:	2b03      	cmp	r3, #3
 8001be2:	d017      	beq.n	8001c14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	2203      	movs	r2, #3
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	689a      	ldr	r2, [r3, #8]
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f003 0303 	and.w	r3, r3, #3
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d123      	bne.n	8001c68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	08da      	lsrs	r2, r3, #3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	3208      	adds	r2, #8
 8001c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	f003 0307 	and.w	r3, r3, #7
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	220f      	movs	r2, #15
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	43db      	mvns	r3, r3
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	4013      	ands	r3, r2
 8001c42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	691a      	ldr	r2, [r3, #16]
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	f003 0307 	and.w	r3, r3, #7
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	08da      	lsrs	r2, r3, #3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	3208      	adds	r2, #8
 8001c62:	69b9      	ldr	r1, [r7, #24]
 8001c64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	2203      	movs	r2, #3
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f003 0203 	and.w	r2, r3, #3
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	f000 80b4 	beq.w	8001e12 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	60fb      	str	r3, [r7, #12]
 8001cae:	4b60      	ldr	r3, [pc, #384]	@ (8001e30 <HAL_GPIO_Init+0x30c>)
 8001cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cb2:	4a5f      	ldr	r2, [pc, #380]	@ (8001e30 <HAL_GPIO_Init+0x30c>)
 8001cb4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cba:	4b5d      	ldr	r3, [pc, #372]	@ (8001e30 <HAL_GPIO_Init+0x30c>)
 8001cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cc6:	4a5b      	ldr	r2, [pc, #364]	@ (8001e34 <HAL_GPIO_Init+0x310>)
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	089b      	lsrs	r3, r3, #2
 8001ccc:	3302      	adds	r3, #2
 8001cce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	f003 0303 	and.w	r3, r3, #3
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	220f      	movs	r2, #15
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	43db      	mvns	r3, r3
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a52      	ldr	r2, [pc, #328]	@ (8001e38 <HAL_GPIO_Init+0x314>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d02b      	beq.n	8001d4a <HAL_GPIO_Init+0x226>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a51      	ldr	r2, [pc, #324]	@ (8001e3c <HAL_GPIO_Init+0x318>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d025      	beq.n	8001d46 <HAL_GPIO_Init+0x222>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a50      	ldr	r2, [pc, #320]	@ (8001e40 <HAL_GPIO_Init+0x31c>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d01f      	beq.n	8001d42 <HAL_GPIO_Init+0x21e>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a4f      	ldr	r2, [pc, #316]	@ (8001e44 <HAL_GPIO_Init+0x320>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d019      	beq.n	8001d3e <HAL_GPIO_Init+0x21a>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a4e      	ldr	r2, [pc, #312]	@ (8001e48 <HAL_GPIO_Init+0x324>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d013      	beq.n	8001d3a <HAL_GPIO_Init+0x216>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a4d      	ldr	r2, [pc, #308]	@ (8001e4c <HAL_GPIO_Init+0x328>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d00d      	beq.n	8001d36 <HAL_GPIO_Init+0x212>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a4c      	ldr	r2, [pc, #304]	@ (8001e50 <HAL_GPIO_Init+0x32c>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d007      	beq.n	8001d32 <HAL_GPIO_Init+0x20e>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a4b      	ldr	r2, [pc, #300]	@ (8001e54 <HAL_GPIO_Init+0x330>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d101      	bne.n	8001d2e <HAL_GPIO_Init+0x20a>
 8001d2a:	2307      	movs	r3, #7
 8001d2c:	e00e      	b.n	8001d4c <HAL_GPIO_Init+0x228>
 8001d2e:	2308      	movs	r3, #8
 8001d30:	e00c      	b.n	8001d4c <HAL_GPIO_Init+0x228>
 8001d32:	2306      	movs	r3, #6
 8001d34:	e00a      	b.n	8001d4c <HAL_GPIO_Init+0x228>
 8001d36:	2305      	movs	r3, #5
 8001d38:	e008      	b.n	8001d4c <HAL_GPIO_Init+0x228>
 8001d3a:	2304      	movs	r3, #4
 8001d3c:	e006      	b.n	8001d4c <HAL_GPIO_Init+0x228>
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e004      	b.n	8001d4c <HAL_GPIO_Init+0x228>
 8001d42:	2302      	movs	r3, #2
 8001d44:	e002      	b.n	8001d4c <HAL_GPIO_Init+0x228>
 8001d46:	2301      	movs	r3, #1
 8001d48:	e000      	b.n	8001d4c <HAL_GPIO_Init+0x228>
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	69fa      	ldr	r2, [r7, #28]
 8001d4e:	f002 0203 	and.w	r2, r2, #3
 8001d52:	0092      	lsls	r2, r2, #2
 8001d54:	4093      	lsls	r3, r2
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d5c:	4935      	ldr	r1, [pc, #212]	@ (8001e34 <HAL_GPIO_Init+0x310>)
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	089b      	lsrs	r3, r3, #2
 8001d62:	3302      	adds	r3, #2
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d6a:	4b3b      	ldr	r3, [pc, #236]	@ (8001e58 <HAL_GPIO_Init+0x334>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	43db      	mvns	r3, r3
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	4013      	ands	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d003      	beq.n	8001d8e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d8e:	4a32      	ldr	r2, [pc, #200]	@ (8001e58 <HAL_GPIO_Init+0x334>)
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d94:	4b30      	ldr	r3, [pc, #192]	@ (8001e58 <HAL_GPIO_Init+0x334>)
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	4013      	ands	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d003      	beq.n	8001db8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001db8:	4a27      	ldr	r2, [pc, #156]	@ (8001e58 <HAL_GPIO_Init+0x334>)
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001dbe:	4b26      	ldr	r3, [pc, #152]	@ (8001e58 <HAL_GPIO_Init+0x334>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	43db      	mvns	r3, r3
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d003      	beq.n	8001de2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001de2:	4a1d      	ldr	r2, [pc, #116]	@ (8001e58 <HAL_GPIO_Init+0x334>)
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001de8:	4b1b      	ldr	r3, [pc, #108]	@ (8001e58 <HAL_GPIO_Init+0x334>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	43db      	mvns	r3, r3
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	4013      	ands	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d003      	beq.n	8001e0c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e0c:	4a12      	ldr	r2, [pc, #72]	@ (8001e58 <HAL_GPIO_Init+0x334>)
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	3301      	adds	r3, #1
 8001e16:	61fb      	str	r3, [r7, #28]
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	2b0f      	cmp	r3, #15
 8001e1c:	f67f ae90 	bls.w	8001b40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e20:	bf00      	nop
 8001e22:	bf00      	nop
 8001e24:	3724      	adds	r7, #36	@ 0x24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	40023800 	.word	0x40023800
 8001e34:	40013800 	.word	0x40013800
 8001e38:	40020000 	.word	0x40020000
 8001e3c:	40020400 	.word	0x40020400
 8001e40:	40020800 	.word	0x40020800
 8001e44:	40020c00 	.word	0x40020c00
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	40021400 	.word	0x40021400
 8001e50:	40021800 	.word	0x40021800
 8001e54:	40021c00 	.word	0x40021c00
 8001e58:	40013c00 	.word	0x40013c00

08001e5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	460b      	mov	r3, r1
 8001e66:	807b      	strh	r3, [r7, #2]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e6c:	787b      	ldrb	r3, [r7, #1]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d003      	beq.n	8001e7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e72:	887a      	ldrh	r2, [r7, #2]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e78:	e003      	b.n	8001e82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e7a:	887b      	ldrh	r3, [r7, #2]
 8001e7c:	041a      	lsls	r2, r3, #16
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	619a      	str	r2, [r3, #24]
}
 8001e82:	bf00      	nop
 8001e84:	370c      	adds	r7, #12
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr

08001e8e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b086      	sub	sp, #24
 8001e92:	af02      	add	r7, sp, #8
 8001e94:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d101      	bne.n	8001ea0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e059      	b.n	8001f54 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d106      	bne.n	8001ec0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f007 fca6 	bl	800980c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2203      	movs	r2, #3
 8001ec4:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001ece:	d102      	bne.n	8001ed6 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f004 fabf 	bl	800645e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6818      	ldr	r0, [r3, #0]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	7c1a      	ldrb	r2, [r3, #16]
 8001ee8:	f88d 2000 	strb.w	r2, [sp]
 8001eec:	3304      	adds	r3, #4
 8001eee:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ef0:	f004 fa40 	bl	8006374 <USB_CoreInit>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d005      	beq.n	8001f06 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2202      	movs	r2, #2
 8001efe:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e026      	b.n	8001f54 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2101      	movs	r1, #1
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f004 fab7 	bl	8006480 <USB_SetCurrentMode>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d005      	beq.n	8001f24 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2202      	movs	r2, #2
 8001f1c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e017      	b.n	8001f54 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6818      	ldr	r0, [r3, #0]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	7c1a      	ldrb	r2, [r3, #16]
 8001f2c:	f88d 2000 	strb.w	r2, [sp]
 8001f30:	3304      	adds	r3, #4
 8001f32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f34:	f004 fc5a 	bl	80067ec <USB_HostInit>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d005      	beq.n	8001f4a <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2202      	movs	r2, #2
 8001f42:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e004      	b.n	8001f54 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8001f52:	2300      	movs	r3, #0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3710      	adds	r7, #16
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001f5c:	b590      	push	{r4, r7, lr}
 8001f5e:	b08b      	sub	sp, #44	@ 0x2c
 8001f60:	af04      	add	r7, sp, #16
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	4608      	mov	r0, r1
 8001f66:	4611      	mov	r1, r2
 8001f68:	461a      	mov	r2, r3
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	70fb      	strb	r3, [r7, #3]
 8001f6e:	460b      	mov	r3, r1
 8001f70:	70bb      	strb	r3, [r7, #2]
 8001f72:	4613      	mov	r3, r2
 8001f74:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8001f76:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001f78:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d101      	bne.n	8001f88 <HAL_HCD_HC_Init+0x2c>
 8001f84:	2302      	movs	r3, #2
 8001f86:	e09d      	b.n	80020c4 <HAL_HCD_HC_Init+0x168>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8001f90:	78fa      	ldrb	r2, [r7, #3]
 8001f92:	6879      	ldr	r1, [r7, #4]
 8001f94:	4613      	mov	r3, r2
 8001f96:	011b      	lsls	r3, r3, #4
 8001f98:	1a9b      	subs	r3, r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	440b      	add	r3, r1
 8001f9e:	3319      	adds	r3, #25
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001fa4:	78fa      	ldrb	r2, [r7, #3]
 8001fa6:	6879      	ldr	r1, [r7, #4]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	011b      	lsls	r3, r3, #4
 8001fac:	1a9b      	subs	r3, r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	440b      	add	r3, r1
 8001fb2:	3314      	adds	r3, #20
 8001fb4:	787a      	ldrb	r2, [r7, #1]
 8001fb6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001fb8:	78fa      	ldrb	r2, [r7, #3]
 8001fba:	6879      	ldr	r1, [r7, #4]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	011b      	lsls	r3, r3, #4
 8001fc0:	1a9b      	subs	r3, r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	440b      	add	r3, r1
 8001fc6:	3315      	adds	r3, #21
 8001fc8:	78fa      	ldrb	r2, [r7, #3]
 8001fca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001fcc:	78fa      	ldrb	r2, [r7, #3]
 8001fce:	6879      	ldr	r1, [r7, #4]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	011b      	lsls	r3, r3, #4
 8001fd4:	1a9b      	subs	r3, r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	440b      	add	r3, r1
 8001fda:	3326      	adds	r3, #38	@ 0x26
 8001fdc:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001fe0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001fe2:	78fa      	ldrb	r2, [r7, #3]
 8001fe4:	78bb      	ldrb	r3, [r7, #2]
 8001fe6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001fea:	b2d8      	uxtb	r0, r3
 8001fec:	6879      	ldr	r1, [r7, #4]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	011b      	lsls	r3, r3, #4
 8001ff2:	1a9b      	subs	r3, r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	440b      	add	r3, r1
 8001ff8:	3316      	adds	r3, #22
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8001ffe:	78fb      	ldrb	r3, [r7, #3]
 8002000:	4619      	mov	r1, r3
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 fbc8 	bl	8002798 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8002008:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800200c:	2b00      	cmp	r3, #0
 800200e:	da0a      	bge.n	8002026 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002010:	78fa      	ldrb	r2, [r7, #3]
 8002012:	6879      	ldr	r1, [r7, #4]
 8002014:	4613      	mov	r3, r2
 8002016:	011b      	lsls	r3, r3, #4
 8002018:	1a9b      	subs	r3, r3, r2
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	440b      	add	r3, r1
 800201e:	3317      	adds	r3, #23
 8002020:	2201      	movs	r2, #1
 8002022:	701a      	strb	r2, [r3, #0]
 8002024:	e009      	b.n	800203a <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002026:	78fa      	ldrb	r2, [r7, #3]
 8002028:	6879      	ldr	r1, [r7, #4]
 800202a:	4613      	mov	r3, r2
 800202c:	011b      	lsls	r3, r3, #4
 800202e:	1a9b      	subs	r3, r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	440b      	add	r3, r1
 8002034:	3317      	adds	r3, #23
 8002036:	2200      	movs	r2, #0
 8002038:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4618      	mov	r0, r3
 8002040:	f004 fd38 	bl	8006ab4 <USB_GetHostSpeed>
 8002044:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8002046:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800204a:	2b01      	cmp	r3, #1
 800204c:	d10b      	bne.n	8002066 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800204e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002052:	2b01      	cmp	r3, #1
 8002054:	d107      	bne.n	8002066 <HAL_HCD_HC_Init+0x10a>
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d104      	bne.n	8002066 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	2bbc      	cmp	r3, #188	@ 0xbc
 8002060:	d901      	bls.n	8002066 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8002062:	23bc      	movs	r3, #188	@ 0xbc
 8002064:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8002066:	78fa      	ldrb	r2, [r7, #3]
 8002068:	6879      	ldr	r1, [r7, #4]
 800206a:	4613      	mov	r3, r2
 800206c:	011b      	lsls	r3, r3, #4
 800206e:	1a9b      	subs	r3, r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	440b      	add	r3, r1
 8002074:	3318      	adds	r3, #24
 8002076:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800207a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 800207c:	78fa      	ldrb	r2, [r7, #3]
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	b298      	uxth	r0, r3
 8002082:	6879      	ldr	r1, [r7, #4]
 8002084:	4613      	mov	r3, r2
 8002086:	011b      	lsls	r3, r3, #4
 8002088:	1a9b      	subs	r3, r3, r2
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	440b      	add	r3, r1
 800208e:	3328      	adds	r3, #40	@ 0x28
 8002090:	4602      	mov	r2, r0
 8002092:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6818      	ldr	r0, [r3, #0]
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	b29b      	uxth	r3, r3
 800209c:	787c      	ldrb	r4, [r7, #1]
 800209e:	78ba      	ldrb	r2, [r7, #2]
 80020a0:	78f9      	ldrb	r1, [r7, #3]
 80020a2:	9302      	str	r3, [sp, #8]
 80020a4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80020a8:	9301      	str	r3, [sp, #4]
 80020aa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80020ae:	9300      	str	r3, [sp, #0]
 80020b0:	4623      	mov	r3, r4
 80020b2:	f004 fd27 	bl	8006b04 <USB_HC_Init>
 80020b6:	4603      	mov	r3, r0
 80020b8:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80020c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	371c      	adds	r7, #28
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd90      	pop	{r4, r7, pc}

080020cc <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	460b      	mov	r3, r1
 80020d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80020d8:	2300      	movs	r3, #0
 80020da:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d101      	bne.n	80020ea <HAL_HCD_HC_Halt+0x1e>
 80020e6:	2302      	movs	r3, #2
 80020e8:	e00f      	b.n	800210a <HAL_HCD_HC_Halt+0x3e>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2201      	movs	r2, #1
 80020ee:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	78fa      	ldrb	r2, [r7, #3]
 80020f8:	4611      	mov	r1, r2
 80020fa:	4618      	mov	r0, r3
 80020fc:	f005 f8b9 	bl	8007272 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002108:	7bfb      	ldrb	r3, [r7, #15]
}
 800210a:	4618      	mov	r0, r3
 800210c:	3710      	adds	r7, #16
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
	...

08002114 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	4608      	mov	r0, r1
 800211e:	4611      	mov	r1, r2
 8002120:	461a      	mov	r2, r3
 8002122:	4603      	mov	r3, r0
 8002124:	70fb      	strb	r3, [r7, #3]
 8002126:	460b      	mov	r3, r1
 8002128:	70bb      	strb	r3, [r7, #2]
 800212a:	4613      	mov	r3, r2
 800212c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800212e:	78fa      	ldrb	r2, [r7, #3]
 8002130:	6879      	ldr	r1, [r7, #4]
 8002132:	4613      	mov	r3, r2
 8002134:	011b      	lsls	r3, r3, #4
 8002136:	1a9b      	subs	r3, r3, r2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	440b      	add	r3, r1
 800213c:	3317      	adds	r3, #23
 800213e:	78ba      	ldrb	r2, [r7, #2]
 8002140:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002142:	78fa      	ldrb	r2, [r7, #3]
 8002144:	6879      	ldr	r1, [r7, #4]
 8002146:	4613      	mov	r3, r2
 8002148:	011b      	lsls	r3, r3, #4
 800214a:	1a9b      	subs	r3, r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	440b      	add	r3, r1
 8002150:	3326      	adds	r3, #38	@ 0x26
 8002152:	787a      	ldrb	r2, [r7, #1]
 8002154:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002156:	7c3b      	ldrb	r3, [r7, #16]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d114      	bne.n	8002186 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800215c:	78fa      	ldrb	r2, [r7, #3]
 800215e:	6879      	ldr	r1, [r7, #4]
 8002160:	4613      	mov	r3, r2
 8002162:	011b      	lsls	r3, r3, #4
 8002164:	1a9b      	subs	r3, r3, r2
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	440b      	add	r3, r1
 800216a:	332a      	adds	r3, #42	@ 0x2a
 800216c:	2203      	movs	r2, #3
 800216e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002170:	78fa      	ldrb	r2, [r7, #3]
 8002172:	6879      	ldr	r1, [r7, #4]
 8002174:	4613      	mov	r3, r2
 8002176:	011b      	lsls	r3, r3, #4
 8002178:	1a9b      	subs	r3, r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	440b      	add	r3, r1
 800217e:	3319      	adds	r3, #25
 8002180:	7f3a      	ldrb	r2, [r7, #28]
 8002182:	701a      	strb	r2, [r3, #0]
 8002184:	e009      	b.n	800219a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002186:	78fa      	ldrb	r2, [r7, #3]
 8002188:	6879      	ldr	r1, [r7, #4]
 800218a:	4613      	mov	r3, r2
 800218c:	011b      	lsls	r3, r3, #4
 800218e:	1a9b      	subs	r3, r3, r2
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	440b      	add	r3, r1
 8002194:	332a      	adds	r3, #42	@ 0x2a
 8002196:	2202      	movs	r2, #2
 8002198:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800219a:	787b      	ldrb	r3, [r7, #1]
 800219c:	2b03      	cmp	r3, #3
 800219e:	f200 8102 	bhi.w	80023a6 <HAL_HCD_HC_SubmitRequest+0x292>
 80021a2:	a201      	add	r2, pc, #4	@ (adr r2, 80021a8 <HAL_HCD_HC_SubmitRequest+0x94>)
 80021a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021a8:	080021b9 	.word	0x080021b9
 80021ac:	08002391 	.word	0x08002391
 80021b0:	0800227d 	.word	0x0800227d
 80021b4:	08002307 	.word	0x08002307
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80021b8:	7c3b      	ldrb	r3, [r7, #16]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	f040 80f5 	bne.w	80023aa <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80021c0:	78bb      	ldrb	r3, [r7, #2]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d12d      	bne.n	8002222 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80021c6:	8b3b      	ldrh	r3, [r7, #24]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d109      	bne.n	80021e0 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80021cc:	78fa      	ldrb	r2, [r7, #3]
 80021ce:	6879      	ldr	r1, [r7, #4]
 80021d0:	4613      	mov	r3, r2
 80021d2:	011b      	lsls	r3, r3, #4
 80021d4:	1a9b      	subs	r3, r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	440b      	add	r3, r1
 80021da:	333d      	adds	r3, #61	@ 0x3d
 80021dc:	2201      	movs	r2, #1
 80021de:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80021e0:	78fa      	ldrb	r2, [r7, #3]
 80021e2:	6879      	ldr	r1, [r7, #4]
 80021e4:	4613      	mov	r3, r2
 80021e6:	011b      	lsls	r3, r3, #4
 80021e8:	1a9b      	subs	r3, r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	440b      	add	r3, r1
 80021ee:	333d      	adds	r3, #61	@ 0x3d
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d10a      	bne.n	800220c <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80021f6:	78fa      	ldrb	r2, [r7, #3]
 80021f8:	6879      	ldr	r1, [r7, #4]
 80021fa:	4613      	mov	r3, r2
 80021fc:	011b      	lsls	r3, r3, #4
 80021fe:	1a9b      	subs	r3, r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	440b      	add	r3, r1
 8002204:	332a      	adds	r3, #42	@ 0x2a
 8002206:	2200      	movs	r2, #0
 8002208:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 800220a:	e0ce      	b.n	80023aa <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800220c:	78fa      	ldrb	r2, [r7, #3]
 800220e:	6879      	ldr	r1, [r7, #4]
 8002210:	4613      	mov	r3, r2
 8002212:	011b      	lsls	r3, r3, #4
 8002214:	1a9b      	subs	r3, r3, r2
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	440b      	add	r3, r1
 800221a:	332a      	adds	r3, #42	@ 0x2a
 800221c:	2202      	movs	r2, #2
 800221e:	701a      	strb	r2, [r3, #0]
      break;
 8002220:	e0c3      	b.n	80023aa <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8002222:	78fa      	ldrb	r2, [r7, #3]
 8002224:	6879      	ldr	r1, [r7, #4]
 8002226:	4613      	mov	r3, r2
 8002228:	011b      	lsls	r3, r3, #4
 800222a:	1a9b      	subs	r3, r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	440b      	add	r3, r1
 8002230:	331a      	adds	r3, #26
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	2b01      	cmp	r3, #1
 8002236:	f040 80b8 	bne.w	80023aa <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800223a:	78fa      	ldrb	r2, [r7, #3]
 800223c:	6879      	ldr	r1, [r7, #4]
 800223e:	4613      	mov	r3, r2
 8002240:	011b      	lsls	r3, r3, #4
 8002242:	1a9b      	subs	r3, r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	440b      	add	r3, r1
 8002248:	333c      	adds	r3, #60	@ 0x3c
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d10a      	bne.n	8002266 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002250:	78fa      	ldrb	r2, [r7, #3]
 8002252:	6879      	ldr	r1, [r7, #4]
 8002254:	4613      	mov	r3, r2
 8002256:	011b      	lsls	r3, r3, #4
 8002258:	1a9b      	subs	r3, r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	440b      	add	r3, r1
 800225e:	332a      	adds	r3, #42	@ 0x2a
 8002260:	2200      	movs	r2, #0
 8002262:	701a      	strb	r2, [r3, #0]
      break;
 8002264:	e0a1      	b.n	80023aa <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002266:	78fa      	ldrb	r2, [r7, #3]
 8002268:	6879      	ldr	r1, [r7, #4]
 800226a:	4613      	mov	r3, r2
 800226c:	011b      	lsls	r3, r3, #4
 800226e:	1a9b      	subs	r3, r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	440b      	add	r3, r1
 8002274:	332a      	adds	r3, #42	@ 0x2a
 8002276:	2202      	movs	r2, #2
 8002278:	701a      	strb	r2, [r3, #0]
      break;
 800227a:	e096      	b.n	80023aa <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800227c:	78bb      	ldrb	r3, [r7, #2]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d120      	bne.n	80022c4 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002282:	78fa      	ldrb	r2, [r7, #3]
 8002284:	6879      	ldr	r1, [r7, #4]
 8002286:	4613      	mov	r3, r2
 8002288:	011b      	lsls	r3, r3, #4
 800228a:	1a9b      	subs	r3, r3, r2
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	440b      	add	r3, r1
 8002290:	333d      	adds	r3, #61	@ 0x3d
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d10a      	bne.n	80022ae <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002298:	78fa      	ldrb	r2, [r7, #3]
 800229a:	6879      	ldr	r1, [r7, #4]
 800229c:	4613      	mov	r3, r2
 800229e:	011b      	lsls	r3, r3, #4
 80022a0:	1a9b      	subs	r3, r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	440b      	add	r3, r1
 80022a6:	332a      	adds	r3, #42	@ 0x2a
 80022a8:	2200      	movs	r2, #0
 80022aa:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80022ac:	e07e      	b.n	80023ac <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80022ae:	78fa      	ldrb	r2, [r7, #3]
 80022b0:	6879      	ldr	r1, [r7, #4]
 80022b2:	4613      	mov	r3, r2
 80022b4:	011b      	lsls	r3, r3, #4
 80022b6:	1a9b      	subs	r3, r3, r2
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	440b      	add	r3, r1
 80022bc:	332a      	adds	r3, #42	@ 0x2a
 80022be:	2202      	movs	r2, #2
 80022c0:	701a      	strb	r2, [r3, #0]
      break;
 80022c2:	e073      	b.n	80023ac <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80022c4:	78fa      	ldrb	r2, [r7, #3]
 80022c6:	6879      	ldr	r1, [r7, #4]
 80022c8:	4613      	mov	r3, r2
 80022ca:	011b      	lsls	r3, r3, #4
 80022cc:	1a9b      	subs	r3, r3, r2
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	440b      	add	r3, r1
 80022d2:	333c      	adds	r3, #60	@ 0x3c
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d10a      	bne.n	80022f0 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80022da:	78fa      	ldrb	r2, [r7, #3]
 80022dc:	6879      	ldr	r1, [r7, #4]
 80022de:	4613      	mov	r3, r2
 80022e0:	011b      	lsls	r3, r3, #4
 80022e2:	1a9b      	subs	r3, r3, r2
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	440b      	add	r3, r1
 80022e8:	332a      	adds	r3, #42	@ 0x2a
 80022ea:	2200      	movs	r2, #0
 80022ec:	701a      	strb	r2, [r3, #0]
      break;
 80022ee:	e05d      	b.n	80023ac <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80022f0:	78fa      	ldrb	r2, [r7, #3]
 80022f2:	6879      	ldr	r1, [r7, #4]
 80022f4:	4613      	mov	r3, r2
 80022f6:	011b      	lsls	r3, r3, #4
 80022f8:	1a9b      	subs	r3, r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	440b      	add	r3, r1
 80022fe:	332a      	adds	r3, #42	@ 0x2a
 8002300:	2202      	movs	r2, #2
 8002302:	701a      	strb	r2, [r3, #0]
      break;
 8002304:	e052      	b.n	80023ac <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002306:	78bb      	ldrb	r3, [r7, #2]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d120      	bne.n	800234e <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800230c:	78fa      	ldrb	r2, [r7, #3]
 800230e:	6879      	ldr	r1, [r7, #4]
 8002310:	4613      	mov	r3, r2
 8002312:	011b      	lsls	r3, r3, #4
 8002314:	1a9b      	subs	r3, r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	440b      	add	r3, r1
 800231a:	333d      	adds	r3, #61	@ 0x3d
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d10a      	bne.n	8002338 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002322:	78fa      	ldrb	r2, [r7, #3]
 8002324:	6879      	ldr	r1, [r7, #4]
 8002326:	4613      	mov	r3, r2
 8002328:	011b      	lsls	r3, r3, #4
 800232a:	1a9b      	subs	r3, r3, r2
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	440b      	add	r3, r1
 8002330:	332a      	adds	r3, #42	@ 0x2a
 8002332:	2200      	movs	r2, #0
 8002334:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002336:	e039      	b.n	80023ac <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002338:	78fa      	ldrb	r2, [r7, #3]
 800233a:	6879      	ldr	r1, [r7, #4]
 800233c:	4613      	mov	r3, r2
 800233e:	011b      	lsls	r3, r3, #4
 8002340:	1a9b      	subs	r3, r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	440b      	add	r3, r1
 8002346:	332a      	adds	r3, #42	@ 0x2a
 8002348:	2202      	movs	r2, #2
 800234a:	701a      	strb	r2, [r3, #0]
      break;
 800234c:	e02e      	b.n	80023ac <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800234e:	78fa      	ldrb	r2, [r7, #3]
 8002350:	6879      	ldr	r1, [r7, #4]
 8002352:	4613      	mov	r3, r2
 8002354:	011b      	lsls	r3, r3, #4
 8002356:	1a9b      	subs	r3, r3, r2
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	440b      	add	r3, r1
 800235c:	333c      	adds	r3, #60	@ 0x3c
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d10a      	bne.n	800237a <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002364:	78fa      	ldrb	r2, [r7, #3]
 8002366:	6879      	ldr	r1, [r7, #4]
 8002368:	4613      	mov	r3, r2
 800236a:	011b      	lsls	r3, r3, #4
 800236c:	1a9b      	subs	r3, r3, r2
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	440b      	add	r3, r1
 8002372:	332a      	adds	r3, #42	@ 0x2a
 8002374:	2200      	movs	r2, #0
 8002376:	701a      	strb	r2, [r3, #0]
      break;
 8002378:	e018      	b.n	80023ac <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800237a:	78fa      	ldrb	r2, [r7, #3]
 800237c:	6879      	ldr	r1, [r7, #4]
 800237e:	4613      	mov	r3, r2
 8002380:	011b      	lsls	r3, r3, #4
 8002382:	1a9b      	subs	r3, r3, r2
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	440b      	add	r3, r1
 8002388:	332a      	adds	r3, #42	@ 0x2a
 800238a:	2202      	movs	r2, #2
 800238c:	701a      	strb	r2, [r3, #0]
      break;
 800238e:	e00d      	b.n	80023ac <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002390:	78fa      	ldrb	r2, [r7, #3]
 8002392:	6879      	ldr	r1, [r7, #4]
 8002394:	4613      	mov	r3, r2
 8002396:	011b      	lsls	r3, r3, #4
 8002398:	1a9b      	subs	r3, r3, r2
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	440b      	add	r3, r1
 800239e:	332a      	adds	r3, #42	@ 0x2a
 80023a0:	2200      	movs	r2, #0
 80023a2:	701a      	strb	r2, [r3, #0]
      break;
 80023a4:	e002      	b.n	80023ac <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80023a6:	bf00      	nop
 80023a8:	e000      	b.n	80023ac <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80023aa:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80023ac:	78fa      	ldrb	r2, [r7, #3]
 80023ae:	6879      	ldr	r1, [r7, #4]
 80023b0:	4613      	mov	r3, r2
 80023b2:	011b      	lsls	r3, r3, #4
 80023b4:	1a9b      	subs	r3, r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	440b      	add	r3, r1
 80023ba:	332c      	adds	r3, #44	@ 0x2c
 80023bc:	697a      	ldr	r2, [r7, #20]
 80023be:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80023c0:	78fa      	ldrb	r2, [r7, #3]
 80023c2:	8b39      	ldrh	r1, [r7, #24]
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	4613      	mov	r3, r2
 80023c8:	011b      	lsls	r3, r3, #4
 80023ca:	1a9b      	subs	r3, r3, r2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	4403      	add	r3, r0
 80023d0:	3334      	adds	r3, #52	@ 0x34
 80023d2:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80023d4:	78fa      	ldrb	r2, [r7, #3]
 80023d6:	6879      	ldr	r1, [r7, #4]
 80023d8:	4613      	mov	r3, r2
 80023da:	011b      	lsls	r3, r3, #4
 80023dc:	1a9b      	subs	r3, r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	440b      	add	r3, r1
 80023e2:	334c      	adds	r3, #76	@ 0x4c
 80023e4:	2200      	movs	r2, #0
 80023e6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80023e8:	78fa      	ldrb	r2, [r7, #3]
 80023ea:	6879      	ldr	r1, [r7, #4]
 80023ec:	4613      	mov	r3, r2
 80023ee:	011b      	lsls	r3, r3, #4
 80023f0:	1a9b      	subs	r3, r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	440b      	add	r3, r1
 80023f6:	3338      	adds	r3, #56	@ 0x38
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80023fc:	78fa      	ldrb	r2, [r7, #3]
 80023fe:	6879      	ldr	r1, [r7, #4]
 8002400:	4613      	mov	r3, r2
 8002402:	011b      	lsls	r3, r3, #4
 8002404:	1a9b      	subs	r3, r3, r2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	440b      	add	r3, r1
 800240a:	3315      	adds	r3, #21
 800240c:	78fa      	ldrb	r2, [r7, #3]
 800240e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002410:	78fa      	ldrb	r2, [r7, #3]
 8002412:	6879      	ldr	r1, [r7, #4]
 8002414:	4613      	mov	r3, r2
 8002416:	011b      	lsls	r3, r3, #4
 8002418:	1a9b      	subs	r3, r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	440b      	add	r3, r1
 800241e:	334d      	adds	r3, #77	@ 0x4d
 8002420:	2200      	movs	r2, #0
 8002422:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6818      	ldr	r0, [r3, #0]
 8002428:	78fa      	ldrb	r2, [r7, #3]
 800242a:	4613      	mov	r3, r2
 800242c:	011b      	lsls	r3, r3, #4
 800242e:	1a9b      	subs	r3, r3, r2
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	3310      	adds	r3, #16
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	4413      	add	r3, r2
 8002438:	1d19      	adds	r1, r3, #4
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	799b      	ldrb	r3, [r3, #6]
 800243e:	461a      	mov	r2, r3
 8002440:	f004 fc8c 	bl	8006d5c <USB_HC_StartXfer>
 8002444:	4603      	mov	r3, r0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop

08002450 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b086      	sub	sp, #24
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4618      	mov	r0, r3
 8002468:	f004 f980 	bl	800676c <USB_GetMode>
 800246c:	4603      	mov	r3, r0
 800246e:	2b01      	cmp	r3, #1
 8002470:	f040 80fb 	bne.w	800266a <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4618      	mov	r0, r3
 800247a:	f004 f943 	bl	8006704 <USB_ReadInterrupts>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	f000 80f1 	beq.w	8002668 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4618      	mov	r0, r3
 800248c:	f004 f93a 	bl	8006704 <USB_ReadInterrupts>
 8002490:	4603      	mov	r3, r0
 8002492:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002496:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800249a:	d104      	bne.n	80024a6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80024a4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f004 f92a 	bl	8006704 <USB_ReadInterrupts>
 80024b0:	4603      	mov	r3, r0
 80024b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80024ba:	d104      	bne.n	80024c6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80024c4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f004 f91a 	bl	8006704 <USB_ReadInterrupts>
 80024d0:	4603      	mov	r3, r0
 80024d2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80024d6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80024da:	d104      	bne.n	80024e6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80024e4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f004 f90a 	bl	8006704 <USB_ReadInterrupts>
 80024f0:	4603      	mov	r3, r0
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d103      	bne.n	8002502 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2202      	movs	r2, #2
 8002500:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4618      	mov	r0, r3
 8002508:	f004 f8fc 	bl	8006704 <USB_ReadInterrupts>
 800250c:	4603      	mov	r3, r0
 800250e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002512:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002516:	d120      	bne.n	800255a <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002520:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	2b00      	cmp	r3, #0
 8002530:	d113      	bne.n	800255a <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002532:	2110      	movs	r1, #16
 8002534:	6938      	ldr	r0, [r7, #16]
 8002536:	f003 ffef 	bl	8006518 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800253a:	6938      	ldr	r0, [r7, #16]
 800253c:	f004 f81e 	bl	800657c <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	7a5b      	ldrb	r3, [r3, #9]
 8002544:	2b02      	cmp	r3, #2
 8002546:	d105      	bne.n	8002554 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2101      	movs	r1, #1
 800254e:	4618      	mov	r0, r3
 8002550:	f004 fa10 	bl	8006974 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f007 f9d7 	bl	8009908 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4618      	mov	r0, r3
 8002560:	f004 f8d0 	bl	8006704 <USB_ReadInterrupts>
 8002564:	4603      	mov	r3, r0
 8002566:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800256a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800256e:	d102      	bne.n	8002576 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f001 fd4d 	bl	8004010 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4618      	mov	r0, r3
 800257c:	f004 f8c2 	bl	8006704 <USB_ReadInterrupts>
 8002580:	4603      	mov	r3, r0
 8002582:	f003 0308 	and.w	r3, r3, #8
 8002586:	2b08      	cmp	r3, #8
 8002588:	d106      	bne.n	8002598 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f007 f9a0 	bl	80098d0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2208      	movs	r2, #8
 8002596:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4618      	mov	r0, r3
 800259e:	f004 f8b1 	bl	8006704 <USB_ReadInterrupts>
 80025a2:	4603      	mov	r3, r0
 80025a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80025ac:	d139      	bne.n	8002622 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f004 fe4c 	bl	8007250 <USB_HC_ReadInterrupt>
 80025b8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80025ba:	2300      	movs	r3, #0
 80025bc:	617b      	str	r3, [r7, #20]
 80025be:	e025      	b.n	800260c <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	f003 030f 	and.w	r3, r3, #15
 80025c6:	68ba      	ldr	r2, [r7, #8]
 80025c8:	fa22 f303 	lsr.w	r3, r2, r3
 80025cc:	f003 0301 	and.w	r3, r3, #1
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d018      	beq.n	8002606 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	015a      	lsls	r2, r3, #5
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	4413      	add	r3, r2
 80025dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80025e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80025ea:	d106      	bne.n	80025fa <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	4619      	mov	r1, r3
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f000 f905 	bl	8002802 <HCD_HC_IN_IRQHandler>
 80025f8:	e005      	b.n	8002606 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	4619      	mov	r1, r3
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f000 ff67 	bl	80034d4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	3301      	adds	r3, #1
 800260a:	617b      	str	r3, [r7, #20]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	795b      	ldrb	r3, [r3, #5]
 8002610:	461a      	mov	r2, r3
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	4293      	cmp	r3, r2
 8002616:	d3d3      	bcc.n	80025c0 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002620:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4618      	mov	r0, r3
 8002628:	f004 f86c 	bl	8006704 <USB_ReadInterrupts>
 800262c:	4603      	mov	r3, r0
 800262e:	f003 0310 	and.w	r3, r3, #16
 8002632:	2b10      	cmp	r3, #16
 8002634:	d101      	bne.n	800263a <HAL_HCD_IRQHandler+0x1ea>
 8002636:	2301      	movs	r3, #1
 8002638:	e000      	b.n	800263c <HAL_HCD_IRQHandler+0x1ec>
 800263a:	2300      	movs	r3, #0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d014      	beq.n	800266a <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	699a      	ldr	r2, [r3, #24]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f022 0210 	bic.w	r2, r2, #16
 800264e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f001 fbfe 	bl	8003e52 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	699a      	ldr	r2, [r3, #24]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f042 0210 	orr.w	r2, r2, #16
 8002664:	619a      	str	r2, [r3, #24]
 8002666:	e000      	b.n	800266a <HAL_HCD_IRQHandler+0x21a>
      return;
 8002668:	bf00      	nop
    }
  }
}
 800266a:	3718      	adds	r7, #24
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}

08002670 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800267e:	2b01      	cmp	r3, #1
 8002680:	d101      	bne.n	8002686 <HAL_HCD_Start+0x16>
 8002682:	2302      	movs	r3, #2
 8002684:	e013      	b.n	80026ae <HAL_HCD_Start+0x3e>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2201      	movs	r2, #1
 800268a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	2101      	movs	r1, #1
 8002694:	4618      	mov	r0, r3
 8002696:	f004 f9d4 	bl	8006a42 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4618      	mov	r0, r3
 80026a0:	f003 fecc 	bl	800643c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3708      	adds	r7, #8
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b082      	sub	sp, #8
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d101      	bne.n	80026cc <HAL_HCD_Stop+0x16>
 80026c8:	2302      	movs	r3, #2
 80026ca:	e00d      	b.n	80026e8 <HAL_HCD_Stop+0x32>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4618      	mov	r0, r3
 80026da:	f004 ff27 	bl	800752c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3708      	adds	r7, #8
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f004 f976 	bl	80069ee <USB_ResetPort>
 8002702:	4603      	mov	r3, r0
}
 8002704:	4618      	mov	r0, r3
 8002706:	3708      	adds	r7, #8
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	460b      	mov	r3, r1
 8002716:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002718:	78fa      	ldrb	r2, [r7, #3]
 800271a:	6879      	ldr	r1, [r7, #4]
 800271c:	4613      	mov	r3, r2
 800271e:	011b      	lsls	r3, r3, #4
 8002720:	1a9b      	subs	r3, r3, r2
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	440b      	add	r3, r1
 8002726:	334c      	adds	r3, #76	@ 0x4c
 8002728:	781b      	ldrb	r3, [r3, #0]
}
 800272a:	4618      	mov	r0, r3
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr

08002736 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002736:	b480      	push	{r7}
 8002738:	b083      	sub	sp, #12
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
 800273e:	460b      	mov	r3, r1
 8002740:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002742:	78fa      	ldrb	r2, [r7, #3]
 8002744:	6879      	ldr	r1, [r7, #4]
 8002746:	4613      	mov	r3, r2
 8002748:	011b      	lsls	r3, r3, #4
 800274a:	1a9b      	subs	r3, r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	440b      	add	r3, r1
 8002750:	3338      	adds	r3, #56	@ 0x38
 8002752:	681b      	ldr	r3, [r3, #0]
}
 8002754:	4618      	mov	r0, r3
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4618      	mov	r0, r3
 800276e:	f004 f9b8 	bl	8006ae2 <USB_GetCurrentFrame>
 8002772:	4603      	mov	r3, r0
}
 8002774:	4618      	mov	r0, r3
 8002776:	3708      	adds	r7, #8
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4618      	mov	r0, r3
 800278a:	f004 f993 	bl	8006ab4 <USB_GetHostSpeed>
 800278e:	4603      	mov	r3, r0
}
 8002790:	4618      	mov	r0, r3
 8002792:	3708      	adds	r7, #8
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	460b      	mov	r3, r1
 80027a2:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80027a4:	78fa      	ldrb	r2, [r7, #3]
 80027a6:	6879      	ldr	r1, [r7, #4]
 80027a8:	4613      	mov	r3, r2
 80027aa:	011b      	lsls	r3, r3, #4
 80027ac:	1a9b      	subs	r3, r3, r2
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	440b      	add	r3, r1
 80027b2:	331a      	adds	r3, #26
 80027b4:	2200      	movs	r2, #0
 80027b6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80027b8:	78fa      	ldrb	r2, [r7, #3]
 80027ba:	6879      	ldr	r1, [r7, #4]
 80027bc:	4613      	mov	r3, r2
 80027be:	011b      	lsls	r3, r3, #4
 80027c0:	1a9b      	subs	r3, r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	440b      	add	r3, r1
 80027c6:	331b      	adds	r3, #27
 80027c8:	2200      	movs	r2, #0
 80027ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80027cc:	78fa      	ldrb	r2, [r7, #3]
 80027ce:	6879      	ldr	r1, [r7, #4]
 80027d0:	4613      	mov	r3, r2
 80027d2:	011b      	lsls	r3, r3, #4
 80027d4:	1a9b      	subs	r3, r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	440b      	add	r3, r1
 80027da:	3325      	adds	r3, #37	@ 0x25
 80027dc:	2200      	movs	r2, #0
 80027de:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80027e0:	78fa      	ldrb	r2, [r7, #3]
 80027e2:	6879      	ldr	r1, [r7, #4]
 80027e4:	4613      	mov	r3, r2
 80027e6:	011b      	lsls	r3, r3, #4
 80027e8:	1a9b      	subs	r3, r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	440b      	add	r3, r1
 80027ee:	3324      	adds	r3, #36	@ 0x24
 80027f0:	2200      	movs	r2, #0
 80027f2:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr

08002802 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002802:	b580      	push	{r7, lr}
 8002804:	b086      	sub	sp, #24
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
 800280a:	460b      	mov	r3, r1
 800280c:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	78fa      	ldrb	r2, [r7, #3]
 800281e:	4611      	mov	r1, r2
 8002820:	4618      	mov	r0, r3
 8002822:	f003 ff82 	bl	800672a <USB_ReadChInterrupts>
 8002826:	4603      	mov	r3, r0
 8002828:	f003 0304 	and.w	r3, r3, #4
 800282c:	2b04      	cmp	r3, #4
 800282e:	d11a      	bne.n	8002866 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002830:	78fb      	ldrb	r3, [r7, #3]
 8002832:	015a      	lsls	r2, r3, #5
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	4413      	add	r3, r2
 8002838:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800283c:	461a      	mov	r2, r3
 800283e:	2304      	movs	r3, #4
 8002840:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002842:	78fa      	ldrb	r2, [r7, #3]
 8002844:	6879      	ldr	r1, [r7, #4]
 8002846:	4613      	mov	r3, r2
 8002848:	011b      	lsls	r3, r3, #4
 800284a:	1a9b      	subs	r3, r3, r2
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	440b      	add	r3, r1
 8002850:	334d      	adds	r3, #77	@ 0x4d
 8002852:	2207      	movs	r2, #7
 8002854:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	78fa      	ldrb	r2, [r7, #3]
 800285c:	4611      	mov	r1, r2
 800285e:	4618      	mov	r0, r3
 8002860:	f004 fd07 	bl	8007272 <USB_HC_Halt>
 8002864:	e09e      	b.n	80029a4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	78fa      	ldrb	r2, [r7, #3]
 800286c:	4611      	mov	r1, r2
 800286e:	4618      	mov	r0, r3
 8002870:	f003 ff5b 	bl	800672a <USB_ReadChInterrupts>
 8002874:	4603      	mov	r3, r0
 8002876:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800287a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800287e:	d11b      	bne.n	80028b8 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002880:	78fb      	ldrb	r3, [r7, #3]
 8002882:	015a      	lsls	r2, r3, #5
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	4413      	add	r3, r2
 8002888:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800288c:	461a      	mov	r2, r3
 800288e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002892:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002894:	78fa      	ldrb	r2, [r7, #3]
 8002896:	6879      	ldr	r1, [r7, #4]
 8002898:	4613      	mov	r3, r2
 800289a:	011b      	lsls	r3, r3, #4
 800289c:	1a9b      	subs	r3, r3, r2
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	440b      	add	r3, r1
 80028a2:	334d      	adds	r3, #77	@ 0x4d
 80028a4:	2208      	movs	r2, #8
 80028a6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	78fa      	ldrb	r2, [r7, #3]
 80028ae:	4611      	mov	r1, r2
 80028b0:	4618      	mov	r0, r3
 80028b2:	f004 fcde 	bl	8007272 <USB_HC_Halt>
 80028b6:	e075      	b.n	80029a4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	78fa      	ldrb	r2, [r7, #3]
 80028be:	4611      	mov	r1, r2
 80028c0:	4618      	mov	r0, r3
 80028c2:	f003 ff32 	bl	800672a <USB_ReadChInterrupts>
 80028c6:	4603      	mov	r3, r0
 80028c8:	f003 0308 	and.w	r3, r3, #8
 80028cc:	2b08      	cmp	r3, #8
 80028ce:	d11a      	bne.n	8002906 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80028d0:	78fb      	ldrb	r3, [r7, #3]
 80028d2:	015a      	lsls	r2, r3, #5
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	4413      	add	r3, r2
 80028d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028dc:	461a      	mov	r2, r3
 80028de:	2308      	movs	r3, #8
 80028e0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80028e2:	78fa      	ldrb	r2, [r7, #3]
 80028e4:	6879      	ldr	r1, [r7, #4]
 80028e6:	4613      	mov	r3, r2
 80028e8:	011b      	lsls	r3, r3, #4
 80028ea:	1a9b      	subs	r3, r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	440b      	add	r3, r1
 80028f0:	334d      	adds	r3, #77	@ 0x4d
 80028f2:	2206      	movs	r2, #6
 80028f4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	78fa      	ldrb	r2, [r7, #3]
 80028fc:	4611      	mov	r1, r2
 80028fe:	4618      	mov	r0, r3
 8002900:	f004 fcb7 	bl	8007272 <USB_HC_Halt>
 8002904:	e04e      	b.n	80029a4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	78fa      	ldrb	r2, [r7, #3]
 800290c:	4611      	mov	r1, r2
 800290e:	4618      	mov	r0, r3
 8002910:	f003 ff0b 	bl	800672a <USB_ReadChInterrupts>
 8002914:	4603      	mov	r3, r0
 8002916:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800291a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800291e:	d11b      	bne.n	8002958 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002920:	78fb      	ldrb	r3, [r7, #3]
 8002922:	015a      	lsls	r2, r3, #5
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	4413      	add	r3, r2
 8002928:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800292c:	461a      	mov	r2, r3
 800292e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002932:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002934:	78fa      	ldrb	r2, [r7, #3]
 8002936:	6879      	ldr	r1, [r7, #4]
 8002938:	4613      	mov	r3, r2
 800293a:	011b      	lsls	r3, r3, #4
 800293c:	1a9b      	subs	r3, r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	440b      	add	r3, r1
 8002942:	334d      	adds	r3, #77	@ 0x4d
 8002944:	2209      	movs	r2, #9
 8002946:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	78fa      	ldrb	r2, [r7, #3]
 800294e:	4611      	mov	r1, r2
 8002950:	4618      	mov	r0, r3
 8002952:	f004 fc8e 	bl	8007272 <USB_HC_Halt>
 8002956:	e025      	b.n	80029a4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	78fa      	ldrb	r2, [r7, #3]
 800295e:	4611      	mov	r1, r2
 8002960:	4618      	mov	r0, r3
 8002962:	f003 fee2 	bl	800672a <USB_ReadChInterrupts>
 8002966:	4603      	mov	r3, r0
 8002968:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800296c:	2b80      	cmp	r3, #128	@ 0x80
 800296e:	d119      	bne.n	80029a4 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002970:	78fb      	ldrb	r3, [r7, #3]
 8002972:	015a      	lsls	r2, r3, #5
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	4413      	add	r3, r2
 8002978:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800297c:	461a      	mov	r2, r3
 800297e:	2380      	movs	r3, #128	@ 0x80
 8002980:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002982:	78fa      	ldrb	r2, [r7, #3]
 8002984:	6879      	ldr	r1, [r7, #4]
 8002986:	4613      	mov	r3, r2
 8002988:	011b      	lsls	r3, r3, #4
 800298a:	1a9b      	subs	r3, r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	440b      	add	r3, r1
 8002990:	334d      	adds	r3, #77	@ 0x4d
 8002992:	2207      	movs	r2, #7
 8002994:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	78fa      	ldrb	r2, [r7, #3]
 800299c:	4611      	mov	r1, r2
 800299e:	4618      	mov	r0, r3
 80029a0:	f004 fc67 	bl	8007272 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	78fa      	ldrb	r2, [r7, #3]
 80029aa:	4611      	mov	r1, r2
 80029ac:	4618      	mov	r0, r3
 80029ae:	f003 febc 	bl	800672a <USB_ReadChInterrupts>
 80029b2:	4603      	mov	r3, r0
 80029b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80029bc:	d112      	bne.n	80029e4 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	78fa      	ldrb	r2, [r7, #3]
 80029c4:	4611      	mov	r1, r2
 80029c6:	4618      	mov	r0, r3
 80029c8:	f004 fc53 	bl	8007272 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80029cc:	78fb      	ldrb	r3, [r7, #3]
 80029ce:	015a      	lsls	r2, r3, #5
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	4413      	add	r3, r2
 80029d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029d8:	461a      	mov	r2, r3
 80029da:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80029de:	6093      	str	r3, [r2, #8]
 80029e0:	f000 bd75 	b.w	80034ce <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	78fa      	ldrb	r2, [r7, #3]
 80029ea:	4611      	mov	r1, r2
 80029ec:	4618      	mov	r0, r3
 80029ee:	f003 fe9c 	bl	800672a <USB_ReadChInterrupts>
 80029f2:	4603      	mov	r3, r0
 80029f4:	f003 0301 	and.w	r3, r3, #1
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	f040 8128 	bne.w	8002c4e <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80029fe:	78fb      	ldrb	r3, [r7, #3]
 8002a00:	015a      	lsls	r2, r3, #5
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	4413      	add	r3, r2
 8002a06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	2320      	movs	r3, #32
 8002a0e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002a10:	78fa      	ldrb	r2, [r7, #3]
 8002a12:	6879      	ldr	r1, [r7, #4]
 8002a14:	4613      	mov	r3, r2
 8002a16:	011b      	lsls	r3, r3, #4
 8002a18:	1a9b      	subs	r3, r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	440b      	add	r3, r1
 8002a1e:	331b      	adds	r3, #27
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d119      	bne.n	8002a5a <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002a26:	78fa      	ldrb	r2, [r7, #3]
 8002a28:	6879      	ldr	r1, [r7, #4]
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	011b      	lsls	r3, r3, #4
 8002a2e:	1a9b      	subs	r3, r3, r2
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	440b      	add	r3, r1
 8002a34:	331b      	adds	r3, #27
 8002a36:	2200      	movs	r2, #0
 8002a38:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002a3a:	78fb      	ldrb	r3, [r7, #3]
 8002a3c:	015a      	lsls	r2, r3, #5
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	4413      	add	r3, r2
 8002a42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	78fa      	ldrb	r2, [r7, #3]
 8002a4a:	0151      	lsls	r1, r2, #5
 8002a4c:	693a      	ldr	r2, [r7, #16]
 8002a4e:	440a      	add	r2, r1
 8002a50:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002a54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a58:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	799b      	ldrb	r3, [r3, #6]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d01b      	beq.n	8002a9a <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002a62:	78fa      	ldrb	r2, [r7, #3]
 8002a64:	6879      	ldr	r1, [r7, #4]
 8002a66:	4613      	mov	r3, r2
 8002a68:	011b      	lsls	r3, r3, #4
 8002a6a:	1a9b      	subs	r3, r3, r2
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	440b      	add	r3, r1
 8002a70:	3330      	adds	r3, #48	@ 0x30
 8002a72:	6819      	ldr	r1, [r3, #0]
 8002a74:	78fb      	ldrb	r3, [r7, #3]
 8002a76:	015a      	lsls	r2, r3, #5
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a86:	78fa      	ldrb	r2, [r7, #3]
 8002a88:	1ac9      	subs	r1, r1, r3
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	011b      	lsls	r3, r3, #4
 8002a90:	1a9b      	subs	r3, r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	4403      	add	r3, r0
 8002a96:	3338      	adds	r3, #56	@ 0x38
 8002a98:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002a9a:	78fa      	ldrb	r2, [r7, #3]
 8002a9c:	6879      	ldr	r1, [r7, #4]
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	011b      	lsls	r3, r3, #4
 8002aa2:	1a9b      	subs	r3, r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	440b      	add	r3, r1
 8002aa8:	334d      	adds	r3, #77	@ 0x4d
 8002aaa:	2201      	movs	r2, #1
 8002aac:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002aae:	78fa      	ldrb	r2, [r7, #3]
 8002ab0:	6879      	ldr	r1, [r7, #4]
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	011b      	lsls	r3, r3, #4
 8002ab6:	1a9b      	subs	r3, r3, r2
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	440b      	add	r3, r1
 8002abc:	3344      	adds	r3, #68	@ 0x44
 8002abe:	2200      	movs	r2, #0
 8002ac0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002ac2:	78fb      	ldrb	r3, [r7, #3]
 8002ac4:	015a      	lsls	r2, r3, #5
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	4413      	add	r3, r2
 8002aca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ace:	461a      	mov	r2, r3
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002ad4:	78fa      	ldrb	r2, [r7, #3]
 8002ad6:	6879      	ldr	r1, [r7, #4]
 8002ad8:	4613      	mov	r3, r2
 8002ada:	011b      	lsls	r3, r3, #4
 8002adc:	1a9b      	subs	r3, r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	440b      	add	r3, r1
 8002ae2:	3326      	adds	r3, #38	@ 0x26
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d00a      	beq.n	8002b00 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002aea:	78fa      	ldrb	r2, [r7, #3]
 8002aec:	6879      	ldr	r1, [r7, #4]
 8002aee:	4613      	mov	r3, r2
 8002af0:	011b      	lsls	r3, r3, #4
 8002af2:	1a9b      	subs	r3, r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	440b      	add	r3, r1
 8002af8:	3326      	adds	r3, #38	@ 0x26
 8002afa:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d110      	bne.n	8002b22 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	78fa      	ldrb	r2, [r7, #3]
 8002b06:	4611      	mov	r1, r2
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f004 fbb2 	bl	8007272 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002b0e:	78fb      	ldrb	r3, [r7, #3]
 8002b10:	015a      	lsls	r2, r3, #5
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	4413      	add	r3, r2
 8002b16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	2310      	movs	r3, #16
 8002b1e:	6093      	str	r3, [r2, #8]
 8002b20:	e03d      	b.n	8002b9e <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002b22:	78fa      	ldrb	r2, [r7, #3]
 8002b24:	6879      	ldr	r1, [r7, #4]
 8002b26:	4613      	mov	r3, r2
 8002b28:	011b      	lsls	r3, r3, #4
 8002b2a:	1a9b      	subs	r3, r3, r2
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	440b      	add	r3, r1
 8002b30:	3326      	adds	r3, #38	@ 0x26
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	2b03      	cmp	r3, #3
 8002b36:	d00a      	beq.n	8002b4e <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002b38:	78fa      	ldrb	r2, [r7, #3]
 8002b3a:	6879      	ldr	r1, [r7, #4]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	011b      	lsls	r3, r3, #4
 8002b40:	1a9b      	subs	r3, r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	440b      	add	r3, r1
 8002b46:	3326      	adds	r3, #38	@ 0x26
 8002b48:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d127      	bne.n	8002b9e <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002b4e:	78fb      	ldrb	r3, [r7, #3]
 8002b50:	015a      	lsls	r2, r3, #5
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	4413      	add	r3, r2
 8002b56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	78fa      	ldrb	r2, [r7, #3]
 8002b5e:	0151      	lsls	r1, r2, #5
 8002b60:	693a      	ldr	r2, [r7, #16]
 8002b62:	440a      	add	r2, r1
 8002b64:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002b68:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002b6c:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002b6e:	78fa      	ldrb	r2, [r7, #3]
 8002b70:	6879      	ldr	r1, [r7, #4]
 8002b72:	4613      	mov	r3, r2
 8002b74:	011b      	lsls	r3, r3, #4
 8002b76:	1a9b      	subs	r3, r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	440b      	add	r3, r1
 8002b7c:	334c      	adds	r3, #76	@ 0x4c
 8002b7e:	2201      	movs	r2, #1
 8002b80:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002b82:	78fa      	ldrb	r2, [r7, #3]
 8002b84:	6879      	ldr	r1, [r7, #4]
 8002b86:	4613      	mov	r3, r2
 8002b88:	011b      	lsls	r3, r3, #4
 8002b8a:	1a9b      	subs	r3, r3, r2
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	440b      	add	r3, r1
 8002b90:	334c      	adds	r3, #76	@ 0x4c
 8002b92:	781a      	ldrb	r2, [r3, #0]
 8002b94:	78fb      	ldrb	r3, [r7, #3]
 8002b96:	4619      	mov	r1, r3
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f006 fec3 	bl	8009924 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	799b      	ldrb	r3, [r3, #6]
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d13b      	bne.n	8002c1e <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002ba6:	78fa      	ldrb	r2, [r7, #3]
 8002ba8:	6879      	ldr	r1, [r7, #4]
 8002baa:	4613      	mov	r3, r2
 8002bac:	011b      	lsls	r3, r3, #4
 8002bae:	1a9b      	subs	r3, r3, r2
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	440b      	add	r3, r1
 8002bb4:	3338      	adds	r3, #56	@ 0x38
 8002bb6:	6819      	ldr	r1, [r3, #0]
 8002bb8:	78fa      	ldrb	r2, [r7, #3]
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	011b      	lsls	r3, r3, #4
 8002bc0:	1a9b      	subs	r3, r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	4403      	add	r3, r0
 8002bc6:	3328      	adds	r3, #40	@ 0x28
 8002bc8:	881b      	ldrh	r3, [r3, #0]
 8002bca:	440b      	add	r3, r1
 8002bcc:	1e59      	subs	r1, r3, #1
 8002bce:	78fa      	ldrb	r2, [r7, #3]
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	011b      	lsls	r3, r3, #4
 8002bd6:	1a9b      	subs	r3, r3, r2
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	4403      	add	r3, r0
 8002bdc:	3328      	adds	r3, #40	@ 0x28
 8002bde:	881b      	ldrh	r3, [r3, #0]
 8002be0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002be4:	f003 0301 	and.w	r3, r3, #1
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	f000 8470 	beq.w	80034ce <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002bee:	78fa      	ldrb	r2, [r7, #3]
 8002bf0:	6879      	ldr	r1, [r7, #4]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	011b      	lsls	r3, r3, #4
 8002bf6:	1a9b      	subs	r3, r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	440b      	add	r3, r1
 8002bfc:	333c      	adds	r3, #60	@ 0x3c
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	78fa      	ldrb	r2, [r7, #3]
 8002c02:	f083 0301 	eor.w	r3, r3, #1
 8002c06:	b2d8      	uxtb	r0, r3
 8002c08:	6879      	ldr	r1, [r7, #4]
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	011b      	lsls	r3, r3, #4
 8002c0e:	1a9b      	subs	r3, r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	440b      	add	r3, r1
 8002c14:	333c      	adds	r3, #60	@ 0x3c
 8002c16:	4602      	mov	r2, r0
 8002c18:	701a      	strb	r2, [r3, #0]
 8002c1a:	f000 bc58 	b.w	80034ce <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002c1e:	78fa      	ldrb	r2, [r7, #3]
 8002c20:	6879      	ldr	r1, [r7, #4]
 8002c22:	4613      	mov	r3, r2
 8002c24:	011b      	lsls	r3, r3, #4
 8002c26:	1a9b      	subs	r3, r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	440b      	add	r3, r1
 8002c2c:	333c      	adds	r3, #60	@ 0x3c
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	78fa      	ldrb	r2, [r7, #3]
 8002c32:	f083 0301 	eor.w	r3, r3, #1
 8002c36:	b2d8      	uxtb	r0, r3
 8002c38:	6879      	ldr	r1, [r7, #4]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	011b      	lsls	r3, r3, #4
 8002c3e:	1a9b      	subs	r3, r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	440b      	add	r3, r1
 8002c44:	333c      	adds	r3, #60	@ 0x3c
 8002c46:	4602      	mov	r2, r0
 8002c48:	701a      	strb	r2, [r3, #0]
 8002c4a:	f000 bc40 	b.w	80034ce <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	78fa      	ldrb	r2, [r7, #3]
 8002c54:	4611      	mov	r1, r2
 8002c56:	4618      	mov	r0, r3
 8002c58:	f003 fd67 	bl	800672a <USB_ReadChInterrupts>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	f003 0320 	and.w	r3, r3, #32
 8002c62:	2b20      	cmp	r3, #32
 8002c64:	d131      	bne.n	8002cca <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002c66:	78fb      	ldrb	r3, [r7, #3]
 8002c68:	015a      	lsls	r2, r3, #5
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c72:	461a      	mov	r2, r3
 8002c74:	2320      	movs	r3, #32
 8002c76:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002c78:	78fa      	ldrb	r2, [r7, #3]
 8002c7a:	6879      	ldr	r1, [r7, #4]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	011b      	lsls	r3, r3, #4
 8002c80:	1a9b      	subs	r3, r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	440b      	add	r3, r1
 8002c86:	331a      	adds	r3, #26
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	f040 841f 	bne.w	80034ce <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002c90:	78fa      	ldrb	r2, [r7, #3]
 8002c92:	6879      	ldr	r1, [r7, #4]
 8002c94:	4613      	mov	r3, r2
 8002c96:	011b      	lsls	r3, r3, #4
 8002c98:	1a9b      	subs	r3, r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	440b      	add	r3, r1
 8002c9e:	331b      	adds	r3, #27
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002ca4:	78fa      	ldrb	r2, [r7, #3]
 8002ca6:	6879      	ldr	r1, [r7, #4]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	011b      	lsls	r3, r3, #4
 8002cac:	1a9b      	subs	r3, r3, r2
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	440b      	add	r3, r1
 8002cb2:	334d      	adds	r3, #77	@ 0x4d
 8002cb4:	2203      	movs	r2, #3
 8002cb6:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	78fa      	ldrb	r2, [r7, #3]
 8002cbe:	4611      	mov	r1, r2
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f004 fad6 	bl	8007272 <USB_HC_Halt>
 8002cc6:	f000 bc02 	b.w	80034ce <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	78fa      	ldrb	r2, [r7, #3]
 8002cd0:	4611      	mov	r1, r2
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f003 fd29 	bl	800672a <USB_ReadChInterrupts>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	f040 8305 	bne.w	80032ee <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002ce4:	78fb      	ldrb	r3, [r7, #3]
 8002ce6:	015a      	lsls	r2, r3, #5
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	4413      	add	r3, r2
 8002cec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002cf6:	78fa      	ldrb	r2, [r7, #3]
 8002cf8:	6879      	ldr	r1, [r7, #4]
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	011b      	lsls	r3, r3, #4
 8002cfe:	1a9b      	subs	r3, r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	440b      	add	r3, r1
 8002d04:	334d      	adds	r3, #77	@ 0x4d
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d114      	bne.n	8002d36 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002d0c:	78fa      	ldrb	r2, [r7, #3]
 8002d0e:	6879      	ldr	r1, [r7, #4]
 8002d10:	4613      	mov	r3, r2
 8002d12:	011b      	lsls	r3, r3, #4
 8002d14:	1a9b      	subs	r3, r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	440b      	add	r3, r1
 8002d1a:	334d      	adds	r3, #77	@ 0x4d
 8002d1c:	2202      	movs	r2, #2
 8002d1e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002d20:	78fa      	ldrb	r2, [r7, #3]
 8002d22:	6879      	ldr	r1, [r7, #4]
 8002d24:	4613      	mov	r3, r2
 8002d26:	011b      	lsls	r3, r3, #4
 8002d28:	1a9b      	subs	r3, r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	440b      	add	r3, r1
 8002d2e:	334c      	adds	r3, #76	@ 0x4c
 8002d30:	2201      	movs	r2, #1
 8002d32:	701a      	strb	r2, [r3, #0]
 8002d34:	e2cc      	b.n	80032d0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002d36:	78fa      	ldrb	r2, [r7, #3]
 8002d38:	6879      	ldr	r1, [r7, #4]
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	011b      	lsls	r3, r3, #4
 8002d3e:	1a9b      	subs	r3, r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	440b      	add	r3, r1
 8002d44:	334d      	adds	r3, #77	@ 0x4d
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	2b06      	cmp	r3, #6
 8002d4a:	d114      	bne.n	8002d76 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002d4c:	78fa      	ldrb	r2, [r7, #3]
 8002d4e:	6879      	ldr	r1, [r7, #4]
 8002d50:	4613      	mov	r3, r2
 8002d52:	011b      	lsls	r3, r3, #4
 8002d54:	1a9b      	subs	r3, r3, r2
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	440b      	add	r3, r1
 8002d5a:	334d      	adds	r3, #77	@ 0x4d
 8002d5c:	2202      	movs	r2, #2
 8002d5e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002d60:	78fa      	ldrb	r2, [r7, #3]
 8002d62:	6879      	ldr	r1, [r7, #4]
 8002d64:	4613      	mov	r3, r2
 8002d66:	011b      	lsls	r3, r3, #4
 8002d68:	1a9b      	subs	r3, r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	440b      	add	r3, r1
 8002d6e:	334c      	adds	r3, #76	@ 0x4c
 8002d70:	2205      	movs	r2, #5
 8002d72:	701a      	strb	r2, [r3, #0]
 8002d74:	e2ac      	b.n	80032d0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002d76:	78fa      	ldrb	r2, [r7, #3]
 8002d78:	6879      	ldr	r1, [r7, #4]
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	011b      	lsls	r3, r3, #4
 8002d7e:	1a9b      	subs	r3, r3, r2
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	440b      	add	r3, r1
 8002d84:	334d      	adds	r3, #77	@ 0x4d
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	2b07      	cmp	r3, #7
 8002d8a:	d00b      	beq.n	8002da4 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002d8c:	78fa      	ldrb	r2, [r7, #3]
 8002d8e:	6879      	ldr	r1, [r7, #4]
 8002d90:	4613      	mov	r3, r2
 8002d92:	011b      	lsls	r3, r3, #4
 8002d94:	1a9b      	subs	r3, r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	440b      	add	r3, r1
 8002d9a:	334d      	adds	r3, #77	@ 0x4d
 8002d9c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002d9e:	2b09      	cmp	r3, #9
 8002da0:	f040 80a6 	bne.w	8002ef0 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002da4:	78fa      	ldrb	r2, [r7, #3]
 8002da6:	6879      	ldr	r1, [r7, #4]
 8002da8:	4613      	mov	r3, r2
 8002daa:	011b      	lsls	r3, r3, #4
 8002dac:	1a9b      	subs	r3, r3, r2
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	440b      	add	r3, r1
 8002db2:	334d      	adds	r3, #77	@ 0x4d
 8002db4:	2202      	movs	r2, #2
 8002db6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002db8:	78fa      	ldrb	r2, [r7, #3]
 8002dba:	6879      	ldr	r1, [r7, #4]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	011b      	lsls	r3, r3, #4
 8002dc0:	1a9b      	subs	r3, r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	440b      	add	r3, r1
 8002dc6:	3344      	adds	r3, #68	@ 0x44
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	1c59      	adds	r1, r3, #1
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	4613      	mov	r3, r2
 8002dd0:	011b      	lsls	r3, r3, #4
 8002dd2:	1a9b      	subs	r3, r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	4403      	add	r3, r0
 8002dd8:	3344      	adds	r3, #68	@ 0x44
 8002dda:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002ddc:	78fa      	ldrb	r2, [r7, #3]
 8002dde:	6879      	ldr	r1, [r7, #4]
 8002de0:	4613      	mov	r3, r2
 8002de2:	011b      	lsls	r3, r3, #4
 8002de4:	1a9b      	subs	r3, r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	440b      	add	r3, r1
 8002dea:	3344      	adds	r3, #68	@ 0x44
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d943      	bls.n	8002e7a <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002df2:	78fa      	ldrb	r2, [r7, #3]
 8002df4:	6879      	ldr	r1, [r7, #4]
 8002df6:	4613      	mov	r3, r2
 8002df8:	011b      	lsls	r3, r3, #4
 8002dfa:	1a9b      	subs	r3, r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	440b      	add	r3, r1
 8002e00:	3344      	adds	r3, #68	@ 0x44
 8002e02:	2200      	movs	r2, #0
 8002e04:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8002e06:	78fa      	ldrb	r2, [r7, #3]
 8002e08:	6879      	ldr	r1, [r7, #4]
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	011b      	lsls	r3, r3, #4
 8002e0e:	1a9b      	subs	r3, r3, r2
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	440b      	add	r3, r1
 8002e14:	331a      	adds	r3, #26
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d123      	bne.n	8002e64 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002e1c:	78fa      	ldrb	r2, [r7, #3]
 8002e1e:	6879      	ldr	r1, [r7, #4]
 8002e20:	4613      	mov	r3, r2
 8002e22:	011b      	lsls	r3, r3, #4
 8002e24:	1a9b      	subs	r3, r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	440b      	add	r3, r1
 8002e2a:	331b      	adds	r3, #27
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002e30:	78fa      	ldrb	r2, [r7, #3]
 8002e32:	6879      	ldr	r1, [r7, #4]
 8002e34:	4613      	mov	r3, r2
 8002e36:	011b      	lsls	r3, r3, #4
 8002e38:	1a9b      	subs	r3, r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	440b      	add	r3, r1
 8002e3e:	331c      	adds	r3, #28
 8002e40:	2200      	movs	r2, #0
 8002e42:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002e44:	78fb      	ldrb	r3, [r7, #3]
 8002e46:	015a      	lsls	r2, r3, #5
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	78fa      	ldrb	r2, [r7, #3]
 8002e54:	0151      	lsls	r1, r2, #5
 8002e56:	693a      	ldr	r2, [r7, #16]
 8002e58:	440a      	add	r2, r1
 8002e5a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002e5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e62:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002e64:	78fa      	ldrb	r2, [r7, #3]
 8002e66:	6879      	ldr	r1, [r7, #4]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	011b      	lsls	r3, r3, #4
 8002e6c:	1a9b      	subs	r3, r3, r2
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	440b      	add	r3, r1
 8002e72:	334c      	adds	r3, #76	@ 0x4c
 8002e74:	2204      	movs	r2, #4
 8002e76:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002e78:	e229      	b.n	80032ce <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002e7a:	78fa      	ldrb	r2, [r7, #3]
 8002e7c:	6879      	ldr	r1, [r7, #4]
 8002e7e:	4613      	mov	r3, r2
 8002e80:	011b      	lsls	r3, r3, #4
 8002e82:	1a9b      	subs	r3, r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	440b      	add	r3, r1
 8002e88:	334c      	adds	r3, #76	@ 0x4c
 8002e8a:	2202      	movs	r2, #2
 8002e8c:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002e8e:	78fa      	ldrb	r2, [r7, #3]
 8002e90:	6879      	ldr	r1, [r7, #4]
 8002e92:	4613      	mov	r3, r2
 8002e94:	011b      	lsls	r3, r3, #4
 8002e96:	1a9b      	subs	r3, r3, r2
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	440b      	add	r3, r1
 8002e9c:	3326      	adds	r3, #38	@ 0x26
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d00b      	beq.n	8002ebc <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002ea4:	78fa      	ldrb	r2, [r7, #3]
 8002ea6:	6879      	ldr	r1, [r7, #4]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	011b      	lsls	r3, r3, #4
 8002eac:	1a9b      	subs	r3, r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	440b      	add	r3, r1
 8002eb2:	3326      	adds	r3, #38	@ 0x26
 8002eb4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	f040 8209 	bne.w	80032ce <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002ebc:	78fb      	ldrb	r3, [r7, #3]
 8002ebe:	015a      	lsls	r2, r3, #5
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002ed2:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002eda:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002edc:	78fb      	ldrb	r3, [r7, #3]
 8002ede:	015a      	lsls	r2, r3, #5
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ee8:	461a      	mov	r2, r3
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002eee:	e1ee      	b.n	80032ce <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002ef0:	78fa      	ldrb	r2, [r7, #3]
 8002ef2:	6879      	ldr	r1, [r7, #4]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	011b      	lsls	r3, r3, #4
 8002ef8:	1a9b      	subs	r3, r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	440b      	add	r3, r1
 8002efe:	334d      	adds	r3, #77	@ 0x4d
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	2b05      	cmp	r3, #5
 8002f04:	f040 80c8 	bne.w	8003098 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002f08:	78fa      	ldrb	r2, [r7, #3]
 8002f0a:	6879      	ldr	r1, [r7, #4]
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	011b      	lsls	r3, r3, #4
 8002f10:	1a9b      	subs	r3, r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	440b      	add	r3, r1
 8002f16:	334d      	adds	r3, #77	@ 0x4d
 8002f18:	2202      	movs	r2, #2
 8002f1a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002f1c:	78fa      	ldrb	r2, [r7, #3]
 8002f1e:	6879      	ldr	r1, [r7, #4]
 8002f20:	4613      	mov	r3, r2
 8002f22:	011b      	lsls	r3, r3, #4
 8002f24:	1a9b      	subs	r3, r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	440b      	add	r3, r1
 8002f2a:	331b      	adds	r3, #27
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	f040 81ce 	bne.w	80032d0 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002f34:	78fa      	ldrb	r2, [r7, #3]
 8002f36:	6879      	ldr	r1, [r7, #4]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	011b      	lsls	r3, r3, #4
 8002f3c:	1a9b      	subs	r3, r3, r2
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	440b      	add	r3, r1
 8002f42:	3326      	adds	r3, #38	@ 0x26
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	2b03      	cmp	r3, #3
 8002f48:	d16b      	bne.n	8003022 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8002f4a:	78fa      	ldrb	r2, [r7, #3]
 8002f4c:	6879      	ldr	r1, [r7, #4]
 8002f4e:	4613      	mov	r3, r2
 8002f50:	011b      	lsls	r3, r3, #4
 8002f52:	1a9b      	subs	r3, r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	440b      	add	r3, r1
 8002f58:	3348      	adds	r3, #72	@ 0x48
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	1c59      	adds	r1, r3, #1
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	4613      	mov	r3, r2
 8002f62:	011b      	lsls	r3, r3, #4
 8002f64:	1a9b      	subs	r3, r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	4403      	add	r3, r0
 8002f6a:	3348      	adds	r3, #72	@ 0x48
 8002f6c:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002f6e:	78fa      	ldrb	r2, [r7, #3]
 8002f70:	6879      	ldr	r1, [r7, #4]
 8002f72:	4613      	mov	r3, r2
 8002f74:	011b      	lsls	r3, r3, #4
 8002f76:	1a9b      	subs	r3, r3, r2
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	440b      	add	r3, r1
 8002f7c:	3348      	adds	r3, #72	@ 0x48
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d943      	bls.n	800300c <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002f84:	78fa      	ldrb	r2, [r7, #3]
 8002f86:	6879      	ldr	r1, [r7, #4]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	011b      	lsls	r3, r3, #4
 8002f8c:	1a9b      	subs	r3, r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	440b      	add	r3, r1
 8002f92:	3348      	adds	r3, #72	@ 0x48
 8002f94:	2200      	movs	r2, #0
 8002f96:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002f98:	78fa      	ldrb	r2, [r7, #3]
 8002f9a:	6879      	ldr	r1, [r7, #4]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	011b      	lsls	r3, r3, #4
 8002fa0:	1a9b      	subs	r3, r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	440b      	add	r3, r1
 8002fa6:	331b      	adds	r3, #27
 8002fa8:	2200      	movs	r2, #0
 8002faa:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002fac:	78fa      	ldrb	r2, [r7, #3]
 8002fae:	6879      	ldr	r1, [r7, #4]
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	011b      	lsls	r3, r3, #4
 8002fb4:	1a9b      	subs	r3, r3, r2
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	440b      	add	r3, r1
 8002fba:	3344      	adds	r3, #68	@ 0x44
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d809      	bhi.n	8002fd6 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8002fc2:	78fa      	ldrb	r2, [r7, #3]
 8002fc4:	6879      	ldr	r1, [r7, #4]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	011b      	lsls	r3, r3, #4
 8002fca:	1a9b      	subs	r3, r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	440b      	add	r3, r1
 8002fd0:	331c      	adds	r3, #28
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002fd6:	78fb      	ldrb	r3, [r7, #3]
 8002fd8:	015a      	lsls	r2, r3, #5
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	4413      	add	r3, r2
 8002fde:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	78fa      	ldrb	r2, [r7, #3]
 8002fe6:	0151      	lsls	r1, r2, #5
 8002fe8:	693a      	ldr	r2, [r7, #16]
 8002fea:	440a      	add	r2, r1
 8002fec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002ff0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ff4:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8002ff6:	78fa      	ldrb	r2, [r7, #3]
 8002ff8:	6879      	ldr	r1, [r7, #4]
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	011b      	lsls	r3, r3, #4
 8002ffe:	1a9b      	subs	r3, r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	440b      	add	r3, r1
 8003004:	334c      	adds	r3, #76	@ 0x4c
 8003006:	2204      	movs	r2, #4
 8003008:	701a      	strb	r2, [r3, #0]
 800300a:	e014      	b.n	8003036 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800300c:	78fa      	ldrb	r2, [r7, #3]
 800300e:	6879      	ldr	r1, [r7, #4]
 8003010:	4613      	mov	r3, r2
 8003012:	011b      	lsls	r3, r3, #4
 8003014:	1a9b      	subs	r3, r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	440b      	add	r3, r1
 800301a:	334c      	adds	r3, #76	@ 0x4c
 800301c:	2202      	movs	r2, #2
 800301e:	701a      	strb	r2, [r3, #0]
 8003020:	e009      	b.n	8003036 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003022:	78fa      	ldrb	r2, [r7, #3]
 8003024:	6879      	ldr	r1, [r7, #4]
 8003026:	4613      	mov	r3, r2
 8003028:	011b      	lsls	r3, r3, #4
 800302a:	1a9b      	subs	r3, r3, r2
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	440b      	add	r3, r1
 8003030:	334c      	adds	r3, #76	@ 0x4c
 8003032:	2202      	movs	r2, #2
 8003034:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003036:	78fa      	ldrb	r2, [r7, #3]
 8003038:	6879      	ldr	r1, [r7, #4]
 800303a:	4613      	mov	r3, r2
 800303c:	011b      	lsls	r3, r3, #4
 800303e:	1a9b      	subs	r3, r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	440b      	add	r3, r1
 8003044:	3326      	adds	r3, #38	@ 0x26
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00b      	beq.n	8003064 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800304c:	78fa      	ldrb	r2, [r7, #3]
 800304e:	6879      	ldr	r1, [r7, #4]
 8003050:	4613      	mov	r3, r2
 8003052:	011b      	lsls	r3, r3, #4
 8003054:	1a9b      	subs	r3, r3, r2
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	440b      	add	r3, r1
 800305a:	3326      	adds	r3, #38	@ 0x26
 800305c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800305e:	2b02      	cmp	r3, #2
 8003060:	f040 8136 	bne.w	80032d0 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003064:	78fb      	ldrb	r3, [r7, #3]
 8003066:	015a      	lsls	r2, r3, #5
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	4413      	add	r3, r2
 800306c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800307a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003082:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003084:	78fb      	ldrb	r3, [r7, #3]
 8003086:	015a      	lsls	r2, r3, #5
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	4413      	add	r3, r2
 800308c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003090:	461a      	mov	r2, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6013      	str	r3, [r2, #0]
 8003096:	e11b      	b.n	80032d0 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003098:	78fa      	ldrb	r2, [r7, #3]
 800309a:	6879      	ldr	r1, [r7, #4]
 800309c:	4613      	mov	r3, r2
 800309e:	011b      	lsls	r3, r3, #4
 80030a0:	1a9b      	subs	r3, r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	440b      	add	r3, r1
 80030a6:	334d      	adds	r3, #77	@ 0x4d
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	2b03      	cmp	r3, #3
 80030ac:	f040 8081 	bne.w	80031b2 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80030b0:	78fa      	ldrb	r2, [r7, #3]
 80030b2:	6879      	ldr	r1, [r7, #4]
 80030b4:	4613      	mov	r3, r2
 80030b6:	011b      	lsls	r3, r3, #4
 80030b8:	1a9b      	subs	r3, r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	440b      	add	r3, r1
 80030be:	334d      	adds	r3, #77	@ 0x4d
 80030c0:	2202      	movs	r2, #2
 80030c2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80030c4:	78fa      	ldrb	r2, [r7, #3]
 80030c6:	6879      	ldr	r1, [r7, #4]
 80030c8:	4613      	mov	r3, r2
 80030ca:	011b      	lsls	r3, r3, #4
 80030cc:	1a9b      	subs	r3, r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	440b      	add	r3, r1
 80030d2:	331b      	adds	r3, #27
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	f040 80fa 	bne.w	80032d0 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80030dc:	78fa      	ldrb	r2, [r7, #3]
 80030de:	6879      	ldr	r1, [r7, #4]
 80030e0:	4613      	mov	r3, r2
 80030e2:	011b      	lsls	r3, r3, #4
 80030e4:	1a9b      	subs	r3, r3, r2
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	440b      	add	r3, r1
 80030ea:	334c      	adds	r3, #76	@ 0x4c
 80030ec:	2202      	movs	r2, #2
 80030ee:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80030f0:	78fb      	ldrb	r3, [r7, #3]
 80030f2:	015a      	lsls	r2, r3, #5
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	4413      	add	r3, r2
 80030f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	78fa      	ldrb	r2, [r7, #3]
 8003100:	0151      	lsls	r1, r2, #5
 8003102:	693a      	ldr	r2, [r7, #16]
 8003104:	440a      	add	r2, r1
 8003106:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800310a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800310e:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8003110:	78fb      	ldrb	r3, [r7, #3]
 8003112:	015a      	lsls	r2, r3, #5
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	4413      	add	r3, r2
 8003118:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	78fa      	ldrb	r2, [r7, #3]
 8003120:	0151      	lsls	r1, r2, #5
 8003122:	693a      	ldr	r2, [r7, #16]
 8003124:	440a      	add	r2, r1
 8003126:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800312a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800312e:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003130:	78fb      	ldrb	r3, [r7, #3]
 8003132:	015a      	lsls	r2, r3, #5
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	4413      	add	r3, r2
 8003138:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	78fa      	ldrb	r2, [r7, #3]
 8003140:	0151      	lsls	r1, r2, #5
 8003142:	693a      	ldr	r2, [r7, #16]
 8003144:	440a      	add	r2, r1
 8003146:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800314a:	f023 0320 	bic.w	r3, r3, #32
 800314e:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003150:	78fa      	ldrb	r2, [r7, #3]
 8003152:	6879      	ldr	r1, [r7, #4]
 8003154:	4613      	mov	r3, r2
 8003156:	011b      	lsls	r3, r3, #4
 8003158:	1a9b      	subs	r3, r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	440b      	add	r3, r1
 800315e:	3326      	adds	r3, #38	@ 0x26
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00b      	beq.n	800317e <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003166:	78fa      	ldrb	r2, [r7, #3]
 8003168:	6879      	ldr	r1, [r7, #4]
 800316a:	4613      	mov	r3, r2
 800316c:	011b      	lsls	r3, r3, #4
 800316e:	1a9b      	subs	r3, r3, r2
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	440b      	add	r3, r1
 8003174:	3326      	adds	r3, #38	@ 0x26
 8003176:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003178:	2b02      	cmp	r3, #2
 800317a:	f040 80a9 	bne.w	80032d0 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800317e:	78fb      	ldrb	r3, [r7, #3]
 8003180:	015a      	lsls	r2, r3, #5
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	4413      	add	r3, r2
 8003186:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003194:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800319c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800319e:	78fb      	ldrb	r3, [r7, #3]
 80031a0:	015a      	lsls	r2, r3, #5
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	4413      	add	r3, r2
 80031a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031aa:	461a      	mov	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6013      	str	r3, [r2, #0]
 80031b0:	e08e      	b.n	80032d0 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80031b2:	78fa      	ldrb	r2, [r7, #3]
 80031b4:	6879      	ldr	r1, [r7, #4]
 80031b6:	4613      	mov	r3, r2
 80031b8:	011b      	lsls	r3, r3, #4
 80031ba:	1a9b      	subs	r3, r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	440b      	add	r3, r1
 80031c0:	334d      	adds	r3, #77	@ 0x4d
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	2b04      	cmp	r3, #4
 80031c6:	d143      	bne.n	8003250 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80031c8:	78fa      	ldrb	r2, [r7, #3]
 80031ca:	6879      	ldr	r1, [r7, #4]
 80031cc:	4613      	mov	r3, r2
 80031ce:	011b      	lsls	r3, r3, #4
 80031d0:	1a9b      	subs	r3, r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	440b      	add	r3, r1
 80031d6:	334d      	adds	r3, #77	@ 0x4d
 80031d8:	2202      	movs	r2, #2
 80031da:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80031dc:	78fa      	ldrb	r2, [r7, #3]
 80031de:	6879      	ldr	r1, [r7, #4]
 80031e0:	4613      	mov	r3, r2
 80031e2:	011b      	lsls	r3, r3, #4
 80031e4:	1a9b      	subs	r3, r3, r2
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	440b      	add	r3, r1
 80031ea:	334c      	adds	r3, #76	@ 0x4c
 80031ec:	2202      	movs	r2, #2
 80031ee:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80031f0:	78fa      	ldrb	r2, [r7, #3]
 80031f2:	6879      	ldr	r1, [r7, #4]
 80031f4:	4613      	mov	r3, r2
 80031f6:	011b      	lsls	r3, r3, #4
 80031f8:	1a9b      	subs	r3, r3, r2
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	440b      	add	r3, r1
 80031fe:	3326      	adds	r3, #38	@ 0x26
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00a      	beq.n	800321c <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003206:	78fa      	ldrb	r2, [r7, #3]
 8003208:	6879      	ldr	r1, [r7, #4]
 800320a:	4613      	mov	r3, r2
 800320c:	011b      	lsls	r3, r3, #4
 800320e:	1a9b      	subs	r3, r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	440b      	add	r3, r1
 8003214:	3326      	adds	r3, #38	@ 0x26
 8003216:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003218:	2b02      	cmp	r3, #2
 800321a:	d159      	bne.n	80032d0 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800321c:	78fb      	ldrb	r3, [r7, #3]
 800321e:	015a      	lsls	r2, r3, #5
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	4413      	add	r3, r2
 8003224:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003232:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800323a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800323c:	78fb      	ldrb	r3, [r7, #3]
 800323e:	015a      	lsls	r2, r3, #5
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	4413      	add	r3, r2
 8003244:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003248:	461a      	mov	r2, r3
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6013      	str	r3, [r2, #0]
 800324e:	e03f      	b.n	80032d0 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003250:	78fa      	ldrb	r2, [r7, #3]
 8003252:	6879      	ldr	r1, [r7, #4]
 8003254:	4613      	mov	r3, r2
 8003256:	011b      	lsls	r3, r3, #4
 8003258:	1a9b      	subs	r3, r3, r2
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	440b      	add	r3, r1
 800325e:	334d      	adds	r3, #77	@ 0x4d
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	2b08      	cmp	r3, #8
 8003264:	d126      	bne.n	80032b4 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003266:	78fa      	ldrb	r2, [r7, #3]
 8003268:	6879      	ldr	r1, [r7, #4]
 800326a:	4613      	mov	r3, r2
 800326c:	011b      	lsls	r3, r3, #4
 800326e:	1a9b      	subs	r3, r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	440b      	add	r3, r1
 8003274:	334d      	adds	r3, #77	@ 0x4d
 8003276:	2202      	movs	r2, #2
 8003278:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800327a:	78fa      	ldrb	r2, [r7, #3]
 800327c:	6879      	ldr	r1, [r7, #4]
 800327e:	4613      	mov	r3, r2
 8003280:	011b      	lsls	r3, r3, #4
 8003282:	1a9b      	subs	r3, r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	440b      	add	r3, r1
 8003288:	3344      	adds	r3, #68	@ 0x44
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	1c59      	adds	r1, r3, #1
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	4613      	mov	r3, r2
 8003292:	011b      	lsls	r3, r3, #4
 8003294:	1a9b      	subs	r3, r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	4403      	add	r3, r0
 800329a:	3344      	adds	r3, #68	@ 0x44
 800329c:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800329e:	78fa      	ldrb	r2, [r7, #3]
 80032a0:	6879      	ldr	r1, [r7, #4]
 80032a2:	4613      	mov	r3, r2
 80032a4:	011b      	lsls	r3, r3, #4
 80032a6:	1a9b      	subs	r3, r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	440b      	add	r3, r1
 80032ac:	334c      	adds	r3, #76	@ 0x4c
 80032ae:	2204      	movs	r2, #4
 80032b0:	701a      	strb	r2, [r3, #0]
 80032b2:	e00d      	b.n	80032d0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80032b4:	78fa      	ldrb	r2, [r7, #3]
 80032b6:	6879      	ldr	r1, [r7, #4]
 80032b8:	4613      	mov	r3, r2
 80032ba:	011b      	lsls	r3, r3, #4
 80032bc:	1a9b      	subs	r3, r3, r2
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	440b      	add	r3, r1
 80032c2:	334d      	adds	r3, #77	@ 0x4d
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	f000 8100 	beq.w	80034cc <HCD_HC_IN_IRQHandler+0xcca>
 80032cc:	e000      	b.n	80032d0 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80032ce:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80032d0:	78fa      	ldrb	r2, [r7, #3]
 80032d2:	6879      	ldr	r1, [r7, #4]
 80032d4:	4613      	mov	r3, r2
 80032d6:	011b      	lsls	r3, r3, #4
 80032d8:	1a9b      	subs	r3, r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	440b      	add	r3, r1
 80032de:	334c      	adds	r3, #76	@ 0x4c
 80032e0:	781a      	ldrb	r2, [r3, #0]
 80032e2:	78fb      	ldrb	r3, [r7, #3]
 80032e4:	4619      	mov	r1, r3
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f006 fb1c 	bl	8009924 <HAL_HCD_HC_NotifyURBChange_Callback>
 80032ec:	e0ef      	b.n	80034ce <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	78fa      	ldrb	r2, [r7, #3]
 80032f4:	4611      	mov	r1, r2
 80032f6:	4618      	mov	r0, r3
 80032f8:	f003 fa17 	bl	800672a <USB_ReadChInterrupts>
 80032fc:	4603      	mov	r3, r0
 80032fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003302:	2b40      	cmp	r3, #64	@ 0x40
 8003304:	d12f      	bne.n	8003366 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003306:	78fb      	ldrb	r3, [r7, #3]
 8003308:	015a      	lsls	r2, r3, #5
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	4413      	add	r3, r2
 800330e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003312:	461a      	mov	r2, r3
 8003314:	2340      	movs	r3, #64	@ 0x40
 8003316:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8003318:	78fa      	ldrb	r2, [r7, #3]
 800331a:	6879      	ldr	r1, [r7, #4]
 800331c:	4613      	mov	r3, r2
 800331e:	011b      	lsls	r3, r3, #4
 8003320:	1a9b      	subs	r3, r3, r2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	440b      	add	r3, r1
 8003326:	334d      	adds	r3, #77	@ 0x4d
 8003328:	2205      	movs	r2, #5
 800332a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800332c:	78fa      	ldrb	r2, [r7, #3]
 800332e:	6879      	ldr	r1, [r7, #4]
 8003330:	4613      	mov	r3, r2
 8003332:	011b      	lsls	r3, r3, #4
 8003334:	1a9b      	subs	r3, r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	440b      	add	r3, r1
 800333a:	331a      	adds	r3, #26
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d109      	bne.n	8003356 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003342:	78fa      	ldrb	r2, [r7, #3]
 8003344:	6879      	ldr	r1, [r7, #4]
 8003346:	4613      	mov	r3, r2
 8003348:	011b      	lsls	r3, r3, #4
 800334a:	1a9b      	subs	r3, r3, r2
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	440b      	add	r3, r1
 8003350:	3344      	adds	r3, #68	@ 0x44
 8003352:	2200      	movs	r2, #0
 8003354:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	78fa      	ldrb	r2, [r7, #3]
 800335c:	4611      	mov	r1, r2
 800335e:	4618      	mov	r0, r3
 8003360:	f003 ff87 	bl	8007272 <USB_HC_Halt>
 8003364:	e0b3      	b.n	80034ce <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	78fa      	ldrb	r2, [r7, #3]
 800336c:	4611      	mov	r1, r2
 800336e:	4618      	mov	r0, r3
 8003370:	f003 f9db 	bl	800672a <USB_ReadChInterrupts>
 8003374:	4603      	mov	r3, r0
 8003376:	f003 0310 	and.w	r3, r3, #16
 800337a:	2b10      	cmp	r3, #16
 800337c:	f040 80a7 	bne.w	80034ce <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003380:	78fa      	ldrb	r2, [r7, #3]
 8003382:	6879      	ldr	r1, [r7, #4]
 8003384:	4613      	mov	r3, r2
 8003386:	011b      	lsls	r3, r3, #4
 8003388:	1a9b      	subs	r3, r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	440b      	add	r3, r1
 800338e:	3326      	adds	r3, #38	@ 0x26
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	2b03      	cmp	r3, #3
 8003394:	d11b      	bne.n	80033ce <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003396:	78fa      	ldrb	r2, [r7, #3]
 8003398:	6879      	ldr	r1, [r7, #4]
 800339a:	4613      	mov	r3, r2
 800339c:	011b      	lsls	r3, r3, #4
 800339e:	1a9b      	subs	r3, r3, r2
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	440b      	add	r3, r1
 80033a4:	3344      	adds	r3, #68	@ 0x44
 80033a6:	2200      	movs	r2, #0
 80033a8:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80033aa:	78fa      	ldrb	r2, [r7, #3]
 80033ac:	6879      	ldr	r1, [r7, #4]
 80033ae:	4613      	mov	r3, r2
 80033b0:	011b      	lsls	r3, r3, #4
 80033b2:	1a9b      	subs	r3, r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	440b      	add	r3, r1
 80033b8:	334d      	adds	r3, #77	@ 0x4d
 80033ba:	2204      	movs	r2, #4
 80033bc:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	78fa      	ldrb	r2, [r7, #3]
 80033c4:	4611      	mov	r1, r2
 80033c6:	4618      	mov	r0, r3
 80033c8:	f003 ff53 	bl	8007272 <USB_HC_Halt>
 80033cc:	e03f      	b.n	800344e <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80033ce:	78fa      	ldrb	r2, [r7, #3]
 80033d0:	6879      	ldr	r1, [r7, #4]
 80033d2:	4613      	mov	r3, r2
 80033d4:	011b      	lsls	r3, r3, #4
 80033d6:	1a9b      	subs	r3, r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	440b      	add	r3, r1
 80033dc:	3326      	adds	r3, #38	@ 0x26
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d00a      	beq.n	80033fa <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80033e4:	78fa      	ldrb	r2, [r7, #3]
 80033e6:	6879      	ldr	r1, [r7, #4]
 80033e8:	4613      	mov	r3, r2
 80033ea:	011b      	lsls	r3, r3, #4
 80033ec:	1a9b      	subs	r3, r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	440b      	add	r3, r1
 80033f2:	3326      	adds	r3, #38	@ 0x26
 80033f4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d129      	bne.n	800344e <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80033fa:	78fa      	ldrb	r2, [r7, #3]
 80033fc:	6879      	ldr	r1, [r7, #4]
 80033fe:	4613      	mov	r3, r2
 8003400:	011b      	lsls	r3, r3, #4
 8003402:	1a9b      	subs	r3, r3, r2
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	440b      	add	r3, r1
 8003408:	3344      	adds	r3, #68	@ 0x44
 800340a:	2200      	movs	r2, #0
 800340c:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	799b      	ldrb	r3, [r3, #6]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00a      	beq.n	800342c <HCD_HC_IN_IRQHandler+0xc2a>
 8003416:	78fa      	ldrb	r2, [r7, #3]
 8003418:	6879      	ldr	r1, [r7, #4]
 800341a:	4613      	mov	r3, r2
 800341c:	011b      	lsls	r3, r3, #4
 800341e:	1a9b      	subs	r3, r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	440b      	add	r3, r1
 8003424:	331b      	adds	r3, #27
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	2b01      	cmp	r3, #1
 800342a:	d110      	bne.n	800344e <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 800342c:	78fa      	ldrb	r2, [r7, #3]
 800342e:	6879      	ldr	r1, [r7, #4]
 8003430:	4613      	mov	r3, r2
 8003432:	011b      	lsls	r3, r3, #4
 8003434:	1a9b      	subs	r3, r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	440b      	add	r3, r1
 800343a:	334d      	adds	r3, #77	@ 0x4d
 800343c:	2204      	movs	r2, #4
 800343e:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	78fa      	ldrb	r2, [r7, #3]
 8003446:	4611      	mov	r1, r2
 8003448:	4618      	mov	r0, r3
 800344a:	f003 ff12 	bl	8007272 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 800344e:	78fa      	ldrb	r2, [r7, #3]
 8003450:	6879      	ldr	r1, [r7, #4]
 8003452:	4613      	mov	r3, r2
 8003454:	011b      	lsls	r3, r3, #4
 8003456:	1a9b      	subs	r3, r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	440b      	add	r3, r1
 800345c:	331b      	adds	r3, #27
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	2b01      	cmp	r3, #1
 8003462:	d129      	bne.n	80034b8 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003464:	78fa      	ldrb	r2, [r7, #3]
 8003466:	6879      	ldr	r1, [r7, #4]
 8003468:	4613      	mov	r3, r2
 800346a:	011b      	lsls	r3, r3, #4
 800346c:	1a9b      	subs	r3, r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	440b      	add	r3, r1
 8003472:	331b      	adds	r3, #27
 8003474:	2200      	movs	r2, #0
 8003476:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003478:	78fb      	ldrb	r3, [r7, #3]
 800347a:	015a      	lsls	r2, r3, #5
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	4413      	add	r3, r2
 8003480:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	78fa      	ldrb	r2, [r7, #3]
 8003488:	0151      	lsls	r1, r2, #5
 800348a:	693a      	ldr	r2, [r7, #16]
 800348c:	440a      	add	r2, r1
 800348e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003492:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003496:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003498:	78fb      	ldrb	r3, [r7, #3]
 800349a:	015a      	lsls	r2, r3, #5
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	4413      	add	r3, r2
 80034a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	78fa      	ldrb	r2, [r7, #3]
 80034a8:	0151      	lsls	r1, r2, #5
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	440a      	add	r2, r1
 80034ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80034b2:	f043 0320 	orr.w	r3, r3, #32
 80034b6:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80034b8:	78fb      	ldrb	r3, [r7, #3]
 80034ba:	015a      	lsls	r2, r3, #5
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	4413      	add	r3, r2
 80034c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034c4:	461a      	mov	r2, r3
 80034c6:	2310      	movs	r3, #16
 80034c8:	6093      	str	r3, [r2, #8]
 80034ca:	e000      	b.n	80034ce <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80034cc:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80034ce:	3718      	adds	r7, #24
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b086      	sub	sp, #24
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	460b      	mov	r3, r1
 80034de:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	78fa      	ldrb	r2, [r7, #3]
 80034f0:	4611      	mov	r1, r2
 80034f2:	4618      	mov	r0, r3
 80034f4:	f003 f919 	bl	800672a <USB_ReadChInterrupts>
 80034f8:	4603      	mov	r3, r0
 80034fa:	f003 0304 	and.w	r3, r3, #4
 80034fe:	2b04      	cmp	r3, #4
 8003500:	d11b      	bne.n	800353a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003502:	78fb      	ldrb	r3, [r7, #3]
 8003504:	015a      	lsls	r2, r3, #5
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	4413      	add	r3, r2
 800350a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800350e:	461a      	mov	r2, r3
 8003510:	2304      	movs	r3, #4
 8003512:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003514:	78fa      	ldrb	r2, [r7, #3]
 8003516:	6879      	ldr	r1, [r7, #4]
 8003518:	4613      	mov	r3, r2
 800351a:	011b      	lsls	r3, r3, #4
 800351c:	1a9b      	subs	r3, r3, r2
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	440b      	add	r3, r1
 8003522:	334d      	adds	r3, #77	@ 0x4d
 8003524:	2207      	movs	r2, #7
 8003526:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	78fa      	ldrb	r2, [r7, #3]
 800352e:	4611      	mov	r1, r2
 8003530:	4618      	mov	r0, r3
 8003532:	f003 fe9e 	bl	8007272 <USB_HC_Halt>
 8003536:	f000 bc89 	b.w	8003e4c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	78fa      	ldrb	r2, [r7, #3]
 8003540:	4611      	mov	r1, r2
 8003542:	4618      	mov	r0, r3
 8003544:	f003 f8f1 	bl	800672a <USB_ReadChInterrupts>
 8003548:	4603      	mov	r3, r0
 800354a:	f003 0320 	and.w	r3, r3, #32
 800354e:	2b20      	cmp	r3, #32
 8003550:	f040 8082 	bne.w	8003658 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003554:	78fb      	ldrb	r3, [r7, #3]
 8003556:	015a      	lsls	r2, r3, #5
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	4413      	add	r3, r2
 800355c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003560:	461a      	mov	r2, r3
 8003562:	2320      	movs	r3, #32
 8003564:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003566:	78fa      	ldrb	r2, [r7, #3]
 8003568:	6879      	ldr	r1, [r7, #4]
 800356a:	4613      	mov	r3, r2
 800356c:	011b      	lsls	r3, r3, #4
 800356e:	1a9b      	subs	r3, r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	440b      	add	r3, r1
 8003574:	3319      	adds	r3, #25
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	2b01      	cmp	r3, #1
 800357a:	d124      	bne.n	80035c6 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 800357c:	78fa      	ldrb	r2, [r7, #3]
 800357e:	6879      	ldr	r1, [r7, #4]
 8003580:	4613      	mov	r3, r2
 8003582:	011b      	lsls	r3, r3, #4
 8003584:	1a9b      	subs	r3, r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	440b      	add	r3, r1
 800358a:	3319      	adds	r3, #25
 800358c:	2200      	movs	r2, #0
 800358e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003590:	78fa      	ldrb	r2, [r7, #3]
 8003592:	6879      	ldr	r1, [r7, #4]
 8003594:	4613      	mov	r3, r2
 8003596:	011b      	lsls	r3, r3, #4
 8003598:	1a9b      	subs	r3, r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	440b      	add	r3, r1
 800359e:	334c      	adds	r3, #76	@ 0x4c
 80035a0:	2202      	movs	r2, #2
 80035a2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80035a4:	78fa      	ldrb	r2, [r7, #3]
 80035a6:	6879      	ldr	r1, [r7, #4]
 80035a8:	4613      	mov	r3, r2
 80035aa:	011b      	lsls	r3, r3, #4
 80035ac:	1a9b      	subs	r3, r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	440b      	add	r3, r1
 80035b2:	334d      	adds	r3, #77	@ 0x4d
 80035b4:	2203      	movs	r2, #3
 80035b6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	78fa      	ldrb	r2, [r7, #3]
 80035be:	4611      	mov	r1, r2
 80035c0:	4618      	mov	r0, r3
 80035c2:	f003 fe56 	bl	8007272 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80035c6:	78fa      	ldrb	r2, [r7, #3]
 80035c8:	6879      	ldr	r1, [r7, #4]
 80035ca:	4613      	mov	r3, r2
 80035cc:	011b      	lsls	r3, r3, #4
 80035ce:	1a9b      	subs	r3, r3, r2
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	440b      	add	r3, r1
 80035d4:	331a      	adds	r3, #26
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	2b01      	cmp	r3, #1
 80035da:	f040 8437 	bne.w	8003e4c <HCD_HC_OUT_IRQHandler+0x978>
 80035de:	78fa      	ldrb	r2, [r7, #3]
 80035e0:	6879      	ldr	r1, [r7, #4]
 80035e2:	4613      	mov	r3, r2
 80035e4:	011b      	lsls	r3, r3, #4
 80035e6:	1a9b      	subs	r3, r3, r2
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	440b      	add	r3, r1
 80035ec:	331b      	adds	r3, #27
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	f040 842b 	bne.w	8003e4c <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80035f6:	78fa      	ldrb	r2, [r7, #3]
 80035f8:	6879      	ldr	r1, [r7, #4]
 80035fa:	4613      	mov	r3, r2
 80035fc:	011b      	lsls	r3, r3, #4
 80035fe:	1a9b      	subs	r3, r3, r2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	440b      	add	r3, r1
 8003604:	3326      	adds	r3, #38	@ 0x26
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	2b01      	cmp	r3, #1
 800360a:	d009      	beq.n	8003620 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 800360c:	78fa      	ldrb	r2, [r7, #3]
 800360e:	6879      	ldr	r1, [r7, #4]
 8003610:	4613      	mov	r3, r2
 8003612:	011b      	lsls	r3, r3, #4
 8003614:	1a9b      	subs	r3, r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	440b      	add	r3, r1
 800361a:	331b      	adds	r3, #27
 800361c:	2201      	movs	r2, #1
 800361e:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003620:	78fa      	ldrb	r2, [r7, #3]
 8003622:	6879      	ldr	r1, [r7, #4]
 8003624:	4613      	mov	r3, r2
 8003626:	011b      	lsls	r3, r3, #4
 8003628:	1a9b      	subs	r3, r3, r2
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	440b      	add	r3, r1
 800362e:	334d      	adds	r3, #77	@ 0x4d
 8003630:	2203      	movs	r2, #3
 8003632:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	78fa      	ldrb	r2, [r7, #3]
 800363a:	4611      	mov	r1, r2
 800363c:	4618      	mov	r0, r3
 800363e:	f003 fe18 	bl	8007272 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8003642:	78fa      	ldrb	r2, [r7, #3]
 8003644:	6879      	ldr	r1, [r7, #4]
 8003646:	4613      	mov	r3, r2
 8003648:	011b      	lsls	r3, r3, #4
 800364a:	1a9b      	subs	r3, r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	440b      	add	r3, r1
 8003650:	3344      	adds	r3, #68	@ 0x44
 8003652:	2200      	movs	r2, #0
 8003654:	601a      	str	r2, [r3, #0]
 8003656:	e3f9      	b.n	8003e4c <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	78fa      	ldrb	r2, [r7, #3]
 800365e:	4611      	mov	r1, r2
 8003660:	4618      	mov	r0, r3
 8003662:	f003 f862 	bl	800672a <USB_ReadChInterrupts>
 8003666:	4603      	mov	r3, r0
 8003668:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800366c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003670:	d111      	bne.n	8003696 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003672:	78fb      	ldrb	r3, [r7, #3]
 8003674:	015a      	lsls	r2, r3, #5
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	4413      	add	r3, r2
 800367a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800367e:	461a      	mov	r2, r3
 8003680:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003684:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	78fa      	ldrb	r2, [r7, #3]
 800368c:	4611      	mov	r1, r2
 800368e:	4618      	mov	r0, r3
 8003690:	f003 fdef 	bl	8007272 <USB_HC_Halt>
 8003694:	e3da      	b.n	8003e4c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	78fa      	ldrb	r2, [r7, #3]
 800369c:	4611      	mov	r1, r2
 800369e:	4618      	mov	r0, r3
 80036a0:	f003 f843 	bl	800672a <USB_ReadChInterrupts>
 80036a4:	4603      	mov	r3, r0
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d168      	bne.n	8003780 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80036ae:	78fa      	ldrb	r2, [r7, #3]
 80036b0:	6879      	ldr	r1, [r7, #4]
 80036b2:	4613      	mov	r3, r2
 80036b4:	011b      	lsls	r3, r3, #4
 80036b6:	1a9b      	subs	r3, r3, r2
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	440b      	add	r3, r1
 80036bc:	3344      	adds	r3, #68	@ 0x44
 80036be:	2200      	movs	r2, #0
 80036c0:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	78fa      	ldrb	r2, [r7, #3]
 80036c8:	4611      	mov	r1, r2
 80036ca:	4618      	mov	r0, r3
 80036cc:	f003 f82d 	bl	800672a <USB_ReadChInterrupts>
 80036d0:	4603      	mov	r3, r0
 80036d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036d6:	2b40      	cmp	r3, #64	@ 0x40
 80036d8:	d112      	bne.n	8003700 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80036da:	78fa      	ldrb	r2, [r7, #3]
 80036dc:	6879      	ldr	r1, [r7, #4]
 80036de:	4613      	mov	r3, r2
 80036e0:	011b      	lsls	r3, r3, #4
 80036e2:	1a9b      	subs	r3, r3, r2
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	440b      	add	r3, r1
 80036e8:	3319      	adds	r3, #25
 80036ea:	2201      	movs	r2, #1
 80036ec:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80036ee:	78fb      	ldrb	r3, [r7, #3]
 80036f0:	015a      	lsls	r2, r3, #5
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	4413      	add	r3, r2
 80036f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036fa:	461a      	mov	r2, r3
 80036fc:	2340      	movs	r3, #64	@ 0x40
 80036fe:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003700:	78fa      	ldrb	r2, [r7, #3]
 8003702:	6879      	ldr	r1, [r7, #4]
 8003704:	4613      	mov	r3, r2
 8003706:	011b      	lsls	r3, r3, #4
 8003708:	1a9b      	subs	r3, r3, r2
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	440b      	add	r3, r1
 800370e:	331b      	adds	r3, #27
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d019      	beq.n	800374a <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003716:	78fa      	ldrb	r2, [r7, #3]
 8003718:	6879      	ldr	r1, [r7, #4]
 800371a:	4613      	mov	r3, r2
 800371c:	011b      	lsls	r3, r3, #4
 800371e:	1a9b      	subs	r3, r3, r2
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	440b      	add	r3, r1
 8003724:	331b      	adds	r3, #27
 8003726:	2200      	movs	r2, #0
 8003728:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800372a:	78fb      	ldrb	r3, [r7, #3]
 800372c:	015a      	lsls	r2, r3, #5
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	4413      	add	r3, r2
 8003732:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	78fa      	ldrb	r2, [r7, #3]
 800373a:	0151      	lsls	r1, r2, #5
 800373c:	693a      	ldr	r2, [r7, #16]
 800373e:	440a      	add	r2, r1
 8003740:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003744:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003748:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800374a:	78fb      	ldrb	r3, [r7, #3]
 800374c:	015a      	lsls	r2, r3, #5
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	4413      	add	r3, r2
 8003752:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003756:	461a      	mov	r2, r3
 8003758:	2301      	movs	r3, #1
 800375a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 800375c:	78fa      	ldrb	r2, [r7, #3]
 800375e:	6879      	ldr	r1, [r7, #4]
 8003760:	4613      	mov	r3, r2
 8003762:	011b      	lsls	r3, r3, #4
 8003764:	1a9b      	subs	r3, r3, r2
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	440b      	add	r3, r1
 800376a:	334d      	adds	r3, #77	@ 0x4d
 800376c:	2201      	movs	r2, #1
 800376e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	78fa      	ldrb	r2, [r7, #3]
 8003776:	4611      	mov	r1, r2
 8003778:	4618      	mov	r0, r3
 800377a:	f003 fd7a 	bl	8007272 <USB_HC_Halt>
 800377e:	e365      	b.n	8003e4c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	78fa      	ldrb	r2, [r7, #3]
 8003786:	4611      	mov	r1, r2
 8003788:	4618      	mov	r0, r3
 800378a:	f002 ffce 	bl	800672a <USB_ReadChInterrupts>
 800378e:	4603      	mov	r3, r0
 8003790:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003794:	2b40      	cmp	r3, #64	@ 0x40
 8003796:	d139      	bne.n	800380c <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003798:	78fa      	ldrb	r2, [r7, #3]
 800379a:	6879      	ldr	r1, [r7, #4]
 800379c:	4613      	mov	r3, r2
 800379e:	011b      	lsls	r3, r3, #4
 80037a0:	1a9b      	subs	r3, r3, r2
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	440b      	add	r3, r1
 80037a6:	334d      	adds	r3, #77	@ 0x4d
 80037a8:	2205      	movs	r2, #5
 80037aa:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80037ac:	78fa      	ldrb	r2, [r7, #3]
 80037ae:	6879      	ldr	r1, [r7, #4]
 80037b0:	4613      	mov	r3, r2
 80037b2:	011b      	lsls	r3, r3, #4
 80037b4:	1a9b      	subs	r3, r3, r2
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	440b      	add	r3, r1
 80037ba:	331a      	adds	r3, #26
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d109      	bne.n	80037d6 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80037c2:	78fa      	ldrb	r2, [r7, #3]
 80037c4:	6879      	ldr	r1, [r7, #4]
 80037c6:	4613      	mov	r3, r2
 80037c8:	011b      	lsls	r3, r3, #4
 80037ca:	1a9b      	subs	r3, r3, r2
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	440b      	add	r3, r1
 80037d0:	3319      	adds	r3, #25
 80037d2:	2201      	movs	r2, #1
 80037d4:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80037d6:	78fa      	ldrb	r2, [r7, #3]
 80037d8:	6879      	ldr	r1, [r7, #4]
 80037da:	4613      	mov	r3, r2
 80037dc:	011b      	lsls	r3, r3, #4
 80037de:	1a9b      	subs	r3, r3, r2
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	440b      	add	r3, r1
 80037e4:	3344      	adds	r3, #68	@ 0x44
 80037e6:	2200      	movs	r2, #0
 80037e8:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	78fa      	ldrb	r2, [r7, #3]
 80037f0:	4611      	mov	r1, r2
 80037f2:	4618      	mov	r0, r3
 80037f4:	f003 fd3d 	bl	8007272 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80037f8:	78fb      	ldrb	r3, [r7, #3]
 80037fa:	015a      	lsls	r2, r3, #5
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	4413      	add	r3, r2
 8003800:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003804:	461a      	mov	r2, r3
 8003806:	2340      	movs	r3, #64	@ 0x40
 8003808:	6093      	str	r3, [r2, #8]
 800380a:	e31f      	b.n	8003e4c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	78fa      	ldrb	r2, [r7, #3]
 8003812:	4611      	mov	r1, r2
 8003814:	4618      	mov	r0, r3
 8003816:	f002 ff88 	bl	800672a <USB_ReadChInterrupts>
 800381a:	4603      	mov	r3, r0
 800381c:	f003 0308 	and.w	r3, r3, #8
 8003820:	2b08      	cmp	r3, #8
 8003822:	d11a      	bne.n	800385a <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003824:	78fb      	ldrb	r3, [r7, #3]
 8003826:	015a      	lsls	r2, r3, #5
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	4413      	add	r3, r2
 800382c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003830:	461a      	mov	r2, r3
 8003832:	2308      	movs	r3, #8
 8003834:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003836:	78fa      	ldrb	r2, [r7, #3]
 8003838:	6879      	ldr	r1, [r7, #4]
 800383a:	4613      	mov	r3, r2
 800383c:	011b      	lsls	r3, r3, #4
 800383e:	1a9b      	subs	r3, r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	440b      	add	r3, r1
 8003844:	334d      	adds	r3, #77	@ 0x4d
 8003846:	2206      	movs	r2, #6
 8003848:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	78fa      	ldrb	r2, [r7, #3]
 8003850:	4611      	mov	r1, r2
 8003852:	4618      	mov	r0, r3
 8003854:	f003 fd0d 	bl	8007272 <USB_HC_Halt>
 8003858:	e2f8      	b.n	8003e4c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	78fa      	ldrb	r2, [r7, #3]
 8003860:	4611      	mov	r1, r2
 8003862:	4618      	mov	r0, r3
 8003864:	f002 ff61 	bl	800672a <USB_ReadChInterrupts>
 8003868:	4603      	mov	r3, r0
 800386a:	f003 0310 	and.w	r3, r3, #16
 800386e:	2b10      	cmp	r3, #16
 8003870:	d144      	bne.n	80038fc <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003872:	78fa      	ldrb	r2, [r7, #3]
 8003874:	6879      	ldr	r1, [r7, #4]
 8003876:	4613      	mov	r3, r2
 8003878:	011b      	lsls	r3, r3, #4
 800387a:	1a9b      	subs	r3, r3, r2
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	440b      	add	r3, r1
 8003880:	3344      	adds	r3, #68	@ 0x44
 8003882:	2200      	movs	r2, #0
 8003884:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003886:	78fa      	ldrb	r2, [r7, #3]
 8003888:	6879      	ldr	r1, [r7, #4]
 800388a:	4613      	mov	r3, r2
 800388c:	011b      	lsls	r3, r3, #4
 800388e:	1a9b      	subs	r3, r3, r2
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	440b      	add	r3, r1
 8003894:	334d      	adds	r3, #77	@ 0x4d
 8003896:	2204      	movs	r2, #4
 8003898:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800389a:	78fa      	ldrb	r2, [r7, #3]
 800389c:	6879      	ldr	r1, [r7, #4]
 800389e:	4613      	mov	r3, r2
 80038a0:	011b      	lsls	r3, r3, #4
 80038a2:	1a9b      	subs	r3, r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	440b      	add	r3, r1
 80038a8:	3319      	adds	r3, #25
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d114      	bne.n	80038da <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80038b0:	78fa      	ldrb	r2, [r7, #3]
 80038b2:	6879      	ldr	r1, [r7, #4]
 80038b4:	4613      	mov	r3, r2
 80038b6:	011b      	lsls	r3, r3, #4
 80038b8:	1a9b      	subs	r3, r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	440b      	add	r3, r1
 80038be:	3318      	adds	r3, #24
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d109      	bne.n	80038da <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80038c6:	78fa      	ldrb	r2, [r7, #3]
 80038c8:	6879      	ldr	r1, [r7, #4]
 80038ca:	4613      	mov	r3, r2
 80038cc:	011b      	lsls	r3, r3, #4
 80038ce:	1a9b      	subs	r3, r3, r2
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	440b      	add	r3, r1
 80038d4:	3319      	adds	r3, #25
 80038d6:	2201      	movs	r2, #1
 80038d8:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	78fa      	ldrb	r2, [r7, #3]
 80038e0:	4611      	mov	r1, r2
 80038e2:	4618      	mov	r0, r3
 80038e4:	f003 fcc5 	bl	8007272 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80038e8:	78fb      	ldrb	r3, [r7, #3]
 80038ea:	015a      	lsls	r2, r3, #5
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	4413      	add	r3, r2
 80038f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038f4:	461a      	mov	r2, r3
 80038f6:	2310      	movs	r3, #16
 80038f8:	6093      	str	r3, [r2, #8]
 80038fa:	e2a7      	b.n	8003e4c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	78fa      	ldrb	r2, [r7, #3]
 8003902:	4611      	mov	r1, r2
 8003904:	4618      	mov	r0, r3
 8003906:	f002 ff10 	bl	800672a <USB_ReadChInterrupts>
 800390a:	4603      	mov	r3, r0
 800390c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003910:	2b80      	cmp	r3, #128	@ 0x80
 8003912:	f040 8083 	bne.w	8003a1c <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	799b      	ldrb	r3, [r3, #6]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d111      	bne.n	8003942 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 800391e:	78fa      	ldrb	r2, [r7, #3]
 8003920:	6879      	ldr	r1, [r7, #4]
 8003922:	4613      	mov	r3, r2
 8003924:	011b      	lsls	r3, r3, #4
 8003926:	1a9b      	subs	r3, r3, r2
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	440b      	add	r3, r1
 800392c:	334d      	adds	r3, #77	@ 0x4d
 800392e:	2207      	movs	r2, #7
 8003930:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	78fa      	ldrb	r2, [r7, #3]
 8003938:	4611      	mov	r1, r2
 800393a:	4618      	mov	r0, r3
 800393c:	f003 fc99 	bl	8007272 <USB_HC_Halt>
 8003940:	e062      	b.n	8003a08 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003942:	78fa      	ldrb	r2, [r7, #3]
 8003944:	6879      	ldr	r1, [r7, #4]
 8003946:	4613      	mov	r3, r2
 8003948:	011b      	lsls	r3, r3, #4
 800394a:	1a9b      	subs	r3, r3, r2
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	440b      	add	r3, r1
 8003950:	3344      	adds	r3, #68	@ 0x44
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	1c59      	adds	r1, r3, #1
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	4613      	mov	r3, r2
 800395a:	011b      	lsls	r3, r3, #4
 800395c:	1a9b      	subs	r3, r3, r2
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	4403      	add	r3, r0
 8003962:	3344      	adds	r3, #68	@ 0x44
 8003964:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003966:	78fa      	ldrb	r2, [r7, #3]
 8003968:	6879      	ldr	r1, [r7, #4]
 800396a:	4613      	mov	r3, r2
 800396c:	011b      	lsls	r3, r3, #4
 800396e:	1a9b      	subs	r3, r3, r2
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	440b      	add	r3, r1
 8003974:	3344      	adds	r3, #68	@ 0x44
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2b02      	cmp	r3, #2
 800397a:	d922      	bls.n	80039c2 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800397c:	78fa      	ldrb	r2, [r7, #3]
 800397e:	6879      	ldr	r1, [r7, #4]
 8003980:	4613      	mov	r3, r2
 8003982:	011b      	lsls	r3, r3, #4
 8003984:	1a9b      	subs	r3, r3, r2
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	440b      	add	r3, r1
 800398a:	3344      	adds	r3, #68	@ 0x44
 800398c:	2200      	movs	r2, #0
 800398e:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003990:	78fa      	ldrb	r2, [r7, #3]
 8003992:	6879      	ldr	r1, [r7, #4]
 8003994:	4613      	mov	r3, r2
 8003996:	011b      	lsls	r3, r3, #4
 8003998:	1a9b      	subs	r3, r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	440b      	add	r3, r1
 800399e:	334c      	adds	r3, #76	@ 0x4c
 80039a0:	2204      	movs	r2, #4
 80039a2:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80039a4:	78fa      	ldrb	r2, [r7, #3]
 80039a6:	6879      	ldr	r1, [r7, #4]
 80039a8:	4613      	mov	r3, r2
 80039aa:	011b      	lsls	r3, r3, #4
 80039ac:	1a9b      	subs	r3, r3, r2
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	440b      	add	r3, r1
 80039b2:	334c      	adds	r3, #76	@ 0x4c
 80039b4:	781a      	ldrb	r2, [r3, #0]
 80039b6:	78fb      	ldrb	r3, [r7, #3]
 80039b8:	4619      	mov	r1, r3
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f005 ffb2 	bl	8009924 <HAL_HCD_HC_NotifyURBChange_Callback>
 80039c0:	e022      	b.n	8003a08 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80039c2:	78fa      	ldrb	r2, [r7, #3]
 80039c4:	6879      	ldr	r1, [r7, #4]
 80039c6:	4613      	mov	r3, r2
 80039c8:	011b      	lsls	r3, r3, #4
 80039ca:	1a9b      	subs	r3, r3, r2
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	440b      	add	r3, r1
 80039d0:	334c      	adds	r3, #76	@ 0x4c
 80039d2:	2202      	movs	r2, #2
 80039d4:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80039d6:	78fb      	ldrb	r3, [r7, #3]
 80039d8:	015a      	lsls	r2, r3, #5
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	4413      	add	r3, r2
 80039de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80039ec:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80039f4:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80039f6:	78fb      	ldrb	r3, [r7, #3]
 80039f8:	015a      	lsls	r2, r3, #5
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	4413      	add	r3, r2
 80039fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a02:	461a      	mov	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003a08:	78fb      	ldrb	r3, [r7, #3]
 8003a0a:	015a      	lsls	r2, r3, #5
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	4413      	add	r3, r2
 8003a10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a14:	461a      	mov	r2, r3
 8003a16:	2380      	movs	r3, #128	@ 0x80
 8003a18:	6093      	str	r3, [r2, #8]
 8003a1a:	e217      	b.n	8003e4c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	78fa      	ldrb	r2, [r7, #3]
 8003a22:	4611      	mov	r1, r2
 8003a24:	4618      	mov	r0, r3
 8003a26:	f002 fe80 	bl	800672a <USB_ReadChInterrupts>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a34:	d11b      	bne.n	8003a6e <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003a36:	78fa      	ldrb	r2, [r7, #3]
 8003a38:	6879      	ldr	r1, [r7, #4]
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	011b      	lsls	r3, r3, #4
 8003a3e:	1a9b      	subs	r3, r3, r2
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	440b      	add	r3, r1
 8003a44:	334d      	adds	r3, #77	@ 0x4d
 8003a46:	2209      	movs	r2, #9
 8003a48:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	78fa      	ldrb	r2, [r7, #3]
 8003a50:	4611      	mov	r1, r2
 8003a52:	4618      	mov	r0, r3
 8003a54:	f003 fc0d 	bl	8007272 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003a58:	78fb      	ldrb	r3, [r7, #3]
 8003a5a:	015a      	lsls	r2, r3, #5
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	4413      	add	r3, r2
 8003a60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a64:	461a      	mov	r2, r3
 8003a66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003a6a:	6093      	str	r3, [r2, #8]
 8003a6c:	e1ee      	b.n	8003e4c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	78fa      	ldrb	r2, [r7, #3]
 8003a74:	4611      	mov	r1, r2
 8003a76:	4618      	mov	r0, r3
 8003a78:	f002 fe57 	bl	800672a <USB_ReadChInterrupts>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	f003 0302 	and.w	r3, r3, #2
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	f040 81df 	bne.w	8003e46 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003a88:	78fb      	ldrb	r3, [r7, #3]
 8003a8a:	015a      	lsls	r2, r3, #5
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	4413      	add	r3, r2
 8003a90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a94:	461a      	mov	r2, r3
 8003a96:	2302      	movs	r3, #2
 8003a98:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003a9a:	78fa      	ldrb	r2, [r7, #3]
 8003a9c:	6879      	ldr	r1, [r7, #4]
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	011b      	lsls	r3, r3, #4
 8003aa2:	1a9b      	subs	r3, r3, r2
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	440b      	add	r3, r1
 8003aa8:	334d      	adds	r3, #77	@ 0x4d
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	f040 8093 	bne.w	8003bd8 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003ab2:	78fa      	ldrb	r2, [r7, #3]
 8003ab4:	6879      	ldr	r1, [r7, #4]
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	011b      	lsls	r3, r3, #4
 8003aba:	1a9b      	subs	r3, r3, r2
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	440b      	add	r3, r1
 8003ac0:	334d      	adds	r3, #77	@ 0x4d
 8003ac2:	2202      	movs	r2, #2
 8003ac4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003ac6:	78fa      	ldrb	r2, [r7, #3]
 8003ac8:	6879      	ldr	r1, [r7, #4]
 8003aca:	4613      	mov	r3, r2
 8003acc:	011b      	lsls	r3, r3, #4
 8003ace:	1a9b      	subs	r3, r3, r2
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	440b      	add	r3, r1
 8003ad4:	334c      	adds	r3, #76	@ 0x4c
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003ada:	78fa      	ldrb	r2, [r7, #3]
 8003adc:	6879      	ldr	r1, [r7, #4]
 8003ade:	4613      	mov	r3, r2
 8003ae0:	011b      	lsls	r3, r3, #4
 8003ae2:	1a9b      	subs	r3, r3, r2
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	440b      	add	r3, r1
 8003ae8:	3326      	adds	r3, #38	@ 0x26
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d00b      	beq.n	8003b08 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003af0:	78fa      	ldrb	r2, [r7, #3]
 8003af2:	6879      	ldr	r1, [r7, #4]
 8003af4:	4613      	mov	r3, r2
 8003af6:	011b      	lsls	r3, r3, #4
 8003af8:	1a9b      	subs	r3, r3, r2
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	440b      	add	r3, r1
 8003afe:	3326      	adds	r3, #38	@ 0x26
 8003b00:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003b02:	2b03      	cmp	r3, #3
 8003b04:	f040 8190 	bne.w	8003e28 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	799b      	ldrb	r3, [r3, #6]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d115      	bne.n	8003b3c <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003b10:	78fa      	ldrb	r2, [r7, #3]
 8003b12:	6879      	ldr	r1, [r7, #4]
 8003b14:	4613      	mov	r3, r2
 8003b16:	011b      	lsls	r3, r3, #4
 8003b18:	1a9b      	subs	r3, r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	440b      	add	r3, r1
 8003b1e:	333d      	adds	r3, #61	@ 0x3d
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	78fa      	ldrb	r2, [r7, #3]
 8003b24:	f083 0301 	eor.w	r3, r3, #1
 8003b28:	b2d8      	uxtb	r0, r3
 8003b2a:	6879      	ldr	r1, [r7, #4]
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	011b      	lsls	r3, r3, #4
 8003b30:	1a9b      	subs	r3, r3, r2
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	440b      	add	r3, r1
 8003b36:	333d      	adds	r3, #61	@ 0x3d
 8003b38:	4602      	mov	r2, r0
 8003b3a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	799b      	ldrb	r3, [r3, #6]
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	f040 8171 	bne.w	8003e28 <HCD_HC_OUT_IRQHandler+0x954>
 8003b46:	78fa      	ldrb	r2, [r7, #3]
 8003b48:	6879      	ldr	r1, [r7, #4]
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	011b      	lsls	r3, r3, #4
 8003b4e:	1a9b      	subs	r3, r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	440b      	add	r3, r1
 8003b54:	3334      	adds	r3, #52	@ 0x34
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	f000 8165 	beq.w	8003e28 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003b5e:	78fa      	ldrb	r2, [r7, #3]
 8003b60:	6879      	ldr	r1, [r7, #4]
 8003b62:	4613      	mov	r3, r2
 8003b64:	011b      	lsls	r3, r3, #4
 8003b66:	1a9b      	subs	r3, r3, r2
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	440b      	add	r3, r1
 8003b6c:	3334      	adds	r3, #52	@ 0x34
 8003b6e:	6819      	ldr	r1, [r3, #0]
 8003b70:	78fa      	ldrb	r2, [r7, #3]
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	4613      	mov	r3, r2
 8003b76:	011b      	lsls	r3, r3, #4
 8003b78:	1a9b      	subs	r3, r3, r2
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	4403      	add	r3, r0
 8003b7e:	3328      	adds	r3, #40	@ 0x28
 8003b80:	881b      	ldrh	r3, [r3, #0]
 8003b82:	440b      	add	r3, r1
 8003b84:	1e59      	subs	r1, r3, #1
 8003b86:	78fa      	ldrb	r2, [r7, #3]
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	011b      	lsls	r3, r3, #4
 8003b8e:	1a9b      	subs	r3, r3, r2
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	4403      	add	r3, r0
 8003b94:	3328      	adds	r3, #40	@ 0x28
 8003b96:	881b      	ldrh	r3, [r3, #0]
 8003b98:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b9c:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	f003 0301 	and.w	r3, r3, #1
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	f000 813f 	beq.w	8003e28 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003baa:	78fa      	ldrb	r2, [r7, #3]
 8003bac:	6879      	ldr	r1, [r7, #4]
 8003bae:	4613      	mov	r3, r2
 8003bb0:	011b      	lsls	r3, r3, #4
 8003bb2:	1a9b      	subs	r3, r3, r2
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	440b      	add	r3, r1
 8003bb8:	333d      	adds	r3, #61	@ 0x3d
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	78fa      	ldrb	r2, [r7, #3]
 8003bbe:	f083 0301 	eor.w	r3, r3, #1
 8003bc2:	b2d8      	uxtb	r0, r3
 8003bc4:	6879      	ldr	r1, [r7, #4]
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	011b      	lsls	r3, r3, #4
 8003bca:	1a9b      	subs	r3, r3, r2
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	440b      	add	r3, r1
 8003bd0:	333d      	adds	r3, #61	@ 0x3d
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	701a      	strb	r2, [r3, #0]
 8003bd6:	e127      	b.n	8003e28 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003bd8:	78fa      	ldrb	r2, [r7, #3]
 8003bda:	6879      	ldr	r1, [r7, #4]
 8003bdc:	4613      	mov	r3, r2
 8003bde:	011b      	lsls	r3, r3, #4
 8003be0:	1a9b      	subs	r3, r3, r2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	440b      	add	r3, r1
 8003be6:	334d      	adds	r3, #77	@ 0x4d
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	2b03      	cmp	r3, #3
 8003bec:	d120      	bne.n	8003c30 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003bee:	78fa      	ldrb	r2, [r7, #3]
 8003bf0:	6879      	ldr	r1, [r7, #4]
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	011b      	lsls	r3, r3, #4
 8003bf6:	1a9b      	subs	r3, r3, r2
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	440b      	add	r3, r1
 8003bfc:	334d      	adds	r3, #77	@ 0x4d
 8003bfe:	2202      	movs	r2, #2
 8003c00:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003c02:	78fa      	ldrb	r2, [r7, #3]
 8003c04:	6879      	ldr	r1, [r7, #4]
 8003c06:	4613      	mov	r3, r2
 8003c08:	011b      	lsls	r3, r3, #4
 8003c0a:	1a9b      	subs	r3, r3, r2
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	440b      	add	r3, r1
 8003c10:	331b      	adds	r3, #27
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	f040 8107 	bne.w	8003e28 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003c1a:	78fa      	ldrb	r2, [r7, #3]
 8003c1c:	6879      	ldr	r1, [r7, #4]
 8003c1e:	4613      	mov	r3, r2
 8003c20:	011b      	lsls	r3, r3, #4
 8003c22:	1a9b      	subs	r3, r3, r2
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	440b      	add	r3, r1
 8003c28:	334c      	adds	r3, #76	@ 0x4c
 8003c2a:	2202      	movs	r2, #2
 8003c2c:	701a      	strb	r2, [r3, #0]
 8003c2e:	e0fb      	b.n	8003e28 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003c30:	78fa      	ldrb	r2, [r7, #3]
 8003c32:	6879      	ldr	r1, [r7, #4]
 8003c34:	4613      	mov	r3, r2
 8003c36:	011b      	lsls	r3, r3, #4
 8003c38:	1a9b      	subs	r3, r3, r2
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	440b      	add	r3, r1
 8003c3e:	334d      	adds	r3, #77	@ 0x4d
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	2b04      	cmp	r3, #4
 8003c44:	d13a      	bne.n	8003cbc <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003c46:	78fa      	ldrb	r2, [r7, #3]
 8003c48:	6879      	ldr	r1, [r7, #4]
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	011b      	lsls	r3, r3, #4
 8003c4e:	1a9b      	subs	r3, r3, r2
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	440b      	add	r3, r1
 8003c54:	334d      	adds	r3, #77	@ 0x4d
 8003c56:	2202      	movs	r2, #2
 8003c58:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003c5a:	78fa      	ldrb	r2, [r7, #3]
 8003c5c:	6879      	ldr	r1, [r7, #4]
 8003c5e:	4613      	mov	r3, r2
 8003c60:	011b      	lsls	r3, r3, #4
 8003c62:	1a9b      	subs	r3, r3, r2
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	440b      	add	r3, r1
 8003c68:	334c      	adds	r3, #76	@ 0x4c
 8003c6a:	2202      	movs	r2, #2
 8003c6c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003c6e:	78fa      	ldrb	r2, [r7, #3]
 8003c70:	6879      	ldr	r1, [r7, #4]
 8003c72:	4613      	mov	r3, r2
 8003c74:	011b      	lsls	r3, r3, #4
 8003c76:	1a9b      	subs	r3, r3, r2
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	440b      	add	r3, r1
 8003c7c:	331b      	adds	r3, #27
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	f040 80d1 	bne.w	8003e28 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003c86:	78fa      	ldrb	r2, [r7, #3]
 8003c88:	6879      	ldr	r1, [r7, #4]
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	011b      	lsls	r3, r3, #4
 8003c8e:	1a9b      	subs	r3, r3, r2
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	440b      	add	r3, r1
 8003c94:	331b      	adds	r3, #27
 8003c96:	2200      	movs	r2, #0
 8003c98:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003c9a:	78fb      	ldrb	r3, [r7, #3]
 8003c9c:	015a      	lsls	r2, r3, #5
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	4413      	add	r3, r2
 8003ca2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	78fa      	ldrb	r2, [r7, #3]
 8003caa:	0151      	lsls	r1, r2, #5
 8003cac:	693a      	ldr	r2, [r7, #16]
 8003cae:	440a      	add	r2, r1
 8003cb0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003cb4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cb8:	6053      	str	r3, [r2, #4]
 8003cba:	e0b5      	b.n	8003e28 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003cbc:	78fa      	ldrb	r2, [r7, #3]
 8003cbe:	6879      	ldr	r1, [r7, #4]
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	011b      	lsls	r3, r3, #4
 8003cc4:	1a9b      	subs	r3, r3, r2
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	440b      	add	r3, r1
 8003cca:	334d      	adds	r3, #77	@ 0x4d
 8003ccc:	781b      	ldrb	r3, [r3, #0]
 8003cce:	2b05      	cmp	r3, #5
 8003cd0:	d114      	bne.n	8003cfc <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003cd2:	78fa      	ldrb	r2, [r7, #3]
 8003cd4:	6879      	ldr	r1, [r7, #4]
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	011b      	lsls	r3, r3, #4
 8003cda:	1a9b      	subs	r3, r3, r2
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	440b      	add	r3, r1
 8003ce0:	334d      	adds	r3, #77	@ 0x4d
 8003ce2:	2202      	movs	r2, #2
 8003ce4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003ce6:	78fa      	ldrb	r2, [r7, #3]
 8003ce8:	6879      	ldr	r1, [r7, #4]
 8003cea:	4613      	mov	r3, r2
 8003cec:	011b      	lsls	r3, r3, #4
 8003cee:	1a9b      	subs	r3, r3, r2
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	440b      	add	r3, r1
 8003cf4:	334c      	adds	r3, #76	@ 0x4c
 8003cf6:	2202      	movs	r2, #2
 8003cf8:	701a      	strb	r2, [r3, #0]
 8003cfa:	e095      	b.n	8003e28 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003cfc:	78fa      	ldrb	r2, [r7, #3]
 8003cfe:	6879      	ldr	r1, [r7, #4]
 8003d00:	4613      	mov	r3, r2
 8003d02:	011b      	lsls	r3, r3, #4
 8003d04:	1a9b      	subs	r3, r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	440b      	add	r3, r1
 8003d0a:	334d      	adds	r3, #77	@ 0x4d
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	2b06      	cmp	r3, #6
 8003d10:	d114      	bne.n	8003d3c <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003d12:	78fa      	ldrb	r2, [r7, #3]
 8003d14:	6879      	ldr	r1, [r7, #4]
 8003d16:	4613      	mov	r3, r2
 8003d18:	011b      	lsls	r3, r3, #4
 8003d1a:	1a9b      	subs	r3, r3, r2
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	440b      	add	r3, r1
 8003d20:	334d      	adds	r3, #77	@ 0x4d
 8003d22:	2202      	movs	r2, #2
 8003d24:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003d26:	78fa      	ldrb	r2, [r7, #3]
 8003d28:	6879      	ldr	r1, [r7, #4]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	011b      	lsls	r3, r3, #4
 8003d2e:	1a9b      	subs	r3, r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	440b      	add	r3, r1
 8003d34:	334c      	adds	r3, #76	@ 0x4c
 8003d36:	2205      	movs	r2, #5
 8003d38:	701a      	strb	r2, [r3, #0]
 8003d3a:	e075      	b.n	8003e28 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003d3c:	78fa      	ldrb	r2, [r7, #3]
 8003d3e:	6879      	ldr	r1, [r7, #4]
 8003d40:	4613      	mov	r3, r2
 8003d42:	011b      	lsls	r3, r3, #4
 8003d44:	1a9b      	subs	r3, r3, r2
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	440b      	add	r3, r1
 8003d4a:	334d      	adds	r3, #77	@ 0x4d
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	2b07      	cmp	r3, #7
 8003d50:	d00a      	beq.n	8003d68 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003d52:	78fa      	ldrb	r2, [r7, #3]
 8003d54:	6879      	ldr	r1, [r7, #4]
 8003d56:	4613      	mov	r3, r2
 8003d58:	011b      	lsls	r3, r3, #4
 8003d5a:	1a9b      	subs	r3, r3, r2
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	440b      	add	r3, r1
 8003d60:	334d      	adds	r3, #77	@ 0x4d
 8003d62:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003d64:	2b09      	cmp	r3, #9
 8003d66:	d170      	bne.n	8003e4a <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003d68:	78fa      	ldrb	r2, [r7, #3]
 8003d6a:	6879      	ldr	r1, [r7, #4]
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	011b      	lsls	r3, r3, #4
 8003d70:	1a9b      	subs	r3, r3, r2
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	440b      	add	r3, r1
 8003d76:	334d      	adds	r3, #77	@ 0x4d
 8003d78:	2202      	movs	r2, #2
 8003d7a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003d7c:	78fa      	ldrb	r2, [r7, #3]
 8003d7e:	6879      	ldr	r1, [r7, #4]
 8003d80:	4613      	mov	r3, r2
 8003d82:	011b      	lsls	r3, r3, #4
 8003d84:	1a9b      	subs	r3, r3, r2
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	440b      	add	r3, r1
 8003d8a:	3344      	adds	r3, #68	@ 0x44
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	1c59      	adds	r1, r3, #1
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	4613      	mov	r3, r2
 8003d94:	011b      	lsls	r3, r3, #4
 8003d96:	1a9b      	subs	r3, r3, r2
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	4403      	add	r3, r0
 8003d9c:	3344      	adds	r3, #68	@ 0x44
 8003d9e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003da0:	78fa      	ldrb	r2, [r7, #3]
 8003da2:	6879      	ldr	r1, [r7, #4]
 8003da4:	4613      	mov	r3, r2
 8003da6:	011b      	lsls	r3, r3, #4
 8003da8:	1a9b      	subs	r3, r3, r2
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	440b      	add	r3, r1
 8003dae:	3344      	adds	r3, #68	@ 0x44
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d914      	bls.n	8003de0 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003db6:	78fa      	ldrb	r2, [r7, #3]
 8003db8:	6879      	ldr	r1, [r7, #4]
 8003dba:	4613      	mov	r3, r2
 8003dbc:	011b      	lsls	r3, r3, #4
 8003dbe:	1a9b      	subs	r3, r3, r2
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	440b      	add	r3, r1
 8003dc4:	3344      	adds	r3, #68	@ 0x44
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003dca:	78fa      	ldrb	r2, [r7, #3]
 8003dcc:	6879      	ldr	r1, [r7, #4]
 8003dce:	4613      	mov	r3, r2
 8003dd0:	011b      	lsls	r3, r3, #4
 8003dd2:	1a9b      	subs	r3, r3, r2
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	440b      	add	r3, r1
 8003dd8:	334c      	adds	r3, #76	@ 0x4c
 8003dda:	2204      	movs	r2, #4
 8003ddc:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003dde:	e022      	b.n	8003e26 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003de0:	78fa      	ldrb	r2, [r7, #3]
 8003de2:	6879      	ldr	r1, [r7, #4]
 8003de4:	4613      	mov	r3, r2
 8003de6:	011b      	lsls	r3, r3, #4
 8003de8:	1a9b      	subs	r3, r3, r2
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	440b      	add	r3, r1
 8003dee:	334c      	adds	r3, #76	@ 0x4c
 8003df0:	2202      	movs	r2, #2
 8003df2:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003df4:	78fb      	ldrb	r3, [r7, #3]
 8003df6:	015a      	lsls	r2, r3, #5
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	4413      	add	r3, r2
 8003dfc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003e0a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003e12:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003e14:	78fb      	ldrb	r3, [r7, #3]
 8003e16:	015a      	lsls	r2, r3, #5
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	4413      	add	r3, r2
 8003e1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e20:	461a      	mov	r2, r3
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003e26:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003e28:	78fa      	ldrb	r2, [r7, #3]
 8003e2a:	6879      	ldr	r1, [r7, #4]
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	011b      	lsls	r3, r3, #4
 8003e30:	1a9b      	subs	r3, r3, r2
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	440b      	add	r3, r1
 8003e36:	334c      	adds	r3, #76	@ 0x4c
 8003e38:	781a      	ldrb	r2, [r3, #0]
 8003e3a:	78fb      	ldrb	r3, [r7, #3]
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f005 fd70 	bl	8009924 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003e44:	e002      	b.n	8003e4c <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003e46:	bf00      	nop
 8003e48:	e000      	b.n	8003e4c <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8003e4a:	bf00      	nop
  }
}
 8003e4c:	3718      	adds	r7, #24
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003e52:	b580      	push	{r7, lr}
 8003e54:	b08a      	sub	sp, #40	@ 0x28
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e62:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	6a1b      	ldr	r3, [r3, #32]
 8003e6a:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	f003 030f 	and.w	r3, r3, #15
 8003e72:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	0c5b      	lsrs	r3, r3, #17
 8003e78:	f003 030f 	and.w	r3, r3, #15
 8003e7c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	091b      	lsrs	r3, r3, #4
 8003e82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e86:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d004      	beq.n	8003e98 <HCD_RXQLVL_IRQHandler+0x46>
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	2b05      	cmp	r3, #5
 8003e92:	f000 80b6 	beq.w	8004002 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003e96:	e0b7      	b.n	8004008 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	f000 80b3 	beq.w	8004006 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003ea0:	6879      	ldr	r1, [r7, #4]
 8003ea2:	69ba      	ldr	r2, [r7, #24]
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	011b      	lsls	r3, r3, #4
 8003ea8:	1a9b      	subs	r3, r3, r2
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	440b      	add	r3, r1
 8003eae:	332c      	adds	r3, #44	@ 0x2c
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	f000 80a7 	beq.w	8004006 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003eb8:	6879      	ldr	r1, [r7, #4]
 8003eba:	69ba      	ldr	r2, [r7, #24]
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	011b      	lsls	r3, r3, #4
 8003ec0:	1a9b      	subs	r3, r3, r2
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	440b      	add	r3, r1
 8003ec6:	3338      	adds	r3, #56	@ 0x38
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	18d1      	adds	r1, r2, r3
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	69ba      	ldr	r2, [r7, #24]
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	011b      	lsls	r3, r3, #4
 8003ed6:	1a9b      	subs	r3, r3, r2
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	4403      	add	r3, r0
 8003edc:	3334      	adds	r3, #52	@ 0x34
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4299      	cmp	r1, r3
 8003ee2:	f200 8083 	bhi.w	8003fec <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6818      	ldr	r0, [r3, #0]
 8003eea:	6879      	ldr	r1, [r7, #4]
 8003eec:	69ba      	ldr	r2, [r7, #24]
 8003eee:	4613      	mov	r3, r2
 8003ef0:	011b      	lsls	r3, r3, #4
 8003ef2:	1a9b      	subs	r3, r3, r2
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	440b      	add	r3, r1
 8003ef8:	332c      	adds	r3, #44	@ 0x2c
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	693a      	ldr	r2, [r7, #16]
 8003efe:	b292      	uxth	r2, r2
 8003f00:	4619      	mov	r1, r3
 8003f02:	f002 fba7 	bl	8006654 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003f06:	6879      	ldr	r1, [r7, #4]
 8003f08:	69ba      	ldr	r2, [r7, #24]
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	011b      	lsls	r3, r3, #4
 8003f0e:	1a9b      	subs	r3, r3, r2
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	440b      	add	r3, r1
 8003f14:	332c      	adds	r3, #44	@ 0x2c
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	18d1      	adds	r1, r2, r3
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	69ba      	ldr	r2, [r7, #24]
 8003f20:	4613      	mov	r3, r2
 8003f22:	011b      	lsls	r3, r3, #4
 8003f24:	1a9b      	subs	r3, r3, r2
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	4403      	add	r3, r0
 8003f2a:	332c      	adds	r3, #44	@ 0x2c
 8003f2c:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8003f2e:	6879      	ldr	r1, [r7, #4]
 8003f30:	69ba      	ldr	r2, [r7, #24]
 8003f32:	4613      	mov	r3, r2
 8003f34:	011b      	lsls	r3, r3, #4
 8003f36:	1a9b      	subs	r3, r3, r2
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	440b      	add	r3, r1
 8003f3c:	3338      	adds	r3, #56	@ 0x38
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	18d1      	adds	r1, r2, r3
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	69ba      	ldr	r2, [r7, #24]
 8003f48:	4613      	mov	r3, r2
 8003f4a:	011b      	lsls	r3, r3, #4
 8003f4c:	1a9b      	subs	r3, r3, r2
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	4403      	add	r3, r0
 8003f52:	3338      	adds	r3, #56	@ 0x38
 8003f54:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	015a      	lsls	r2, r3, #5
 8003f5a:	6a3b      	ldr	r3, [r7, #32]
 8003f5c:	4413      	add	r3, r2
 8003f5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f62:	691b      	ldr	r3, [r3, #16]
 8003f64:	0cdb      	lsrs	r3, r3, #19
 8003f66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f6a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003f6c:	6879      	ldr	r1, [r7, #4]
 8003f6e:	69ba      	ldr	r2, [r7, #24]
 8003f70:	4613      	mov	r3, r2
 8003f72:	011b      	lsls	r3, r3, #4
 8003f74:	1a9b      	subs	r3, r3, r2
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	440b      	add	r3, r1
 8003f7a:	3328      	adds	r3, #40	@ 0x28
 8003f7c:	881b      	ldrh	r3, [r3, #0]
 8003f7e:	461a      	mov	r2, r3
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d13f      	bne.n	8004006 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d03c      	beq.n	8004006 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	015a      	lsls	r2, r3, #5
 8003f90:	6a3b      	ldr	r3, [r7, #32]
 8003f92:	4413      	add	r3, r2
 8003f94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003fa2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003faa:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	015a      	lsls	r2, r3, #5
 8003fb0:	6a3b      	ldr	r3, [r7, #32]
 8003fb2:	4413      	add	r3, r2
 8003fb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fb8:	461a      	mov	r2, r3
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003fbe:	6879      	ldr	r1, [r7, #4]
 8003fc0:	69ba      	ldr	r2, [r7, #24]
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	011b      	lsls	r3, r3, #4
 8003fc6:	1a9b      	subs	r3, r3, r2
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	440b      	add	r3, r1
 8003fcc:	333c      	adds	r3, #60	@ 0x3c
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	f083 0301 	eor.w	r3, r3, #1
 8003fd4:	b2d8      	uxtb	r0, r3
 8003fd6:	6879      	ldr	r1, [r7, #4]
 8003fd8:	69ba      	ldr	r2, [r7, #24]
 8003fda:	4613      	mov	r3, r2
 8003fdc:	011b      	lsls	r3, r3, #4
 8003fde:	1a9b      	subs	r3, r3, r2
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	440b      	add	r3, r1
 8003fe4:	333c      	adds	r3, #60	@ 0x3c
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	701a      	strb	r2, [r3, #0]
      break;
 8003fea:	e00c      	b.n	8004006 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003fec:	6879      	ldr	r1, [r7, #4]
 8003fee:	69ba      	ldr	r2, [r7, #24]
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	011b      	lsls	r3, r3, #4
 8003ff4:	1a9b      	subs	r3, r3, r2
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	440b      	add	r3, r1
 8003ffa:	334c      	adds	r3, #76	@ 0x4c
 8003ffc:	2204      	movs	r2, #4
 8003ffe:	701a      	strb	r2, [r3, #0]
      break;
 8004000:	e001      	b.n	8004006 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8004002:	bf00      	nop
 8004004:	e000      	b.n	8004008 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8004006:	bf00      	nop
  }
}
 8004008:	bf00      	nop
 800400a:	3728      	adds	r7, #40	@ 0x28
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b086      	sub	sp, #24
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800403c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f003 0302 	and.w	r3, r3, #2
 8004044:	2b02      	cmp	r3, #2
 8004046:	d10b      	bne.n	8004060 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f003 0301 	and.w	r3, r3, #1
 800404e:	2b01      	cmp	r3, #1
 8004050:	d102      	bne.n	8004058 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f005 fc4a 	bl	80098ec <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	f043 0302 	orr.w	r3, r3, #2
 800405e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f003 0308 	and.w	r3, r3, #8
 8004066:	2b08      	cmp	r3, #8
 8004068:	d132      	bne.n	80040d0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	f043 0308 	orr.w	r3, r3, #8
 8004070:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f003 0304 	and.w	r3, r3, #4
 8004078:	2b04      	cmp	r3, #4
 800407a:	d126      	bne.n	80040ca <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	7a5b      	ldrb	r3, [r3, #9]
 8004080:	2b02      	cmp	r3, #2
 8004082:	d113      	bne.n	80040ac <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800408a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800408e:	d106      	bne.n	800409e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2102      	movs	r1, #2
 8004096:	4618      	mov	r0, r3
 8004098:	f002 fc6c 	bl	8006974 <USB_InitFSLSPClkSel>
 800409c:	e011      	b.n	80040c2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2101      	movs	r1, #1
 80040a4:	4618      	mov	r0, r3
 80040a6:	f002 fc65 	bl	8006974 <USB_InitFSLSPClkSel>
 80040aa:	e00a      	b.n	80040c2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	79db      	ldrb	r3, [r3, #7]
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d106      	bne.n	80040c2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80040ba:	461a      	mov	r2, r3
 80040bc:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80040c0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f005 fc3c 	bl	8009940 <HAL_HCD_PortEnabled_Callback>
 80040c8:	e002      	b.n	80040d0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f005 fc46 	bl	800995c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f003 0320 	and.w	r3, r3, #32
 80040d6:	2b20      	cmp	r3, #32
 80040d8:	d103      	bne.n	80040e2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	f043 0320 	orr.w	r3, r3, #32
 80040e0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80040e8:	461a      	mov	r2, r3
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	6013      	str	r3, [r2, #0]
}
 80040ee:	bf00      	nop
 80040f0:	3718      	adds	r7, #24
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
	...

080040f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d101      	bne.n	800410a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e12b      	b.n	8004362 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004110:	b2db      	uxtb	r3, r3
 8004112:	2b00      	cmp	r3, #0
 8004114:	d106      	bne.n	8004124 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f7fd f98a 	bl	8001438 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2224      	movs	r2, #36	@ 0x24
 8004128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f022 0201 	bic.w	r2, r2, #1
 800413a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800414a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800415a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800415c:	f000 fd80 	bl	8004c60 <HAL_RCC_GetPCLK1Freq>
 8004160:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	4a81      	ldr	r2, [pc, #516]	@ (800436c <HAL_I2C_Init+0x274>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d807      	bhi.n	800417c <HAL_I2C_Init+0x84>
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	4a80      	ldr	r2, [pc, #512]	@ (8004370 <HAL_I2C_Init+0x278>)
 8004170:	4293      	cmp	r3, r2
 8004172:	bf94      	ite	ls
 8004174:	2301      	movls	r3, #1
 8004176:	2300      	movhi	r3, #0
 8004178:	b2db      	uxtb	r3, r3
 800417a:	e006      	b.n	800418a <HAL_I2C_Init+0x92>
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	4a7d      	ldr	r2, [pc, #500]	@ (8004374 <HAL_I2C_Init+0x27c>)
 8004180:	4293      	cmp	r3, r2
 8004182:	bf94      	ite	ls
 8004184:	2301      	movls	r3, #1
 8004186:	2300      	movhi	r3, #0
 8004188:	b2db      	uxtb	r3, r3
 800418a:	2b00      	cmp	r3, #0
 800418c:	d001      	beq.n	8004192 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e0e7      	b.n	8004362 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	4a78      	ldr	r2, [pc, #480]	@ (8004378 <HAL_I2C_Init+0x280>)
 8004196:	fba2 2303 	umull	r2, r3, r2, r3
 800419a:	0c9b      	lsrs	r3, r3, #18
 800419c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68ba      	ldr	r2, [r7, #8]
 80041ae:	430a      	orrs	r2, r1
 80041b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	6a1b      	ldr	r3, [r3, #32]
 80041b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	4a6a      	ldr	r2, [pc, #424]	@ (800436c <HAL_I2C_Init+0x274>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d802      	bhi.n	80041cc <HAL_I2C_Init+0xd4>
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	3301      	adds	r3, #1
 80041ca:	e009      	b.n	80041e0 <HAL_I2C_Init+0xe8>
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80041d2:	fb02 f303 	mul.w	r3, r2, r3
 80041d6:	4a69      	ldr	r2, [pc, #420]	@ (800437c <HAL_I2C_Init+0x284>)
 80041d8:	fba2 2303 	umull	r2, r3, r2, r3
 80041dc:	099b      	lsrs	r3, r3, #6
 80041de:	3301      	adds	r3, #1
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	6812      	ldr	r2, [r2, #0]
 80041e4:	430b      	orrs	r3, r1
 80041e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	69db      	ldr	r3, [r3, #28]
 80041ee:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80041f2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	495c      	ldr	r1, [pc, #368]	@ (800436c <HAL_I2C_Init+0x274>)
 80041fc:	428b      	cmp	r3, r1
 80041fe:	d819      	bhi.n	8004234 <HAL_I2C_Init+0x13c>
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	1e59      	subs	r1, r3, #1
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	005b      	lsls	r3, r3, #1
 800420a:	fbb1 f3f3 	udiv	r3, r1, r3
 800420e:	1c59      	adds	r1, r3, #1
 8004210:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004214:	400b      	ands	r3, r1
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00a      	beq.n	8004230 <HAL_I2C_Init+0x138>
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	1e59      	subs	r1, r3, #1
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	005b      	lsls	r3, r3, #1
 8004224:	fbb1 f3f3 	udiv	r3, r1, r3
 8004228:	3301      	adds	r3, #1
 800422a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800422e:	e051      	b.n	80042d4 <HAL_I2C_Init+0x1dc>
 8004230:	2304      	movs	r3, #4
 8004232:	e04f      	b.n	80042d4 <HAL_I2C_Init+0x1dc>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d111      	bne.n	8004260 <HAL_I2C_Init+0x168>
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	1e58      	subs	r0, r3, #1
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6859      	ldr	r1, [r3, #4]
 8004244:	460b      	mov	r3, r1
 8004246:	005b      	lsls	r3, r3, #1
 8004248:	440b      	add	r3, r1
 800424a:	fbb0 f3f3 	udiv	r3, r0, r3
 800424e:	3301      	adds	r3, #1
 8004250:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004254:	2b00      	cmp	r3, #0
 8004256:	bf0c      	ite	eq
 8004258:	2301      	moveq	r3, #1
 800425a:	2300      	movne	r3, #0
 800425c:	b2db      	uxtb	r3, r3
 800425e:	e012      	b.n	8004286 <HAL_I2C_Init+0x18e>
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	1e58      	subs	r0, r3, #1
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6859      	ldr	r1, [r3, #4]
 8004268:	460b      	mov	r3, r1
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	440b      	add	r3, r1
 800426e:	0099      	lsls	r1, r3, #2
 8004270:	440b      	add	r3, r1
 8004272:	fbb0 f3f3 	udiv	r3, r0, r3
 8004276:	3301      	adds	r3, #1
 8004278:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800427c:	2b00      	cmp	r3, #0
 800427e:	bf0c      	ite	eq
 8004280:	2301      	moveq	r3, #1
 8004282:	2300      	movne	r3, #0
 8004284:	b2db      	uxtb	r3, r3
 8004286:	2b00      	cmp	r3, #0
 8004288:	d001      	beq.n	800428e <HAL_I2C_Init+0x196>
 800428a:	2301      	movs	r3, #1
 800428c:	e022      	b.n	80042d4 <HAL_I2C_Init+0x1dc>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d10e      	bne.n	80042b4 <HAL_I2C_Init+0x1bc>
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	1e58      	subs	r0, r3, #1
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6859      	ldr	r1, [r3, #4]
 800429e:	460b      	mov	r3, r1
 80042a0:	005b      	lsls	r3, r3, #1
 80042a2:	440b      	add	r3, r1
 80042a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80042a8:	3301      	adds	r3, #1
 80042aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80042b2:	e00f      	b.n	80042d4 <HAL_I2C_Init+0x1dc>
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	1e58      	subs	r0, r3, #1
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6859      	ldr	r1, [r3, #4]
 80042bc:	460b      	mov	r3, r1
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	440b      	add	r3, r1
 80042c2:	0099      	lsls	r1, r3, #2
 80042c4:	440b      	add	r3, r1
 80042c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80042ca:	3301      	adds	r3, #1
 80042cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80042d4:	6879      	ldr	r1, [r7, #4]
 80042d6:	6809      	ldr	r1, [r1, #0]
 80042d8:	4313      	orrs	r3, r2
 80042da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	69da      	ldr	r2, [r3, #28]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a1b      	ldr	r3, [r3, #32]
 80042ee:	431a      	orrs	r2, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	430a      	orrs	r2, r1
 80042f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004302:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	6911      	ldr	r1, [r2, #16]
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	68d2      	ldr	r2, [r2, #12]
 800430e:	4311      	orrs	r1, r2
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	6812      	ldr	r2, [r2, #0]
 8004314:	430b      	orrs	r3, r1
 8004316:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	695a      	ldr	r2, [r3, #20]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	699b      	ldr	r3, [r3, #24]
 800432a:	431a      	orrs	r2, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	430a      	orrs	r2, r1
 8004332:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f042 0201 	orr.w	r2, r2, #1
 8004342:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2220      	movs	r2, #32
 800434e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	3710      	adds	r7, #16
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	000186a0 	.word	0x000186a0
 8004370:	001e847f 	.word	0x001e847f
 8004374:	003d08ff 	.word	0x003d08ff
 8004378:	431bde83 	.word	0x431bde83
 800437c:	10624dd3 	.word	0x10624dd3

08004380 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b086      	sub	sp, #24
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d101      	bne.n	8004392 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e267      	b.n	8004862 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0301 	and.w	r3, r3, #1
 800439a:	2b00      	cmp	r3, #0
 800439c:	d075      	beq.n	800448a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800439e:	4b88      	ldr	r3, [pc, #544]	@ (80045c0 <HAL_RCC_OscConfig+0x240>)
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f003 030c 	and.w	r3, r3, #12
 80043a6:	2b04      	cmp	r3, #4
 80043a8:	d00c      	beq.n	80043c4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043aa:	4b85      	ldr	r3, [pc, #532]	@ (80045c0 <HAL_RCC_OscConfig+0x240>)
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80043b2:	2b08      	cmp	r3, #8
 80043b4:	d112      	bne.n	80043dc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043b6:	4b82      	ldr	r3, [pc, #520]	@ (80045c0 <HAL_RCC_OscConfig+0x240>)
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80043c2:	d10b      	bne.n	80043dc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043c4:	4b7e      	ldr	r3, [pc, #504]	@ (80045c0 <HAL_RCC_OscConfig+0x240>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d05b      	beq.n	8004488 <HAL_RCC_OscConfig+0x108>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d157      	bne.n	8004488 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e242      	b.n	8004862 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043e4:	d106      	bne.n	80043f4 <HAL_RCC_OscConfig+0x74>
 80043e6:	4b76      	ldr	r3, [pc, #472]	@ (80045c0 <HAL_RCC_OscConfig+0x240>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a75      	ldr	r2, [pc, #468]	@ (80045c0 <HAL_RCC_OscConfig+0x240>)
 80043ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043f0:	6013      	str	r3, [r2, #0]
 80043f2:	e01d      	b.n	8004430 <HAL_RCC_OscConfig+0xb0>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80043fc:	d10c      	bne.n	8004418 <HAL_RCC_OscConfig+0x98>
 80043fe:	4b70      	ldr	r3, [pc, #448]	@ (80045c0 <HAL_RCC_OscConfig+0x240>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a6f      	ldr	r2, [pc, #444]	@ (80045c0 <HAL_RCC_OscConfig+0x240>)
 8004404:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004408:	6013      	str	r3, [r2, #0]
 800440a:	4b6d      	ldr	r3, [pc, #436]	@ (80045c0 <HAL_RCC_OscConfig+0x240>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a6c      	ldr	r2, [pc, #432]	@ (80045c0 <HAL_RCC_OscConfig+0x240>)
 8004410:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004414:	6013      	str	r3, [r2, #0]
 8004416:	e00b      	b.n	8004430 <HAL_RCC_OscConfig+0xb0>
 8004418:	4b69      	ldr	r3, [pc, #420]	@ (80045c0 <HAL_RCC_OscConfig+0x240>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a68      	ldr	r2, [pc, #416]	@ (80045c0 <HAL_RCC_OscConfig+0x240>)
 800441e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004422:	6013      	str	r3, [r2, #0]
 8004424:	4b66      	ldr	r3, [pc, #408]	@ (80045c0 <HAL_RCC_OscConfig+0x240>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a65      	ldr	r2, [pc, #404]	@ (80045c0 <HAL_RCC_OscConfig+0x240>)
 800442a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800442e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d013      	beq.n	8004460 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004438:	f7fd fa32 	bl	80018a0 <HAL_GetTick>
 800443c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800443e:	e008      	b.n	8004452 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004440:	f7fd fa2e 	bl	80018a0 <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	2b64      	cmp	r3, #100	@ 0x64
 800444c:	d901      	bls.n	8004452 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e207      	b.n	8004862 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004452:	4b5b      	ldr	r3, [pc, #364]	@ (80045c0 <HAL_RCC_OscConfig+0x240>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d0f0      	beq.n	8004440 <HAL_RCC_OscConfig+0xc0>
 800445e:	e014      	b.n	800448a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004460:	f7fd fa1e 	bl	80018a0 <HAL_GetTick>
 8004464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004466:	e008      	b.n	800447a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004468:	f7fd fa1a 	bl	80018a0 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	2b64      	cmp	r3, #100	@ 0x64
 8004474:	d901      	bls.n	800447a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e1f3      	b.n	8004862 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800447a:	4b51      	ldr	r3, [pc, #324]	@ (80045c0 <HAL_RCC_OscConfig+0x240>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d1f0      	bne.n	8004468 <HAL_RCC_OscConfig+0xe8>
 8004486:	e000      	b.n	800448a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004488:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 0302 	and.w	r3, r3, #2
 8004492:	2b00      	cmp	r3, #0
 8004494:	d063      	beq.n	800455e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004496:	4b4a      	ldr	r3, [pc, #296]	@ (80045c0 <HAL_RCC_OscConfig+0x240>)
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f003 030c 	and.w	r3, r3, #12
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d00b      	beq.n	80044ba <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044a2:	4b47      	ldr	r3, [pc, #284]	@ (80045c0 <HAL_RCC_OscConfig+0x240>)
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80044aa:	2b08      	cmp	r3, #8
 80044ac:	d11c      	bne.n	80044e8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044ae:	4b44      	ldr	r3, [pc, #272]	@ (80045c0 <HAL_RCC_OscConfig+0x240>)
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d116      	bne.n	80044e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044ba:	4b41      	ldr	r3, [pc, #260]	@ (80045c0 <HAL_RCC_OscConfig+0x240>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0302 	and.w	r3, r3, #2
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d005      	beq.n	80044d2 <HAL_RCC_OscConfig+0x152>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d001      	beq.n	80044d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e1c7      	b.n	8004862 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044d2:	4b3b      	ldr	r3, [pc, #236]	@ (80045c0 <HAL_RCC_OscConfig+0x240>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	00db      	lsls	r3, r3, #3
 80044e0:	4937      	ldr	r1, [pc, #220]	@ (80045c0 <HAL_RCC_OscConfig+0x240>)
 80044e2:	4313      	orrs	r3, r2
 80044e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044e6:	e03a      	b.n	800455e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d020      	beq.n	8004532 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044f0:	4b34      	ldr	r3, [pc, #208]	@ (80045c4 <HAL_RCC_OscConfig+0x244>)
 80044f2:	2201      	movs	r2, #1
 80044f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f6:	f7fd f9d3 	bl	80018a0 <HAL_GetTick>
 80044fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044fc:	e008      	b.n	8004510 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044fe:	f7fd f9cf 	bl	80018a0 <HAL_GetTick>
 8004502:	4602      	mov	r2, r0
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	2b02      	cmp	r3, #2
 800450a:	d901      	bls.n	8004510 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800450c:	2303      	movs	r3, #3
 800450e:	e1a8      	b.n	8004862 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004510:	4b2b      	ldr	r3, [pc, #172]	@ (80045c0 <HAL_RCC_OscConfig+0x240>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 0302 	and.w	r3, r3, #2
 8004518:	2b00      	cmp	r3, #0
 800451a:	d0f0      	beq.n	80044fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800451c:	4b28      	ldr	r3, [pc, #160]	@ (80045c0 <HAL_RCC_OscConfig+0x240>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	691b      	ldr	r3, [r3, #16]
 8004528:	00db      	lsls	r3, r3, #3
 800452a:	4925      	ldr	r1, [pc, #148]	@ (80045c0 <HAL_RCC_OscConfig+0x240>)
 800452c:	4313      	orrs	r3, r2
 800452e:	600b      	str	r3, [r1, #0]
 8004530:	e015      	b.n	800455e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004532:	4b24      	ldr	r3, [pc, #144]	@ (80045c4 <HAL_RCC_OscConfig+0x244>)
 8004534:	2200      	movs	r2, #0
 8004536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004538:	f7fd f9b2 	bl	80018a0 <HAL_GetTick>
 800453c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800453e:	e008      	b.n	8004552 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004540:	f7fd f9ae 	bl	80018a0 <HAL_GetTick>
 8004544:	4602      	mov	r2, r0
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	2b02      	cmp	r3, #2
 800454c:	d901      	bls.n	8004552 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e187      	b.n	8004862 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004552:	4b1b      	ldr	r3, [pc, #108]	@ (80045c0 <HAL_RCC_OscConfig+0x240>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 0302 	and.w	r3, r3, #2
 800455a:	2b00      	cmp	r3, #0
 800455c:	d1f0      	bne.n	8004540 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0308 	and.w	r3, r3, #8
 8004566:	2b00      	cmp	r3, #0
 8004568:	d036      	beq.n	80045d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d016      	beq.n	80045a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004572:	4b15      	ldr	r3, [pc, #84]	@ (80045c8 <HAL_RCC_OscConfig+0x248>)
 8004574:	2201      	movs	r2, #1
 8004576:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004578:	f7fd f992 	bl	80018a0 <HAL_GetTick>
 800457c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800457e:	e008      	b.n	8004592 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004580:	f7fd f98e 	bl	80018a0 <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	2b02      	cmp	r3, #2
 800458c:	d901      	bls.n	8004592 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e167      	b.n	8004862 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004592:	4b0b      	ldr	r3, [pc, #44]	@ (80045c0 <HAL_RCC_OscConfig+0x240>)
 8004594:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004596:	f003 0302 	and.w	r3, r3, #2
 800459a:	2b00      	cmp	r3, #0
 800459c:	d0f0      	beq.n	8004580 <HAL_RCC_OscConfig+0x200>
 800459e:	e01b      	b.n	80045d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045a0:	4b09      	ldr	r3, [pc, #36]	@ (80045c8 <HAL_RCC_OscConfig+0x248>)
 80045a2:	2200      	movs	r2, #0
 80045a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045a6:	f7fd f97b 	bl	80018a0 <HAL_GetTick>
 80045aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045ac:	e00e      	b.n	80045cc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045ae:	f7fd f977 	bl	80018a0 <HAL_GetTick>
 80045b2:	4602      	mov	r2, r0
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d907      	bls.n	80045cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80045bc:	2303      	movs	r3, #3
 80045be:	e150      	b.n	8004862 <HAL_RCC_OscConfig+0x4e2>
 80045c0:	40023800 	.word	0x40023800
 80045c4:	42470000 	.word	0x42470000
 80045c8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045cc:	4b88      	ldr	r3, [pc, #544]	@ (80047f0 <HAL_RCC_OscConfig+0x470>)
 80045ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045d0:	f003 0302 	and.w	r3, r3, #2
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d1ea      	bne.n	80045ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 0304 	and.w	r3, r3, #4
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	f000 8097 	beq.w	8004714 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045e6:	2300      	movs	r3, #0
 80045e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045ea:	4b81      	ldr	r3, [pc, #516]	@ (80047f0 <HAL_RCC_OscConfig+0x470>)
 80045ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d10f      	bne.n	8004616 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045f6:	2300      	movs	r3, #0
 80045f8:	60bb      	str	r3, [r7, #8]
 80045fa:	4b7d      	ldr	r3, [pc, #500]	@ (80047f0 <HAL_RCC_OscConfig+0x470>)
 80045fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045fe:	4a7c      	ldr	r2, [pc, #496]	@ (80047f0 <HAL_RCC_OscConfig+0x470>)
 8004600:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004604:	6413      	str	r3, [r2, #64]	@ 0x40
 8004606:	4b7a      	ldr	r3, [pc, #488]	@ (80047f0 <HAL_RCC_OscConfig+0x470>)
 8004608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800460a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800460e:	60bb      	str	r3, [r7, #8]
 8004610:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004612:	2301      	movs	r3, #1
 8004614:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004616:	4b77      	ldr	r3, [pc, #476]	@ (80047f4 <HAL_RCC_OscConfig+0x474>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800461e:	2b00      	cmp	r3, #0
 8004620:	d118      	bne.n	8004654 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004622:	4b74      	ldr	r3, [pc, #464]	@ (80047f4 <HAL_RCC_OscConfig+0x474>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a73      	ldr	r2, [pc, #460]	@ (80047f4 <HAL_RCC_OscConfig+0x474>)
 8004628:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800462c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800462e:	f7fd f937 	bl	80018a0 <HAL_GetTick>
 8004632:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004634:	e008      	b.n	8004648 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004636:	f7fd f933 	bl	80018a0 <HAL_GetTick>
 800463a:	4602      	mov	r2, r0
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	2b02      	cmp	r3, #2
 8004642:	d901      	bls.n	8004648 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e10c      	b.n	8004862 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004648:	4b6a      	ldr	r3, [pc, #424]	@ (80047f4 <HAL_RCC_OscConfig+0x474>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004650:	2b00      	cmp	r3, #0
 8004652:	d0f0      	beq.n	8004636 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	2b01      	cmp	r3, #1
 800465a:	d106      	bne.n	800466a <HAL_RCC_OscConfig+0x2ea>
 800465c:	4b64      	ldr	r3, [pc, #400]	@ (80047f0 <HAL_RCC_OscConfig+0x470>)
 800465e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004660:	4a63      	ldr	r2, [pc, #396]	@ (80047f0 <HAL_RCC_OscConfig+0x470>)
 8004662:	f043 0301 	orr.w	r3, r3, #1
 8004666:	6713      	str	r3, [r2, #112]	@ 0x70
 8004668:	e01c      	b.n	80046a4 <HAL_RCC_OscConfig+0x324>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	2b05      	cmp	r3, #5
 8004670:	d10c      	bne.n	800468c <HAL_RCC_OscConfig+0x30c>
 8004672:	4b5f      	ldr	r3, [pc, #380]	@ (80047f0 <HAL_RCC_OscConfig+0x470>)
 8004674:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004676:	4a5e      	ldr	r2, [pc, #376]	@ (80047f0 <HAL_RCC_OscConfig+0x470>)
 8004678:	f043 0304 	orr.w	r3, r3, #4
 800467c:	6713      	str	r3, [r2, #112]	@ 0x70
 800467e:	4b5c      	ldr	r3, [pc, #368]	@ (80047f0 <HAL_RCC_OscConfig+0x470>)
 8004680:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004682:	4a5b      	ldr	r2, [pc, #364]	@ (80047f0 <HAL_RCC_OscConfig+0x470>)
 8004684:	f043 0301 	orr.w	r3, r3, #1
 8004688:	6713      	str	r3, [r2, #112]	@ 0x70
 800468a:	e00b      	b.n	80046a4 <HAL_RCC_OscConfig+0x324>
 800468c:	4b58      	ldr	r3, [pc, #352]	@ (80047f0 <HAL_RCC_OscConfig+0x470>)
 800468e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004690:	4a57      	ldr	r2, [pc, #348]	@ (80047f0 <HAL_RCC_OscConfig+0x470>)
 8004692:	f023 0301 	bic.w	r3, r3, #1
 8004696:	6713      	str	r3, [r2, #112]	@ 0x70
 8004698:	4b55      	ldr	r3, [pc, #340]	@ (80047f0 <HAL_RCC_OscConfig+0x470>)
 800469a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800469c:	4a54      	ldr	r2, [pc, #336]	@ (80047f0 <HAL_RCC_OscConfig+0x470>)
 800469e:	f023 0304 	bic.w	r3, r3, #4
 80046a2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d015      	beq.n	80046d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046ac:	f7fd f8f8 	bl	80018a0 <HAL_GetTick>
 80046b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046b2:	e00a      	b.n	80046ca <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046b4:	f7fd f8f4 	bl	80018a0 <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d901      	bls.n	80046ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e0cb      	b.n	8004862 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046ca:	4b49      	ldr	r3, [pc, #292]	@ (80047f0 <HAL_RCC_OscConfig+0x470>)
 80046cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046ce:	f003 0302 	and.w	r3, r3, #2
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d0ee      	beq.n	80046b4 <HAL_RCC_OscConfig+0x334>
 80046d6:	e014      	b.n	8004702 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046d8:	f7fd f8e2 	bl	80018a0 <HAL_GetTick>
 80046dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046de:	e00a      	b.n	80046f6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046e0:	f7fd f8de 	bl	80018a0 <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d901      	bls.n	80046f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e0b5      	b.n	8004862 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046f6:	4b3e      	ldr	r3, [pc, #248]	@ (80047f0 <HAL_RCC_OscConfig+0x470>)
 80046f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046fa:	f003 0302 	and.w	r3, r3, #2
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d1ee      	bne.n	80046e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004702:	7dfb      	ldrb	r3, [r7, #23]
 8004704:	2b01      	cmp	r3, #1
 8004706:	d105      	bne.n	8004714 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004708:	4b39      	ldr	r3, [pc, #228]	@ (80047f0 <HAL_RCC_OscConfig+0x470>)
 800470a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800470c:	4a38      	ldr	r2, [pc, #224]	@ (80047f0 <HAL_RCC_OscConfig+0x470>)
 800470e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004712:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	699b      	ldr	r3, [r3, #24]
 8004718:	2b00      	cmp	r3, #0
 800471a:	f000 80a1 	beq.w	8004860 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800471e:	4b34      	ldr	r3, [pc, #208]	@ (80047f0 <HAL_RCC_OscConfig+0x470>)
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	f003 030c 	and.w	r3, r3, #12
 8004726:	2b08      	cmp	r3, #8
 8004728:	d05c      	beq.n	80047e4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	699b      	ldr	r3, [r3, #24]
 800472e:	2b02      	cmp	r3, #2
 8004730:	d141      	bne.n	80047b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004732:	4b31      	ldr	r3, [pc, #196]	@ (80047f8 <HAL_RCC_OscConfig+0x478>)
 8004734:	2200      	movs	r2, #0
 8004736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004738:	f7fd f8b2 	bl	80018a0 <HAL_GetTick>
 800473c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800473e:	e008      	b.n	8004752 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004740:	f7fd f8ae 	bl	80018a0 <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	2b02      	cmp	r3, #2
 800474c:	d901      	bls.n	8004752 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e087      	b.n	8004862 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004752:	4b27      	ldr	r3, [pc, #156]	@ (80047f0 <HAL_RCC_OscConfig+0x470>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1f0      	bne.n	8004740 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	69da      	ldr	r2, [r3, #28]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a1b      	ldr	r3, [r3, #32]
 8004766:	431a      	orrs	r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800476c:	019b      	lsls	r3, r3, #6
 800476e:	431a      	orrs	r2, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004774:	085b      	lsrs	r3, r3, #1
 8004776:	3b01      	subs	r3, #1
 8004778:	041b      	lsls	r3, r3, #16
 800477a:	431a      	orrs	r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004780:	061b      	lsls	r3, r3, #24
 8004782:	491b      	ldr	r1, [pc, #108]	@ (80047f0 <HAL_RCC_OscConfig+0x470>)
 8004784:	4313      	orrs	r3, r2
 8004786:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004788:	4b1b      	ldr	r3, [pc, #108]	@ (80047f8 <HAL_RCC_OscConfig+0x478>)
 800478a:	2201      	movs	r2, #1
 800478c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800478e:	f7fd f887 	bl	80018a0 <HAL_GetTick>
 8004792:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004794:	e008      	b.n	80047a8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004796:	f7fd f883 	bl	80018a0 <HAL_GetTick>
 800479a:	4602      	mov	r2, r0
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d901      	bls.n	80047a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80047a4:	2303      	movs	r3, #3
 80047a6:	e05c      	b.n	8004862 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047a8:	4b11      	ldr	r3, [pc, #68]	@ (80047f0 <HAL_RCC_OscConfig+0x470>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d0f0      	beq.n	8004796 <HAL_RCC_OscConfig+0x416>
 80047b4:	e054      	b.n	8004860 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047b6:	4b10      	ldr	r3, [pc, #64]	@ (80047f8 <HAL_RCC_OscConfig+0x478>)
 80047b8:	2200      	movs	r2, #0
 80047ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047bc:	f7fd f870 	bl	80018a0 <HAL_GetTick>
 80047c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047c2:	e008      	b.n	80047d6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047c4:	f7fd f86c 	bl	80018a0 <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d901      	bls.n	80047d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e045      	b.n	8004862 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047d6:	4b06      	ldr	r3, [pc, #24]	@ (80047f0 <HAL_RCC_OscConfig+0x470>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d1f0      	bne.n	80047c4 <HAL_RCC_OscConfig+0x444>
 80047e2:	e03d      	b.n	8004860 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	699b      	ldr	r3, [r3, #24]
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d107      	bne.n	80047fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	e038      	b.n	8004862 <HAL_RCC_OscConfig+0x4e2>
 80047f0:	40023800 	.word	0x40023800
 80047f4:	40007000 	.word	0x40007000
 80047f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047fc:	4b1b      	ldr	r3, [pc, #108]	@ (800486c <HAL_RCC_OscConfig+0x4ec>)
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	699b      	ldr	r3, [r3, #24]
 8004806:	2b01      	cmp	r3, #1
 8004808:	d028      	beq.n	800485c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004814:	429a      	cmp	r2, r3
 8004816:	d121      	bne.n	800485c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004822:	429a      	cmp	r2, r3
 8004824:	d11a      	bne.n	800485c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004826:	68fa      	ldr	r2, [r7, #12]
 8004828:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800482c:	4013      	ands	r3, r2
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004832:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004834:	4293      	cmp	r3, r2
 8004836:	d111      	bne.n	800485c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004842:	085b      	lsrs	r3, r3, #1
 8004844:	3b01      	subs	r3, #1
 8004846:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004848:	429a      	cmp	r2, r3
 800484a:	d107      	bne.n	800485c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004856:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004858:	429a      	cmp	r2, r3
 800485a:	d001      	beq.n	8004860 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e000      	b.n	8004862 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	3718      	adds	r7, #24
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	40023800 	.word	0x40023800

08004870 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d101      	bne.n	8004884 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e0cc      	b.n	8004a1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004884:	4b68      	ldr	r3, [pc, #416]	@ (8004a28 <HAL_RCC_ClockConfig+0x1b8>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0307 	and.w	r3, r3, #7
 800488c:	683a      	ldr	r2, [r7, #0]
 800488e:	429a      	cmp	r2, r3
 8004890:	d90c      	bls.n	80048ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004892:	4b65      	ldr	r3, [pc, #404]	@ (8004a28 <HAL_RCC_ClockConfig+0x1b8>)
 8004894:	683a      	ldr	r2, [r7, #0]
 8004896:	b2d2      	uxtb	r2, r2
 8004898:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800489a:	4b63      	ldr	r3, [pc, #396]	@ (8004a28 <HAL_RCC_ClockConfig+0x1b8>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0307 	and.w	r3, r3, #7
 80048a2:	683a      	ldr	r2, [r7, #0]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d001      	beq.n	80048ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e0b8      	b.n	8004a1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0302 	and.w	r3, r3, #2
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d020      	beq.n	80048fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0304 	and.w	r3, r3, #4
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d005      	beq.n	80048d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048c4:	4b59      	ldr	r3, [pc, #356]	@ (8004a2c <HAL_RCC_ClockConfig+0x1bc>)
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	4a58      	ldr	r2, [pc, #352]	@ (8004a2c <HAL_RCC_ClockConfig+0x1bc>)
 80048ca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80048ce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0308 	and.w	r3, r3, #8
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d005      	beq.n	80048e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048dc:	4b53      	ldr	r3, [pc, #332]	@ (8004a2c <HAL_RCC_ClockConfig+0x1bc>)
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	4a52      	ldr	r2, [pc, #328]	@ (8004a2c <HAL_RCC_ClockConfig+0x1bc>)
 80048e2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80048e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048e8:	4b50      	ldr	r3, [pc, #320]	@ (8004a2c <HAL_RCC_ClockConfig+0x1bc>)
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	494d      	ldr	r1, [pc, #308]	@ (8004a2c <HAL_RCC_ClockConfig+0x1bc>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0301 	and.w	r3, r3, #1
 8004902:	2b00      	cmp	r3, #0
 8004904:	d044      	beq.n	8004990 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	2b01      	cmp	r3, #1
 800490c:	d107      	bne.n	800491e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800490e:	4b47      	ldr	r3, [pc, #284]	@ (8004a2c <HAL_RCC_ClockConfig+0x1bc>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d119      	bne.n	800494e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e07f      	b.n	8004a1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	2b02      	cmp	r3, #2
 8004924:	d003      	beq.n	800492e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800492a:	2b03      	cmp	r3, #3
 800492c:	d107      	bne.n	800493e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800492e:	4b3f      	ldr	r3, [pc, #252]	@ (8004a2c <HAL_RCC_ClockConfig+0x1bc>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d109      	bne.n	800494e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e06f      	b.n	8004a1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800493e:	4b3b      	ldr	r3, [pc, #236]	@ (8004a2c <HAL_RCC_ClockConfig+0x1bc>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0302 	and.w	r3, r3, #2
 8004946:	2b00      	cmp	r3, #0
 8004948:	d101      	bne.n	800494e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e067      	b.n	8004a1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800494e:	4b37      	ldr	r3, [pc, #220]	@ (8004a2c <HAL_RCC_ClockConfig+0x1bc>)
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	f023 0203 	bic.w	r2, r3, #3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	4934      	ldr	r1, [pc, #208]	@ (8004a2c <HAL_RCC_ClockConfig+0x1bc>)
 800495c:	4313      	orrs	r3, r2
 800495e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004960:	f7fc ff9e 	bl	80018a0 <HAL_GetTick>
 8004964:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004966:	e00a      	b.n	800497e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004968:	f7fc ff9a 	bl	80018a0 <HAL_GetTick>
 800496c:	4602      	mov	r2, r0
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004976:	4293      	cmp	r3, r2
 8004978:	d901      	bls.n	800497e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800497a:	2303      	movs	r3, #3
 800497c:	e04f      	b.n	8004a1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800497e:	4b2b      	ldr	r3, [pc, #172]	@ (8004a2c <HAL_RCC_ClockConfig+0x1bc>)
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	f003 020c 	and.w	r2, r3, #12
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	429a      	cmp	r2, r3
 800498e:	d1eb      	bne.n	8004968 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004990:	4b25      	ldr	r3, [pc, #148]	@ (8004a28 <HAL_RCC_ClockConfig+0x1b8>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0307 	and.w	r3, r3, #7
 8004998:	683a      	ldr	r2, [r7, #0]
 800499a:	429a      	cmp	r2, r3
 800499c:	d20c      	bcs.n	80049b8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800499e:	4b22      	ldr	r3, [pc, #136]	@ (8004a28 <HAL_RCC_ClockConfig+0x1b8>)
 80049a0:	683a      	ldr	r2, [r7, #0]
 80049a2:	b2d2      	uxtb	r2, r2
 80049a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049a6:	4b20      	ldr	r3, [pc, #128]	@ (8004a28 <HAL_RCC_ClockConfig+0x1b8>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0307 	and.w	r3, r3, #7
 80049ae:	683a      	ldr	r2, [r7, #0]
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d001      	beq.n	80049b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e032      	b.n	8004a1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0304 	and.w	r3, r3, #4
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d008      	beq.n	80049d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049c4:	4b19      	ldr	r3, [pc, #100]	@ (8004a2c <HAL_RCC_ClockConfig+0x1bc>)
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	4916      	ldr	r1, [pc, #88]	@ (8004a2c <HAL_RCC_ClockConfig+0x1bc>)
 80049d2:	4313      	orrs	r3, r2
 80049d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0308 	and.w	r3, r3, #8
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d009      	beq.n	80049f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049e2:	4b12      	ldr	r3, [pc, #72]	@ (8004a2c <HAL_RCC_ClockConfig+0x1bc>)
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	691b      	ldr	r3, [r3, #16]
 80049ee:	00db      	lsls	r3, r3, #3
 80049f0:	490e      	ldr	r1, [pc, #56]	@ (8004a2c <HAL_RCC_ClockConfig+0x1bc>)
 80049f2:	4313      	orrs	r3, r2
 80049f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80049f6:	f000 f821 	bl	8004a3c <HAL_RCC_GetSysClockFreq>
 80049fa:	4602      	mov	r2, r0
 80049fc:	4b0b      	ldr	r3, [pc, #44]	@ (8004a2c <HAL_RCC_ClockConfig+0x1bc>)
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	091b      	lsrs	r3, r3, #4
 8004a02:	f003 030f 	and.w	r3, r3, #15
 8004a06:	490a      	ldr	r1, [pc, #40]	@ (8004a30 <HAL_RCC_ClockConfig+0x1c0>)
 8004a08:	5ccb      	ldrb	r3, [r1, r3]
 8004a0a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a0e:	4a09      	ldr	r2, [pc, #36]	@ (8004a34 <HAL_RCC_ClockConfig+0x1c4>)
 8004a10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004a12:	4b09      	ldr	r3, [pc, #36]	@ (8004a38 <HAL_RCC_ClockConfig+0x1c8>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4618      	mov	r0, r3
 8004a18:	f7fc fefe 	bl	8001818 <HAL_InitTick>

  return HAL_OK;
 8004a1c:	2300      	movs	r3, #0
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3710      	adds	r7, #16
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	40023c00 	.word	0x40023c00
 8004a2c:	40023800 	.word	0x40023800
 8004a30:	0800a018 	.word	0x0800a018
 8004a34:	20000000 	.word	0x20000000
 8004a38:	20000004 	.word	0x20000004

08004a3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a40:	b094      	sub	sp, #80	@ 0x50
 8004a42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004a44:	2300      	movs	r3, #0
 8004a46:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004a50:	2300      	movs	r3, #0
 8004a52:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a54:	4b79      	ldr	r3, [pc, #484]	@ (8004c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	f003 030c 	and.w	r3, r3, #12
 8004a5c:	2b08      	cmp	r3, #8
 8004a5e:	d00d      	beq.n	8004a7c <HAL_RCC_GetSysClockFreq+0x40>
 8004a60:	2b08      	cmp	r3, #8
 8004a62:	f200 80e1 	bhi.w	8004c28 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d002      	beq.n	8004a70 <HAL_RCC_GetSysClockFreq+0x34>
 8004a6a:	2b04      	cmp	r3, #4
 8004a6c:	d003      	beq.n	8004a76 <HAL_RCC_GetSysClockFreq+0x3a>
 8004a6e:	e0db      	b.n	8004c28 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a70:	4b73      	ldr	r3, [pc, #460]	@ (8004c40 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a72:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a74:	e0db      	b.n	8004c2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a76:	4b73      	ldr	r3, [pc, #460]	@ (8004c44 <HAL_RCC_GetSysClockFreq+0x208>)
 8004a78:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a7a:	e0d8      	b.n	8004c2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a7c:	4b6f      	ldr	r3, [pc, #444]	@ (8004c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a84:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a86:	4b6d      	ldr	r3, [pc, #436]	@ (8004c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d063      	beq.n	8004b5a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a92:	4b6a      	ldr	r3, [pc, #424]	@ (8004c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	099b      	lsrs	r3, r3, #6
 8004a98:	2200      	movs	r2, #0
 8004a9a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a9c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004a9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aa4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004aaa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004aae:	4622      	mov	r2, r4
 8004ab0:	462b      	mov	r3, r5
 8004ab2:	f04f 0000 	mov.w	r0, #0
 8004ab6:	f04f 0100 	mov.w	r1, #0
 8004aba:	0159      	lsls	r1, r3, #5
 8004abc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ac0:	0150      	lsls	r0, r2, #5
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	4621      	mov	r1, r4
 8004ac8:	1a51      	subs	r1, r2, r1
 8004aca:	6139      	str	r1, [r7, #16]
 8004acc:	4629      	mov	r1, r5
 8004ace:	eb63 0301 	sbc.w	r3, r3, r1
 8004ad2:	617b      	str	r3, [r7, #20]
 8004ad4:	f04f 0200 	mov.w	r2, #0
 8004ad8:	f04f 0300 	mov.w	r3, #0
 8004adc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ae0:	4659      	mov	r1, fp
 8004ae2:	018b      	lsls	r3, r1, #6
 8004ae4:	4651      	mov	r1, sl
 8004ae6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004aea:	4651      	mov	r1, sl
 8004aec:	018a      	lsls	r2, r1, #6
 8004aee:	4651      	mov	r1, sl
 8004af0:	ebb2 0801 	subs.w	r8, r2, r1
 8004af4:	4659      	mov	r1, fp
 8004af6:	eb63 0901 	sbc.w	r9, r3, r1
 8004afa:	f04f 0200 	mov.w	r2, #0
 8004afe:	f04f 0300 	mov.w	r3, #0
 8004b02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b0e:	4690      	mov	r8, r2
 8004b10:	4699      	mov	r9, r3
 8004b12:	4623      	mov	r3, r4
 8004b14:	eb18 0303 	adds.w	r3, r8, r3
 8004b18:	60bb      	str	r3, [r7, #8]
 8004b1a:	462b      	mov	r3, r5
 8004b1c:	eb49 0303 	adc.w	r3, r9, r3
 8004b20:	60fb      	str	r3, [r7, #12]
 8004b22:	f04f 0200 	mov.w	r2, #0
 8004b26:	f04f 0300 	mov.w	r3, #0
 8004b2a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004b2e:	4629      	mov	r1, r5
 8004b30:	024b      	lsls	r3, r1, #9
 8004b32:	4621      	mov	r1, r4
 8004b34:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b38:	4621      	mov	r1, r4
 8004b3a:	024a      	lsls	r2, r1, #9
 8004b3c:	4610      	mov	r0, r2
 8004b3e:	4619      	mov	r1, r3
 8004b40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b42:	2200      	movs	r2, #0
 8004b44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b46:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004b4c:	f7fb ff5a 	bl	8000a04 <__aeabi_uldivmod>
 8004b50:	4602      	mov	r2, r0
 8004b52:	460b      	mov	r3, r1
 8004b54:	4613      	mov	r3, r2
 8004b56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b58:	e058      	b.n	8004c0c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b5a:	4b38      	ldr	r3, [pc, #224]	@ (8004c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	099b      	lsrs	r3, r3, #6
 8004b60:	2200      	movs	r2, #0
 8004b62:	4618      	mov	r0, r3
 8004b64:	4611      	mov	r1, r2
 8004b66:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b6a:	623b      	str	r3, [r7, #32]
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b70:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b74:	4642      	mov	r2, r8
 8004b76:	464b      	mov	r3, r9
 8004b78:	f04f 0000 	mov.w	r0, #0
 8004b7c:	f04f 0100 	mov.w	r1, #0
 8004b80:	0159      	lsls	r1, r3, #5
 8004b82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b86:	0150      	lsls	r0, r2, #5
 8004b88:	4602      	mov	r2, r0
 8004b8a:	460b      	mov	r3, r1
 8004b8c:	4641      	mov	r1, r8
 8004b8e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b92:	4649      	mov	r1, r9
 8004b94:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b98:	f04f 0200 	mov.w	r2, #0
 8004b9c:	f04f 0300 	mov.w	r3, #0
 8004ba0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004ba4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004ba8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004bac:	ebb2 040a 	subs.w	r4, r2, sl
 8004bb0:	eb63 050b 	sbc.w	r5, r3, fp
 8004bb4:	f04f 0200 	mov.w	r2, #0
 8004bb8:	f04f 0300 	mov.w	r3, #0
 8004bbc:	00eb      	lsls	r3, r5, #3
 8004bbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bc2:	00e2      	lsls	r2, r4, #3
 8004bc4:	4614      	mov	r4, r2
 8004bc6:	461d      	mov	r5, r3
 8004bc8:	4643      	mov	r3, r8
 8004bca:	18e3      	adds	r3, r4, r3
 8004bcc:	603b      	str	r3, [r7, #0]
 8004bce:	464b      	mov	r3, r9
 8004bd0:	eb45 0303 	adc.w	r3, r5, r3
 8004bd4:	607b      	str	r3, [r7, #4]
 8004bd6:	f04f 0200 	mov.w	r2, #0
 8004bda:	f04f 0300 	mov.w	r3, #0
 8004bde:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004be2:	4629      	mov	r1, r5
 8004be4:	028b      	lsls	r3, r1, #10
 8004be6:	4621      	mov	r1, r4
 8004be8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004bec:	4621      	mov	r1, r4
 8004bee:	028a      	lsls	r2, r1, #10
 8004bf0:	4610      	mov	r0, r2
 8004bf2:	4619      	mov	r1, r3
 8004bf4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	61bb      	str	r3, [r7, #24]
 8004bfa:	61fa      	str	r2, [r7, #28]
 8004bfc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c00:	f7fb ff00 	bl	8000a04 <__aeabi_uldivmod>
 8004c04:	4602      	mov	r2, r0
 8004c06:	460b      	mov	r3, r1
 8004c08:	4613      	mov	r3, r2
 8004c0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004c0c:	4b0b      	ldr	r3, [pc, #44]	@ (8004c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	0c1b      	lsrs	r3, r3, #16
 8004c12:	f003 0303 	and.w	r3, r3, #3
 8004c16:	3301      	adds	r3, #1
 8004c18:	005b      	lsls	r3, r3, #1
 8004c1a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004c1c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004c1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c24:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c26:	e002      	b.n	8004c2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c28:	4b05      	ldr	r3, [pc, #20]	@ (8004c40 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c2a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3750      	adds	r7, #80	@ 0x50
 8004c34:	46bd      	mov	sp, r7
 8004c36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c3a:	bf00      	nop
 8004c3c:	40023800 	.word	0x40023800
 8004c40:	00f42400 	.word	0x00f42400
 8004c44:	007a1200 	.word	0x007a1200

08004c48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c4c:	4b03      	ldr	r3, [pc, #12]	@ (8004c5c <HAL_RCC_GetHCLKFreq+0x14>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	20000000 	.word	0x20000000

08004c60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c64:	f7ff fff0 	bl	8004c48 <HAL_RCC_GetHCLKFreq>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	4b05      	ldr	r3, [pc, #20]	@ (8004c80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	0a9b      	lsrs	r3, r3, #10
 8004c70:	f003 0307 	and.w	r3, r3, #7
 8004c74:	4903      	ldr	r1, [pc, #12]	@ (8004c84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c76:	5ccb      	ldrb	r3, [r1, r3]
 8004c78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	40023800 	.word	0x40023800
 8004c84:	0800a028 	.word	0x0800a028

08004c88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b082      	sub	sp, #8
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d101      	bne.n	8004c9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e041      	b.n	8004d1e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d106      	bne.n	8004cb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f7fc fc0a 	bl	80014c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2202      	movs	r2, #2
 8004cb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	3304      	adds	r3, #4
 8004cc4:	4619      	mov	r1, r3
 8004cc6:	4610      	mov	r0, r2
 8004cc8:	f000 fdb6 	bl	8005838 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d1c:	2300      	movs	r3, #0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3708      	adds	r7, #8
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}

08004d26 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d26:	b580      	push	{r7, lr}
 8004d28:	b082      	sub	sp, #8
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d101      	bne.n	8004d38 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e041      	b.n	8004dbc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d106      	bne.n	8004d52 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 f839 	bl	8004dc4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2202      	movs	r2, #2
 8004d56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	3304      	adds	r3, #4
 8004d62:	4619      	mov	r1, r3
 8004d64:	4610      	mov	r0, r2
 8004d66:	f000 fd67 	bl	8005838 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2201      	movs	r2, #1
 8004d76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2201      	movs	r2, #1
 8004d86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2201      	movs	r2, #1
 8004d96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2201      	movs	r2, #1
 8004da6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2201      	movs	r2, #1
 8004dae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2201      	movs	r2, #1
 8004db6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004dba:	2300      	movs	r3, #0
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3708      	adds	r7, #8
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004dcc:	bf00      	nop
 8004dce:	370c      	adds	r7, #12
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d101      	bne.n	8004dea <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e041      	b.n	8004e6e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d106      	bne.n	8004e04 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f7fc fbaa 	bl	8001558 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2202      	movs	r2, #2
 8004e08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	3304      	adds	r3, #4
 8004e14:	4619      	mov	r1, r3
 8004e16:	4610      	mov	r0, r2
 8004e18:	f000 fd0e 	bl	8005838 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e6c:	2300      	movs	r3, #0
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3708      	adds	r7, #8
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
	...

08004e78 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b084      	sub	sp, #16
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e82:	2300      	movs	r3, #0
 8004e84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d104      	bne.n	8004e96 <HAL_TIM_IC_Start_IT+0x1e>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	e013      	b.n	8004ebe <HAL_TIM_IC_Start_IT+0x46>
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	2b04      	cmp	r3, #4
 8004e9a:	d104      	bne.n	8004ea6 <HAL_TIM_IC_Start_IT+0x2e>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	e00b      	b.n	8004ebe <HAL_TIM_IC_Start_IT+0x46>
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	2b08      	cmp	r3, #8
 8004eaa:	d104      	bne.n	8004eb6 <HAL_TIM_IC_Start_IT+0x3e>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	e003      	b.n	8004ebe <HAL_TIM_IC_Start_IT+0x46>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d104      	bne.n	8004ed0 <HAL_TIM_IC_Start_IT+0x58>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	e013      	b.n	8004ef8 <HAL_TIM_IC_Start_IT+0x80>
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	2b04      	cmp	r3, #4
 8004ed4:	d104      	bne.n	8004ee0 <HAL_TIM_IC_Start_IT+0x68>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	e00b      	b.n	8004ef8 <HAL_TIM_IC_Start_IT+0x80>
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	2b08      	cmp	r3, #8
 8004ee4:	d104      	bne.n	8004ef0 <HAL_TIM_IC_Start_IT+0x78>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	e003      	b.n	8004ef8 <HAL_TIM_IC_Start_IT+0x80>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004efa:	7bbb      	ldrb	r3, [r7, #14]
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d102      	bne.n	8004f06 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004f00:	7b7b      	ldrb	r3, [r7, #13]
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d001      	beq.n	8004f0a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e0cc      	b.n	80050a4 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d104      	bne.n	8004f1a <HAL_TIM_IC_Start_IT+0xa2>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2202      	movs	r2, #2
 8004f14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f18:	e013      	b.n	8004f42 <HAL_TIM_IC_Start_IT+0xca>
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	2b04      	cmp	r3, #4
 8004f1e:	d104      	bne.n	8004f2a <HAL_TIM_IC_Start_IT+0xb2>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2202      	movs	r2, #2
 8004f24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f28:	e00b      	b.n	8004f42 <HAL_TIM_IC_Start_IT+0xca>
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	2b08      	cmp	r3, #8
 8004f2e:	d104      	bne.n	8004f3a <HAL_TIM_IC_Start_IT+0xc2>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2202      	movs	r2, #2
 8004f34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f38:	e003      	b.n	8004f42 <HAL_TIM_IC_Start_IT+0xca>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2202      	movs	r2, #2
 8004f3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d104      	bne.n	8004f52 <HAL_TIM_IC_Start_IT+0xda>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2202      	movs	r2, #2
 8004f4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f50:	e013      	b.n	8004f7a <HAL_TIM_IC_Start_IT+0x102>
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	2b04      	cmp	r3, #4
 8004f56:	d104      	bne.n	8004f62 <HAL_TIM_IC_Start_IT+0xea>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2202      	movs	r2, #2
 8004f5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004f60:	e00b      	b.n	8004f7a <HAL_TIM_IC_Start_IT+0x102>
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	2b08      	cmp	r3, #8
 8004f66:	d104      	bne.n	8004f72 <HAL_TIM_IC_Start_IT+0xfa>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2202      	movs	r2, #2
 8004f6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f70:	e003      	b.n	8004f7a <HAL_TIM_IC_Start_IT+0x102>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2202      	movs	r2, #2
 8004f76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	2b0c      	cmp	r3, #12
 8004f7e:	d841      	bhi.n	8005004 <HAL_TIM_IC_Start_IT+0x18c>
 8004f80:	a201      	add	r2, pc, #4	@ (adr r2, 8004f88 <HAL_TIM_IC_Start_IT+0x110>)
 8004f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f86:	bf00      	nop
 8004f88:	08004fbd 	.word	0x08004fbd
 8004f8c:	08005005 	.word	0x08005005
 8004f90:	08005005 	.word	0x08005005
 8004f94:	08005005 	.word	0x08005005
 8004f98:	08004fcf 	.word	0x08004fcf
 8004f9c:	08005005 	.word	0x08005005
 8004fa0:	08005005 	.word	0x08005005
 8004fa4:	08005005 	.word	0x08005005
 8004fa8:	08004fe1 	.word	0x08004fe1
 8004fac:	08005005 	.word	0x08005005
 8004fb0:	08005005 	.word	0x08005005
 8004fb4:	08005005 	.word	0x08005005
 8004fb8:	08004ff3 	.word	0x08004ff3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	68da      	ldr	r2, [r3, #12]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f042 0202 	orr.w	r2, r2, #2
 8004fca:	60da      	str	r2, [r3, #12]
      break;
 8004fcc:	e01d      	b.n	800500a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	68da      	ldr	r2, [r3, #12]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f042 0204 	orr.w	r2, r2, #4
 8004fdc:	60da      	str	r2, [r3, #12]
      break;
 8004fde:	e014      	b.n	800500a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68da      	ldr	r2, [r3, #12]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f042 0208 	orr.w	r2, r2, #8
 8004fee:	60da      	str	r2, [r3, #12]
      break;
 8004ff0:	e00b      	b.n	800500a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	68da      	ldr	r2, [r3, #12]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f042 0210 	orr.w	r2, r2, #16
 8005000:	60da      	str	r2, [r3, #12]
      break;
 8005002:	e002      	b.n	800500a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	73fb      	strb	r3, [r7, #15]
      break;
 8005008:	bf00      	nop
  }

  if (status == HAL_OK)
 800500a:	7bfb      	ldrb	r3, [r7, #15]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d148      	bne.n	80050a2 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2201      	movs	r2, #1
 8005016:	6839      	ldr	r1, [r7, #0]
 8005018:	4618      	mov	r0, r3
 800501a:	f001 f8a4 	bl	8006166 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a22      	ldr	r2, [pc, #136]	@ (80050ac <HAL_TIM_IC_Start_IT+0x234>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d022      	beq.n	800506e <HAL_TIM_IC_Start_IT+0x1f6>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005030:	d01d      	beq.n	800506e <HAL_TIM_IC_Start_IT+0x1f6>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a1e      	ldr	r2, [pc, #120]	@ (80050b0 <HAL_TIM_IC_Start_IT+0x238>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d018      	beq.n	800506e <HAL_TIM_IC_Start_IT+0x1f6>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a1c      	ldr	r2, [pc, #112]	@ (80050b4 <HAL_TIM_IC_Start_IT+0x23c>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d013      	beq.n	800506e <HAL_TIM_IC_Start_IT+0x1f6>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a1b      	ldr	r2, [pc, #108]	@ (80050b8 <HAL_TIM_IC_Start_IT+0x240>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d00e      	beq.n	800506e <HAL_TIM_IC_Start_IT+0x1f6>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a19      	ldr	r2, [pc, #100]	@ (80050bc <HAL_TIM_IC_Start_IT+0x244>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d009      	beq.n	800506e <HAL_TIM_IC_Start_IT+0x1f6>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a18      	ldr	r2, [pc, #96]	@ (80050c0 <HAL_TIM_IC_Start_IT+0x248>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d004      	beq.n	800506e <HAL_TIM_IC_Start_IT+0x1f6>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a16      	ldr	r2, [pc, #88]	@ (80050c4 <HAL_TIM_IC_Start_IT+0x24c>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d111      	bne.n	8005092 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	f003 0307 	and.w	r3, r3, #7
 8005078:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	2b06      	cmp	r3, #6
 800507e:	d010      	beq.n	80050a2 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f042 0201 	orr.w	r2, r2, #1
 800508e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005090:	e007      	b.n	80050a2 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f042 0201 	orr.w	r2, r2, #1
 80050a0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80050a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3710      	adds	r7, #16
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	40010000 	.word	0x40010000
 80050b0:	40000400 	.word	0x40000400
 80050b4:	40000800 	.word	0x40000800
 80050b8:	40000c00 	.word	0x40000c00
 80050bc:	40010400 	.word	0x40010400
 80050c0:	40014000 	.word	0x40014000
 80050c4:	40001800 	.word	0x40001800

080050c8 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b082      	sub	sp, #8
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d101      	bne.n	80050dc <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e041      	b.n	8005160 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d106      	bne.n	80050f6 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f000 f839 	bl	8005168 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2202      	movs	r2, #2
 80050fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	3304      	adds	r3, #4
 8005106:	4619      	mov	r1, r3
 8005108:	4610      	mov	r0, r2
 800510a:	f000 fb95 	bl	8005838 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f022 0208 	bic.w	r2, r2, #8
 800511c:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	6819      	ldr	r1, [r3, #0]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	683a      	ldr	r2, [r7, #0]
 800512a:	430a      	orrs	r2, r1
 800512c:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2201      	movs	r2, #1
 8005132:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2201      	movs	r2, #1
 800513a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2201      	movs	r2, #1
 8005142:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2201      	movs	r2, #1
 800514a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2201      	movs	r2, #1
 8005152:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2201      	movs	r2, #1
 800515a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800515e:	2300      	movs	r3, #0
}
 8005160:	4618      	mov	r0, r3
 8005162:	3708      	adds	r7, #8
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}

08005168 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8005170:	bf00      	nop
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <HAL_TIM_OnePulse_Start>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800518c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005194:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800519c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80051a4:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80051a6:	7bfb      	ldrb	r3, [r7, #15]
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d108      	bne.n	80051be <HAL_TIM_OnePulse_Start+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80051ac:	7bbb      	ldrb	r3, [r7, #14]
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d105      	bne.n	80051be <HAL_TIM_OnePulse_Start+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80051b2:	7b7b      	ldrb	r3, [r7, #13]
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d102      	bne.n	80051be <HAL_TIM_OnePulse_Start+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80051b8:	7b3b      	ldrb	r3, [r7, #12]
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d001      	beq.n	80051c2 <HAL_TIM_OnePulse_Start+0x46>
  {
    return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e035      	b.n	800522e <HAL_TIM_OnePulse_Start+0xb2>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2202      	movs	r2, #2
 80051c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2202      	movs	r2, #2
 80051ce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2202      	movs	r2, #2
 80051d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2202      	movs	r2, #2
 80051de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    whatever the combination, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be enabled together

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	2201      	movs	r2, #1
 80051e8:	2100      	movs	r1, #0
 80051ea:	4618      	mov	r0, r3
 80051ec:	f000 ffbb 	bl	8006166 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	2201      	movs	r2, #1
 80051f6:	2104      	movs	r1, #4
 80051f8:	4618      	mov	r0, r3
 80051fa:	f000 ffb4 	bl	8006166 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a0d      	ldr	r2, [pc, #52]	@ (8005238 <HAL_TIM_OnePulse_Start+0xbc>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d004      	beq.n	8005212 <HAL_TIM_OnePulse_Start+0x96>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a0b      	ldr	r2, [pc, #44]	@ (800523c <HAL_TIM_OnePulse_Start+0xc0>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d101      	bne.n	8005216 <HAL_TIM_OnePulse_Start+0x9a>
 8005212:	2301      	movs	r3, #1
 8005214:	e000      	b.n	8005218 <HAL_TIM_OnePulse_Start+0x9c>
 8005216:	2300      	movs	r3, #0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d007      	beq.n	800522c <HAL_TIM_OnePulse_Start+0xb0>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800522a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800522c:	2300      	movs	r3, #0
}
 800522e:	4618      	mov	r0, r3
 8005230:	3710      	adds	r7, #16
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	40010000 	.word	0x40010000
 800523c:	40010400 	.word	0x40010400

08005240 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b084      	sub	sp, #16
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	f003 0302 	and.w	r3, r3, #2
 800525e:	2b00      	cmp	r3, #0
 8005260:	d020      	beq.n	80052a4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f003 0302 	and.w	r3, r3, #2
 8005268:	2b00      	cmp	r3, #0
 800526a:	d01b      	beq.n	80052a4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f06f 0202 	mvn.w	r2, #2
 8005274:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2201      	movs	r2, #1
 800527a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	699b      	ldr	r3, [r3, #24]
 8005282:	f003 0303 	and.w	r3, r3, #3
 8005286:	2b00      	cmp	r3, #0
 8005288:	d003      	beq.n	8005292 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f7fc f87e 	bl	800138c <HAL_TIM_IC_CaptureCallback>
 8005290:	e005      	b.n	800529e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 fab2 	bl	80057fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f000 fab9 	bl	8005810 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	f003 0304 	and.w	r3, r3, #4
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d020      	beq.n	80052f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f003 0304 	and.w	r3, r3, #4
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d01b      	beq.n	80052f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f06f 0204 	mvn.w	r2, #4
 80052c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2202      	movs	r2, #2
 80052c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	699b      	ldr	r3, [r3, #24]
 80052ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d003      	beq.n	80052de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f7fc f858 	bl	800138c <HAL_TIM_IC_CaptureCallback>
 80052dc:	e005      	b.n	80052ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 fa8c 	bl	80057fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f000 fa93 	bl	8005810 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	f003 0308 	and.w	r3, r3, #8
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d020      	beq.n	800533c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f003 0308 	and.w	r3, r3, #8
 8005300:	2b00      	cmp	r3, #0
 8005302:	d01b      	beq.n	800533c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f06f 0208 	mvn.w	r2, #8
 800530c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2204      	movs	r2, #4
 8005312:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	69db      	ldr	r3, [r3, #28]
 800531a:	f003 0303 	and.w	r3, r3, #3
 800531e:	2b00      	cmp	r3, #0
 8005320:	d003      	beq.n	800532a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f7fc f832 	bl	800138c <HAL_TIM_IC_CaptureCallback>
 8005328:	e005      	b.n	8005336 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 fa66 	bl	80057fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f000 fa6d 	bl	8005810 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	f003 0310 	and.w	r3, r3, #16
 8005342:	2b00      	cmp	r3, #0
 8005344:	d020      	beq.n	8005388 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f003 0310 	and.w	r3, r3, #16
 800534c:	2b00      	cmp	r3, #0
 800534e:	d01b      	beq.n	8005388 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f06f 0210 	mvn.w	r2, #16
 8005358:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2208      	movs	r2, #8
 800535e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	69db      	ldr	r3, [r3, #28]
 8005366:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800536a:	2b00      	cmp	r3, #0
 800536c:	d003      	beq.n	8005376 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f7fc f80c 	bl	800138c <HAL_TIM_IC_CaptureCallback>
 8005374:	e005      	b.n	8005382 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 fa40 	bl	80057fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f000 fa47 	bl	8005810 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	f003 0301 	and.w	r3, r3, #1
 800538e:	2b00      	cmp	r3, #0
 8005390:	d00c      	beq.n	80053ac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	f003 0301 	and.w	r3, r3, #1
 8005398:	2b00      	cmp	r3, #0
 800539a:	d007      	beq.n	80053ac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f06f 0201 	mvn.w	r2, #1
 80053a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 fa1e 	bl	80057e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d00c      	beq.n	80053d0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d007      	beq.n	80053d0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80053c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 ffc8 	bl	8006360 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d00c      	beq.n	80053f4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d007      	beq.n	80053f4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80053ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 fa18 	bl	8005824 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	f003 0320 	and.w	r3, r3, #32
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00c      	beq.n	8005418 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f003 0320 	and.w	r3, r3, #32
 8005404:	2b00      	cmp	r3, #0
 8005406:	d007      	beq.n	8005418 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f06f 0220 	mvn.w	r2, #32
 8005410:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 ff9a 	bl	800634c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005418:	bf00      	nop
 800541a:	3710      	adds	r7, #16
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}

08005420 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b086      	sub	sp, #24
 8005424:	af00      	add	r7, sp, #0
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800542c:	2300      	movs	r3, #0
 800542e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005436:	2b01      	cmp	r3, #1
 8005438:	d101      	bne.n	800543e <HAL_TIM_IC_ConfigChannel+0x1e>
 800543a:	2302      	movs	r3, #2
 800543c:	e088      	b.n	8005550 <HAL_TIM_IC_ConfigChannel+0x130>
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2201      	movs	r2, #1
 8005442:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d11b      	bne.n	8005484 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800545c:	f000 fcda 	bl	8005e14 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	699a      	ldr	r2, [r3, #24]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f022 020c 	bic.w	r2, r2, #12
 800546e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	6999      	ldr	r1, [r3, #24]
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	689a      	ldr	r2, [r3, #8]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	430a      	orrs	r2, r1
 8005480:	619a      	str	r2, [r3, #24]
 8005482:	e060      	b.n	8005546 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2b04      	cmp	r3, #4
 8005488:	d11c      	bne.n	80054c4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800549a:	f000 fd5e 	bl	8005f5a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	699a      	ldr	r2, [r3, #24]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80054ac:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	6999      	ldr	r1, [r3, #24]
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	021a      	lsls	r2, r3, #8
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	430a      	orrs	r2, r1
 80054c0:	619a      	str	r2, [r3, #24]
 80054c2:	e040      	b.n	8005546 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2b08      	cmp	r3, #8
 80054c8:	d11b      	bne.n	8005502 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80054da:	f000 fdab 	bl	8006034 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	69da      	ldr	r2, [r3, #28]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f022 020c 	bic.w	r2, r2, #12
 80054ec:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	69d9      	ldr	r1, [r3, #28]
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	689a      	ldr	r2, [r3, #8]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	430a      	orrs	r2, r1
 80054fe:	61da      	str	r2, [r3, #28]
 8005500:	e021      	b.n	8005546 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2b0c      	cmp	r3, #12
 8005506:	d11c      	bne.n	8005542 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005518:	f000 fdc8 	bl	80060ac <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	69da      	ldr	r2, [r3, #28]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800552a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	69d9      	ldr	r1, [r3, #28]
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	021a      	lsls	r2, r3, #8
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	430a      	orrs	r2, r1
 800553e:	61da      	str	r2, [r3, #28]
 8005540:	e001      	b.n	8005546 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2200      	movs	r2, #0
 800554a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800554e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005550:	4618      	mov	r0, r3
 8005552:	3718      	adds	r7, #24
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}

08005558 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b086      	sub	sp, #24
 800555c:	af00      	add	r7, sp, #0
 800555e:	60f8      	str	r0, [r7, #12]
 8005560:	60b9      	str	r1, [r7, #8]
 8005562:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005564:	2300      	movs	r3, #0
 8005566:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800556e:	2b01      	cmp	r3, #1
 8005570:	d101      	bne.n	8005576 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005572:	2302      	movs	r3, #2
 8005574:	e0ae      	b.n	80056d4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2201      	movs	r2, #1
 800557a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2b0c      	cmp	r3, #12
 8005582:	f200 809f 	bhi.w	80056c4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005586:	a201      	add	r2, pc, #4	@ (adr r2, 800558c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800558c:	080055c1 	.word	0x080055c1
 8005590:	080056c5 	.word	0x080056c5
 8005594:	080056c5 	.word	0x080056c5
 8005598:	080056c5 	.word	0x080056c5
 800559c:	08005601 	.word	0x08005601
 80055a0:	080056c5 	.word	0x080056c5
 80055a4:	080056c5 	.word	0x080056c5
 80055a8:	080056c5 	.word	0x080056c5
 80055ac:	08005643 	.word	0x08005643
 80055b0:	080056c5 	.word	0x080056c5
 80055b4:	080056c5 	.word	0x080056c5
 80055b8:	080056c5 	.word	0x080056c5
 80055bc:	08005683 	.word	0x08005683
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68b9      	ldr	r1, [r7, #8]
 80055c6:	4618      	mov	r0, r3
 80055c8:	f000 f9e2 	bl	8005990 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	699a      	ldr	r2, [r3, #24]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f042 0208 	orr.w	r2, r2, #8
 80055da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	699a      	ldr	r2, [r3, #24]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f022 0204 	bic.w	r2, r2, #4
 80055ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	6999      	ldr	r1, [r3, #24]
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	691a      	ldr	r2, [r3, #16]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	430a      	orrs	r2, r1
 80055fc:	619a      	str	r2, [r3, #24]
      break;
 80055fe:	e064      	b.n	80056ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	68b9      	ldr	r1, [r7, #8]
 8005606:	4618      	mov	r0, r3
 8005608:	f000 fa32 	bl	8005a70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	699a      	ldr	r2, [r3, #24]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800561a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	699a      	ldr	r2, [r3, #24]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800562a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	6999      	ldr	r1, [r3, #24]
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	691b      	ldr	r3, [r3, #16]
 8005636:	021a      	lsls	r2, r3, #8
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	430a      	orrs	r2, r1
 800563e:	619a      	str	r2, [r3, #24]
      break;
 8005640:	e043      	b.n	80056ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	68b9      	ldr	r1, [r7, #8]
 8005648:	4618      	mov	r0, r3
 800564a:	f000 fa87 	bl	8005b5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	69da      	ldr	r2, [r3, #28]
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f042 0208 	orr.w	r2, r2, #8
 800565c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	69da      	ldr	r2, [r3, #28]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f022 0204 	bic.w	r2, r2, #4
 800566c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	69d9      	ldr	r1, [r3, #28]
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	691a      	ldr	r2, [r3, #16]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	430a      	orrs	r2, r1
 800567e:	61da      	str	r2, [r3, #28]
      break;
 8005680:	e023      	b.n	80056ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	68b9      	ldr	r1, [r7, #8]
 8005688:	4618      	mov	r0, r3
 800568a:	f000 fadb 	bl	8005c44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	69da      	ldr	r2, [r3, #28]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800569c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	69da      	ldr	r2, [r3, #28]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	69d9      	ldr	r1, [r3, #28]
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	021a      	lsls	r2, r3, #8
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	430a      	orrs	r2, r1
 80056c0:	61da      	str	r2, [r3, #28]
      break;
 80056c2:	e002      	b.n	80056ca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	75fb      	strb	r3, [r7, #23]
      break;
 80056c8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80056d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3718      	adds	r7, #24
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}

080056dc <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b082      	sub	sp, #8
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d101      	bne.n	80056f4 <HAL_TIM_SlaveConfigSynchro+0x18>
 80056f0:	2302      	movs	r3, #2
 80056f2:	e031      	b.n	8005758 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2202      	movs	r2, #2
 8005700:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005704:	6839      	ldr	r1, [r7, #0]
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f000 faf2 	bl	8005cf0 <TIM_SlaveTimer_SetConfig>
 800570c:	4603      	mov	r3, r0
 800570e:	2b00      	cmp	r3, #0
 8005710:	d009      	beq.n	8005726 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2201      	movs	r2, #1
 8005716:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e018      	b.n	8005758 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68da      	ldr	r2, [r3, #12]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005734:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	68da      	ldr	r2, [r3, #12]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005744:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2201      	movs	r2, #1
 800574a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2200      	movs	r2, #0
 8005752:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005756:	2300      	movs	r3, #0
}
 8005758:	4618      	mov	r0, r3
 800575a:	3708      	adds	r7, #8
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}

08005760 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005760:	b480      	push	{r7}
 8005762:	b085      	sub	sp, #20
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800576a:	2300      	movs	r3, #0
 800576c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	2b0c      	cmp	r3, #12
 8005772:	d831      	bhi.n	80057d8 <HAL_TIM_ReadCapturedValue+0x78>
 8005774:	a201      	add	r2, pc, #4	@ (adr r2, 800577c <HAL_TIM_ReadCapturedValue+0x1c>)
 8005776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800577a:	bf00      	nop
 800577c:	080057b1 	.word	0x080057b1
 8005780:	080057d9 	.word	0x080057d9
 8005784:	080057d9 	.word	0x080057d9
 8005788:	080057d9 	.word	0x080057d9
 800578c:	080057bb 	.word	0x080057bb
 8005790:	080057d9 	.word	0x080057d9
 8005794:	080057d9 	.word	0x080057d9
 8005798:	080057d9 	.word	0x080057d9
 800579c:	080057c5 	.word	0x080057c5
 80057a0:	080057d9 	.word	0x080057d9
 80057a4:	080057d9 	.word	0x080057d9
 80057a8:	080057d9 	.word	0x080057d9
 80057ac:	080057cf 	.word	0x080057cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057b6:	60fb      	str	r3, [r7, #12]

      break;
 80057b8:	e00f      	b.n	80057da <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057c0:	60fb      	str	r3, [r7, #12]

      break;
 80057c2:	e00a      	b.n	80057da <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057ca:	60fb      	str	r3, [r7, #12]

      break;
 80057cc:	e005      	b.n	80057da <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057d4:	60fb      	str	r3, [r7, #12]

      break;
 80057d6:	e000      	b.n	80057da <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80057d8:	bf00      	nop
  }

  return tmpreg;
 80057da:	68fb      	ldr	r3, [r7, #12]
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3714      	adds	r7, #20
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr

080057e8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b083      	sub	sp, #12
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80057f0:	bf00      	nop
 80057f2:	370c      	adds	r7, #12
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr

080057fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005804:	bf00      	nop
 8005806:	370c      	adds	r7, #12
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005810:	b480      	push	{r7}
 8005812:	b083      	sub	sp, #12
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005818:	bf00      	nop
 800581a:	370c      	adds	r7, #12
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr

08005824 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005824:	b480      	push	{r7}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800582c:	bf00      	nop
 800582e:	370c      	adds	r7, #12
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005838:	b480      	push	{r7}
 800583a:	b085      	sub	sp, #20
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4a46      	ldr	r2, [pc, #280]	@ (8005964 <TIM_Base_SetConfig+0x12c>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d013      	beq.n	8005878 <TIM_Base_SetConfig+0x40>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005856:	d00f      	beq.n	8005878 <TIM_Base_SetConfig+0x40>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4a43      	ldr	r2, [pc, #268]	@ (8005968 <TIM_Base_SetConfig+0x130>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d00b      	beq.n	8005878 <TIM_Base_SetConfig+0x40>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4a42      	ldr	r2, [pc, #264]	@ (800596c <TIM_Base_SetConfig+0x134>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d007      	beq.n	8005878 <TIM_Base_SetConfig+0x40>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a41      	ldr	r2, [pc, #260]	@ (8005970 <TIM_Base_SetConfig+0x138>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d003      	beq.n	8005878 <TIM_Base_SetConfig+0x40>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4a40      	ldr	r2, [pc, #256]	@ (8005974 <TIM_Base_SetConfig+0x13c>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d108      	bne.n	800588a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800587e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	68fa      	ldr	r2, [r7, #12]
 8005886:	4313      	orrs	r3, r2
 8005888:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a35      	ldr	r2, [pc, #212]	@ (8005964 <TIM_Base_SetConfig+0x12c>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d02b      	beq.n	80058ea <TIM_Base_SetConfig+0xb2>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005898:	d027      	beq.n	80058ea <TIM_Base_SetConfig+0xb2>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a32      	ldr	r2, [pc, #200]	@ (8005968 <TIM_Base_SetConfig+0x130>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d023      	beq.n	80058ea <TIM_Base_SetConfig+0xb2>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a31      	ldr	r2, [pc, #196]	@ (800596c <TIM_Base_SetConfig+0x134>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d01f      	beq.n	80058ea <TIM_Base_SetConfig+0xb2>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a30      	ldr	r2, [pc, #192]	@ (8005970 <TIM_Base_SetConfig+0x138>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d01b      	beq.n	80058ea <TIM_Base_SetConfig+0xb2>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a2f      	ldr	r2, [pc, #188]	@ (8005974 <TIM_Base_SetConfig+0x13c>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d017      	beq.n	80058ea <TIM_Base_SetConfig+0xb2>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a2e      	ldr	r2, [pc, #184]	@ (8005978 <TIM_Base_SetConfig+0x140>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d013      	beq.n	80058ea <TIM_Base_SetConfig+0xb2>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a2d      	ldr	r2, [pc, #180]	@ (800597c <TIM_Base_SetConfig+0x144>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d00f      	beq.n	80058ea <TIM_Base_SetConfig+0xb2>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a2c      	ldr	r2, [pc, #176]	@ (8005980 <TIM_Base_SetConfig+0x148>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d00b      	beq.n	80058ea <TIM_Base_SetConfig+0xb2>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a2b      	ldr	r2, [pc, #172]	@ (8005984 <TIM_Base_SetConfig+0x14c>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d007      	beq.n	80058ea <TIM_Base_SetConfig+0xb2>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a2a      	ldr	r2, [pc, #168]	@ (8005988 <TIM_Base_SetConfig+0x150>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d003      	beq.n	80058ea <TIM_Base_SetConfig+0xb2>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a29      	ldr	r2, [pc, #164]	@ (800598c <TIM_Base_SetConfig+0x154>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d108      	bne.n	80058fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	68fa      	ldr	r2, [r7, #12]
 80058f8:	4313      	orrs	r3, r2
 80058fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	695b      	ldr	r3, [r3, #20]
 8005906:	4313      	orrs	r3, r2
 8005908:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	689a      	ldr	r2, [r3, #8]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	4a10      	ldr	r2, [pc, #64]	@ (8005964 <TIM_Base_SetConfig+0x12c>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d003      	beq.n	8005930 <TIM_Base_SetConfig+0xf8>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	4a12      	ldr	r2, [pc, #72]	@ (8005974 <TIM_Base_SetConfig+0x13c>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d103      	bne.n	8005938 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	691a      	ldr	r2, [r3, #16]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	691b      	ldr	r3, [r3, #16]
 8005942:	f003 0301 	and.w	r3, r3, #1
 8005946:	2b01      	cmp	r3, #1
 8005948:	d105      	bne.n	8005956 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	691b      	ldr	r3, [r3, #16]
 800594e:	f023 0201 	bic.w	r2, r3, #1
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	611a      	str	r2, [r3, #16]
  }
}
 8005956:	bf00      	nop
 8005958:	3714      	adds	r7, #20
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr
 8005962:	bf00      	nop
 8005964:	40010000 	.word	0x40010000
 8005968:	40000400 	.word	0x40000400
 800596c:	40000800 	.word	0x40000800
 8005970:	40000c00 	.word	0x40000c00
 8005974:	40010400 	.word	0x40010400
 8005978:	40014000 	.word	0x40014000
 800597c:	40014400 	.word	0x40014400
 8005980:	40014800 	.word	0x40014800
 8005984:	40001800 	.word	0x40001800
 8005988:	40001c00 	.word	0x40001c00
 800598c:	40002000 	.word	0x40002000

08005990 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005990:	b480      	push	{r7}
 8005992:	b087      	sub	sp, #28
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a1b      	ldr	r3, [r3, #32]
 800599e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6a1b      	ldr	r3, [r3, #32]
 80059a4:	f023 0201 	bic.w	r2, r3, #1
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	699b      	ldr	r3, [r3, #24]
 80059b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f023 0303 	bic.w	r3, r3, #3
 80059c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	f023 0302 	bic.w	r3, r3, #2
 80059d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	697a      	ldr	r2, [r7, #20]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4a20      	ldr	r2, [pc, #128]	@ (8005a68 <TIM_OC1_SetConfig+0xd8>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d003      	beq.n	80059f4 <TIM_OC1_SetConfig+0x64>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	4a1f      	ldr	r2, [pc, #124]	@ (8005a6c <TIM_OC1_SetConfig+0xdc>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d10c      	bne.n	8005a0e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	f023 0308 	bic.w	r3, r3, #8
 80059fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	697a      	ldr	r2, [r7, #20]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	f023 0304 	bic.w	r3, r3, #4
 8005a0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a15      	ldr	r2, [pc, #84]	@ (8005a68 <TIM_OC1_SetConfig+0xd8>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d003      	beq.n	8005a1e <TIM_OC1_SetConfig+0x8e>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a14      	ldr	r2, [pc, #80]	@ (8005a6c <TIM_OC1_SetConfig+0xdc>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d111      	bne.n	8005a42 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005a2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	695b      	ldr	r3, [r3, #20]
 8005a32:	693a      	ldr	r2, [r7, #16]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	699b      	ldr	r3, [r3, #24]
 8005a3c:	693a      	ldr	r2, [r7, #16]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	693a      	ldr	r2, [r7, #16]
 8005a46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	68fa      	ldr	r2, [r7, #12]
 8005a4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	685a      	ldr	r2, [r3, #4]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	697a      	ldr	r2, [r7, #20]
 8005a5a:	621a      	str	r2, [r3, #32]
}
 8005a5c:	bf00      	nop
 8005a5e:	371c      	adds	r7, #28
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr
 8005a68:	40010000 	.word	0x40010000
 8005a6c:	40010400 	.word	0x40010400

08005a70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b087      	sub	sp, #28
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6a1b      	ldr	r3, [r3, #32]
 8005a7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6a1b      	ldr	r3, [r3, #32]
 8005a84:	f023 0210 	bic.w	r2, r3, #16
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	699b      	ldr	r3, [r3, #24]
 8005a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005aa6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	021b      	lsls	r3, r3, #8
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	f023 0320 	bic.w	r3, r3, #32
 8005aba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	011b      	lsls	r3, r3, #4
 8005ac2:	697a      	ldr	r2, [r7, #20]
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a22      	ldr	r2, [pc, #136]	@ (8005b54 <TIM_OC2_SetConfig+0xe4>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d003      	beq.n	8005ad8 <TIM_OC2_SetConfig+0x68>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4a21      	ldr	r2, [pc, #132]	@ (8005b58 <TIM_OC2_SetConfig+0xe8>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d10d      	bne.n	8005af4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ade:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	011b      	lsls	r3, r3, #4
 8005ae6:	697a      	ldr	r2, [r7, #20]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005af2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	4a17      	ldr	r2, [pc, #92]	@ (8005b54 <TIM_OC2_SetConfig+0xe4>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d003      	beq.n	8005b04 <TIM_OC2_SetConfig+0x94>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4a16      	ldr	r2, [pc, #88]	@ (8005b58 <TIM_OC2_SetConfig+0xe8>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d113      	bne.n	8005b2c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005b0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005b12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	695b      	ldr	r3, [r3, #20]
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	693a      	ldr	r2, [r7, #16]
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	699b      	ldr	r3, [r3, #24]
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	693a      	ldr	r2, [r7, #16]
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	693a      	ldr	r2, [r7, #16]
 8005b30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	68fa      	ldr	r2, [r7, #12]
 8005b36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	685a      	ldr	r2, [r3, #4]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	697a      	ldr	r2, [r7, #20]
 8005b44:	621a      	str	r2, [r3, #32]
}
 8005b46:	bf00      	nop
 8005b48:	371c      	adds	r7, #28
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	40010000 	.word	0x40010000
 8005b58:	40010400 	.word	0x40010400

08005b5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b087      	sub	sp, #28
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6a1b      	ldr	r3, [r3, #32]
 8005b6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6a1b      	ldr	r3, [r3, #32]
 8005b70:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	69db      	ldr	r3, [r3, #28]
 8005b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f023 0303 	bic.w	r3, r3, #3
 8005b92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005ba4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	021b      	lsls	r3, r3, #8
 8005bac:	697a      	ldr	r2, [r7, #20]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4a21      	ldr	r2, [pc, #132]	@ (8005c3c <TIM_OC3_SetConfig+0xe0>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d003      	beq.n	8005bc2 <TIM_OC3_SetConfig+0x66>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	4a20      	ldr	r2, [pc, #128]	@ (8005c40 <TIM_OC3_SetConfig+0xe4>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d10d      	bne.n	8005bde <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005bc8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	021b      	lsls	r3, r3, #8
 8005bd0:	697a      	ldr	r2, [r7, #20]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005bdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a16      	ldr	r2, [pc, #88]	@ (8005c3c <TIM_OC3_SetConfig+0xe0>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d003      	beq.n	8005bee <TIM_OC3_SetConfig+0x92>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a15      	ldr	r2, [pc, #84]	@ (8005c40 <TIM_OC3_SetConfig+0xe4>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d113      	bne.n	8005c16 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005bf4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005bfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	695b      	ldr	r3, [r3, #20]
 8005c02:	011b      	lsls	r3, r3, #4
 8005c04:	693a      	ldr	r2, [r7, #16]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	699b      	ldr	r3, [r3, #24]
 8005c0e:	011b      	lsls	r3, r3, #4
 8005c10:	693a      	ldr	r2, [r7, #16]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	693a      	ldr	r2, [r7, #16]
 8005c1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	68fa      	ldr	r2, [r7, #12]
 8005c20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	685a      	ldr	r2, [r3, #4]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	697a      	ldr	r2, [r7, #20]
 8005c2e:	621a      	str	r2, [r3, #32]
}
 8005c30:	bf00      	nop
 8005c32:	371c      	adds	r7, #28
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr
 8005c3c:	40010000 	.word	0x40010000
 8005c40:	40010400 	.word	0x40010400

08005c44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b087      	sub	sp, #28
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a1b      	ldr	r3, [r3, #32]
 8005c52:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6a1b      	ldr	r3, [r3, #32]
 8005c58:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	69db      	ldr	r3, [r3, #28]
 8005c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	021b      	lsls	r3, r3, #8
 8005c82:	68fa      	ldr	r2, [r7, #12]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005c8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	031b      	lsls	r3, r3, #12
 8005c96:	693a      	ldr	r2, [r7, #16]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	4a12      	ldr	r2, [pc, #72]	@ (8005ce8 <TIM_OC4_SetConfig+0xa4>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d003      	beq.n	8005cac <TIM_OC4_SetConfig+0x68>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	4a11      	ldr	r2, [pc, #68]	@ (8005cec <TIM_OC4_SetConfig+0xa8>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d109      	bne.n	8005cc0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005cb2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	695b      	ldr	r3, [r3, #20]
 8005cb8:	019b      	lsls	r3, r3, #6
 8005cba:	697a      	ldr	r2, [r7, #20]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	697a      	ldr	r2, [r7, #20]
 8005cc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	68fa      	ldr	r2, [r7, #12]
 8005cca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	685a      	ldr	r2, [r3, #4]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	693a      	ldr	r2, [r7, #16]
 8005cd8:	621a      	str	r2, [r3, #32]
}
 8005cda:	bf00      	nop
 8005cdc:	371c      	adds	r7, #28
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce4:	4770      	bx	lr
 8005ce6:	bf00      	nop
 8005ce8:	40010000 	.word	0x40010000
 8005cec:	40010400 	.word	0x40010400

08005cf0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b086      	sub	sp, #24
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d0c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	693a      	ldr	r2, [r7, #16]
 8005d14:	4313      	orrs	r3, r2
 8005d16:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	f023 0307 	bic.w	r3, r3, #7
 8005d1e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	693a      	ldr	r2, [r7, #16]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	693a      	ldr	r2, [r7, #16]
 8005d30:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	2b70      	cmp	r3, #112	@ 0x70
 8005d38:	d01a      	beq.n	8005d70 <TIM_SlaveTimer_SetConfig+0x80>
 8005d3a:	2b70      	cmp	r3, #112	@ 0x70
 8005d3c:	d860      	bhi.n	8005e00 <TIM_SlaveTimer_SetConfig+0x110>
 8005d3e:	2b60      	cmp	r3, #96	@ 0x60
 8005d40:	d054      	beq.n	8005dec <TIM_SlaveTimer_SetConfig+0xfc>
 8005d42:	2b60      	cmp	r3, #96	@ 0x60
 8005d44:	d85c      	bhi.n	8005e00 <TIM_SlaveTimer_SetConfig+0x110>
 8005d46:	2b50      	cmp	r3, #80	@ 0x50
 8005d48:	d046      	beq.n	8005dd8 <TIM_SlaveTimer_SetConfig+0xe8>
 8005d4a:	2b50      	cmp	r3, #80	@ 0x50
 8005d4c:	d858      	bhi.n	8005e00 <TIM_SlaveTimer_SetConfig+0x110>
 8005d4e:	2b40      	cmp	r3, #64	@ 0x40
 8005d50:	d019      	beq.n	8005d86 <TIM_SlaveTimer_SetConfig+0x96>
 8005d52:	2b40      	cmp	r3, #64	@ 0x40
 8005d54:	d854      	bhi.n	8005e00 <TIM_SlaveTimer_SetConfig+0x110>
 8005d56:	2b30      	cmp	r3, #48	@ 0x30
 8005d58:	d055      	beq.n	8005e06 <TIM_SlaveTimer_SetConfig+0x116>
 8005d5a:	2b30      	cmp	r3, #48	@ 0x30
 8005d5c:	d850      	bhi.n	8005e00 <TIM_SlaveTimer_SetConfig+0x110>
 8005d5e:	2b20      	cmp	r3, #32
 8005d60:	d051      	beq.n	8005e06 <TIM_SlaveTimer_SetConfig+0x116>
 8005d62:	2b20      	cmp	r3, #32
 8005d64:	d84c      	bhi.n	8005e00 <TIM_SlaveTimer_SetConfig+0x110>
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d04d      	beq.n	8005e06 <TIM_SlaveTimer_SetConfig+0x116>
 8005d6a:	2b10      	cmp	r3, #16
 8005d6c:	d04b      	beq.n	8005e06 <TIM_SlaveTimer_SetConfig+0x116>
 8005d6e:	e047      	b.n	8005e00 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8005d80:	f000 f9d1 	bl	8006126 <TIM_ETR_SetConfig>
      break;
 8005d84:	e040      	b.n	8005e08 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	2b05      	cmp	r3, #5
 8005d8c:	d101      	bne.n	8005d92 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e03b      	b.n	8005e0a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	6a1b      	ldr	r3, [r3, #32]
 8005d98:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	6a1a      	ldr	r2, [r3, #32]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f022 0201 	bic.w	r2, r2, #1
 8005da8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	699b      	ldr	r3, [r3, #24]
 8005db0:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005db8:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	691b      	ldr	r3, [r3, #16]
 8005dbe:	011b      	lsls	r3, r3, #4
 8005dc0:	68ba      	ldr	r2, [r7, #8]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	68ba      	ldr	r2, [r7, #8]
 8005dcc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	68fa      	ldr	r2, [r7, #12]
 8005dd4:	621a      	str	r2, [r3, #32]
      break;
 8005dd6:	e017      	b.n	8005e08 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005de4:	461a      	mov	r2, r3
 8005de6:	f000 f889 	bl	8005efc <TIM_TI1_ConfigInputStage>
      break;
 8005dea:	e00d      	b.n	8005e08 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005df8:	461a      	mov	r2, r3
 8005dfa:	f000 f8eb 	bl	8005fd4 <TIM_TI2_ConfigInputStage>
      break;
 8005dfe:	e003      	b.n	8005e08 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	75fb      	strb	r3, [r7, #23]
      break;
 8005e04:	e000      	b.n	8005e08 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8005e06:	bf00      	nop
  }

  return status;
 8005e08:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3718      	adds	r7, #24
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
	...

08005e14 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b087      	sub	sp, #28
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	60f8      	str	r0, [r7, #12]
 8005e1c:	60b9      	str	r1, [r7, #8]
 8005e1e:	607a      	str	r2, [r7, #4]
 8005e20:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	6a1b      	ldr	r3, [r3, #32]
 8005e26:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	6a1b      	ldr	r3, [r3, #32]
 8005e2c:	f023 0201 	bic.w	r2, r3, #1
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	699b      	ldr	r3, [r3, #24]
 8005e38:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	4a28      	ldr	r2, [pc, #160]	@ (8005ee0 <TIM_TI1_SetConfig+0xcc>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d01b      	beq.n	8005e7a <TIM_TI1_SetConfig+0x66>
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e48:	d017      	beq.n	8005e7a <TIM_TI1_SetConfig+0x66>
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	4a25      	ldr	r2, [pc, #148]	@ (8005ee4 <TIM_TI1_SetConfig+0xd0>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d013      	beq.n	8005e7a <TIM_TI1_SetConfig+0x66>
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	4a24      	ldr	r2, [pc, #144]	@ (8005ee8 <TIM_TI1_SetConfig+0xd4>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d00f      	beq.n	8005e7a <TIM_TI1_SetConfig+0x66>
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	4a23      	ldr	r2, [pc, #140]	@ (8005eec <TIM_TI1_SetConfig+0xd8>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d00b      	beq.n	8005e7a <TIM_TI1_SetConfig+0x66>
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	4a22      	ldr	r2, [pc, #136]	@ (8005ef0 <TIM_TI1_SetConfig+0xdc>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d007      	beq.n	8005e7a <TIM_TI1_SetConfig+0x66>
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	4a21      	ldr	r2, [pc, #132]	@ (8005ef4 <TIM_TI1_SetConfig+0xe0>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d003      	beq.n	8005e7a <TIM_TI1_SetConfig+0x66>
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	4a20      	ldr	r2, [pc, #128]	@ (8005ef8 <TIM_TI1_SetConfig+0xe4>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d101      	bne.n	8005e7e <TIM_TI1_SetConfig+0x6a>
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e000      	b.n	8005e80 <TIM_TI1_SetConfig+0x6c>
 8005e7e:	2300      	movs	r3, #0
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d008      	beq.n	8005e96 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	f023 0303 	bic.w	r3, r3, #3
 8005e8a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005e8c:	697a      	ldr	r2, [r7, #20]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	617b      	str	r3, [r7, #20]
 8005e94:	e003      	b.n	8005e9e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	f043 0301 	orr.w	r3, r3, #1
 8005e9c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005ea4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	011b      	lsls	r3, r3, #4
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	697a      	ldr	r2, [r7, #20]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	f023 030a 	bic.w	r3, r3, #10
 8005eb8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	f003 030a 	and.w	r3, r3, #10
 8005ec0:	693a      	ldr	r2, [r7, #16]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	697a      	ldr	r2, [r7, #20]
 8005eca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	693a      	ldr	r2, [r7, #16]
 8005ed0:	621a      	str	r2, [r3, #32]
}
 8005ed2:	bf00      	nop
 8005ed4:	371c      	adds	r7, #28
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr
 8005ede:	bf00      	nop
 8005ee0:	40010000 	.word	0x40010000
 8005ee4:	40000400 	.word	0x40000400
 8005ee8:	40000800 	.word	0x40000800
 8005eec:	40000c00 	.word	0x40000c00
 8005ef0:	40010400 	.word	0x40010400
 8005ef4:	40014000 	.word	0x40014000
 8005ef8:	40001800 	.word	0x40001800

08005efc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b087      	sub	sp, #28
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	60f8      	str	r0, [r7, #12]
 8005f04:	60b9      	str	r1, [r7, #8]
 8005f06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6a1b      	ldr	r3, [r3, #32]
 8005f0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6a1b      	ldr	r3, [r3, #32]
 8005f12:	f023 0201 	bic.w	r2, r3, #1
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	699b      	ldr	r3, [r3, #24]
 8005f1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	011b      	lsls	r3, r3, #4
 8005f2c:	693a      	ldr	r2, [r7, #16]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	f023 030a 	bic.w	r3, r3, #10
 8005f38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f3a:	697a      	ldr	r2, [r7, #20]
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	693a      	ldr	r2, [r7, #16]
 8005f46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	697a      	ldr	r2, [r7, #20]
 8005f4c:	621a      	str	r2, [r3, #32]
}
 8005f4e:	bf00      	nop
 8005f50:	371c      	adds	r7, #28
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr

08005f5a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005f5a:	b480      	push	{r7}
 8005f5c:	b087      	sub	sp, #28
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	60f8      	str	r0, [r7, #12]
 8005f62:	60b9      	str	r1, [r7, #8]
 8005f64:	607a      	str	r2, [r7, #4]
 8005f66:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	6a1b      	ldr	r3, [r3, #32]
 8005f6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	6a1b      	ldr	r3, [r3, #32]
 8005f72:	f023 0210 	bic.w	r2, r3, #16
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	699b      	ldr	r3, [r3, #24]
 8005f7e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	021b      	lsls	r3, r3, #8
 8005f8c:	693a      	ldr	r2, [r7, #16]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005f98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	031b      	lsls	r3, r3, #12
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	693a      	ldr	r2, [r7, #16]
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005fac:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	011b      	lsls	r3, r3, #4
 8005fb2:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8005fb6:	697a      	ldr	r2, [r7, #20]
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	693a      	ldr	r2, [r7, #16]
 8005fc0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	697a      	ldr	r2, [r7, #20]
 8005fc6:	621a      	str	r2, [r3, #32]
}
 8005fc8:	bf00      	nop
 8005fca:	371c      	adds	r7, #28
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr

08005fd4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b087      	sub	sp, #28
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	60f8      	str	r0, [r7, #12]
 8005fdc:	60b9      	str	r1, [r7, #8]
 8005fde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	6a1b      	ldr	r3, [r3, #32]
 8005fe4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	6a1b      	ldr	r3, [r3, #32]
 8005fea:	f023 0210 	bic.w	r2, r3, #16
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	699b      	ldr	r3, [r3, #24]
 8005ff6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005ffe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	031b      	lsls	r3, r3, #12
 8006004:	693a      	ldr	r2, [r7, #16]
 8006006:	4313      	orrs	r3, r2
 8006008:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006010:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	011b      	lsls	r3, r3, #4
 8006016:	697a      	ldr	r2, [r7, #20]
 8006018:	4313      	orrs	r3, r2
 800601a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	693a      	ldr	r2, [r7, #16]
 8006020:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	697a      	ldr	r2, [r7, #20]
 8006026:	621a      	str	r2, [r3, #32]
}
 8006028:	bf00      	nop
 800602a:	371c      	adds	r7, #28
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr

08006034 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006034:	b480      	push	{r7}
 8006036:	b087      	sub	sp, #28
 8006038:	af00      	add	r7, sp, #0
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	60b9      	str	r1, [r7, #8]
 800603e:	607a      	str	r2, [r7, #4]
 8006040:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	6a1b      	ldr	r3, [r3, #32]
 8006046:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	6a1b      	ldr	r3, [r3, #32]
 800604c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	69db      	ldr	r3, [r3, #28]
 8006058:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	f023 0303 	bic.w	r3, r3, #3
 8006060:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006062:	693a      	ldr	r2, [r7, #16]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	4313      	orrs	r3, r2
 8006068:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006070:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	011b      	lsls	r3, r3, #4
 8006076:	b2db      	uxtb	r3, r3
 8006078:	693a      	ldr	r2, [r7, #16]
 800607a:	4313      	orrs	r3, r2
 800607c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8006084:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	021b      	lsls	r3, r3, #8
 800608a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800608e:	697a      	ldr	r2, [r7, #20]
 8006090:	4313      	orrs	r3, r2
 8006092:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	693a      	ldr	r2, [r7, #16]
 8006098:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	697a      	ldr	r2, [r7, #20]
 800609e:	621a      	str	r2, [r3, #32]
}
 80060a0:	bf00      	nop
 80060a2:	371c      	adds	r7, #28
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b087      	sub	sp, #28
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	60f8      	str	r0, [r7, #12]
 80060b4:	60b9      	str	r1, [r7, #8]
 80060b6:	607a      	str	r2, [r7, #4]
 80060b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	6a1b      	ldr	r3, [r3, #32]
 80060be:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	6a1b      	ldr	r3, [r3, #32]
 80060c4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	69db      	ldr	r3, [r3, #28]
 80060d0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060d8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	021b      	lsls	r3, r3, #8
 80060de:	693a      	ldr	r2, [r7, #16]
 80060e0:	4313      	orrs	r3, r2
 80060e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80060ea:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	031b      	lsls	r3, r3, #12
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	693a      	ldr	r2, [r7, #16]
 80060f4:	4313      	orrs	r3, r2
 80060f6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80060fe:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	031b      	lsls	r3, r3, #12
 8006104:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8006108:	697a      	ldr	r2, [r7, #20]
 800610a:	4313      	orrs	r3, r2
 800610c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	693a      	ldr	r2, [r7, #16]
 8006112:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	697a      	ldr	r2, [r7, #20]
 8006118:	621a      	str	r2, [r3, #32]
}
 800611a:	bf00      	nop
 800611c:	371c      	adds	r7, #28
 800611e:	46bd      	mov	sp, r7
 8006120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006124:	4770      	bx	lr

08006126 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006126:	b480      	push	{r7}
 8006128:	b087      	sub	sp, #28
 800612a:	af00      	add	r7, sp, #0
 800612c:	60f8      	str	r0, [r7, #12]
 800612e:	60b9      	str	r1, [r7, #8]
 8006130:	607a      	str	r2, [r7, #4]
 8006132:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006140:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	021a      	lsls	r2, r3, #8
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	431a      	orrs	r2, r3
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	4313      	orrs	r3, r2
 800614e:	697a      	ldr	r2, [r7, #20]
 8006150:	4313      	orrs	r3, r2
 8006152:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	697a      	ldr	r2, [r7, #20]
 8006158:	609a      	str	r2, [r3, #8]
}
 800615a:	bf00      	nop
 800615c:	371c      	adds	r7, #28
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr

08006166 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006166:	b480      	push	{r7}
 8006168:	b087      	sub	sp, #28
 800616a:	af00      	add	r7, sp, #0
 800616c:	60f8      	str	r0, [r7, #12]
 800616e:	60b9      	str	r1, [r7, #8]
 8006170:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	f003 031f 	and.w	r3, r3, #31
 8006178:	2201      	movs	r2, #1
 800617a:	fa02 f303 	lsl.w	r3, r2, r3
 800617e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	6a1a      	ldr	r2, [r3, #32]
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	43db      	mvns	r3, r3
 8006188:	401a      	ands	r2, r3
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6a1a      	ldr	r2, [r3, #32]
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	f003 031f 	and.w	r3, r3, #31
 8006198:	6879      	ldr	r1, [r7, #4]
 800619a:	fa01 f303 	lsl.w	r3, r1, r3
 800619e:	431a      	orrs	r2, r3
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	621a      	str	r2, [r3, #32]
}
 80061a4:	bf00      	nop
 80061a6:	371c      	adds	r7, #28
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr

080061b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b085      	sub	sp, #20
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d101      	bne.n	80061c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061c4:	2302      	movs	r3, #2
 80061c6:	e05a      	b.n	800627e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2201      	movs	r2, #1
 80061cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2202      	movs	r2, #2
 80061d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	68fa      	ldr	r2, [r7, #12]
 80061f6:	4313      	orrs	r3, r2
 80061f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	68fa      	ldr	r2, [r7, #12]
 8006200:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a21      	ldr	r2, [pc, #132]	@ (800628c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d022      	beq.n	8006252 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006214:	d01d      	beq.n	8006252 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a1d      	ldr	r2, [pc, #116]	@ (8006290 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d018      	beq.n	8006252 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a1b      	ldr	r2, [pc, #108]	@ (8006294 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d013      	beq.n	8006252 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a1a      	ldr	r2, [pc, #104]	@ (8006298 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d00e      	beq.n	8006252 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a18      	ldr	r2, [pc, #96]	@ (800629c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d009      	beq.n	8006252 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a17      	ldr	r2, [pc, #92]	@ (80062a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d004      	beq.n	8006252 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a15      	ldr	r2, [pc, #84]	@ (80062a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d10c      	bne.n	800626c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006258:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	68ba      	ldr	r2, [r7, #8]
 8006260:	4313      	orrs	r3, r2
 8006262:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	68ba      	ldr	r2, [r7, #8]
 800626a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2201      	movs	r2, #1
 8006270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800627c:	2300      	movs	r3, #0
}
 800627e:	4618      	mov	r0, r3
 8006280:	3714      	adds	r7, #20
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr
 800628a:	bf00      	nop
 800628c:	40010000 	.word	0x40010000
 8006290:	40000400 	.word	0x40000400
 8006294:	40000800 	.word	0x40000800
 8006298:	40000c00 	.word	0x40000c00
 800629c:	40010400 	.word	0x40010400
 80062a0:	40014000 	.word	0x40014000
 80062a4:	40001800 	.word	0x40001800

080062a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b085      	sub	sp, #20
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80062b2:	2300      	movs	r3, #0
 80062b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d101      	bne.n	80062c4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80062c0:	2302      	movs	r3, #2
 80062c2:	e03d      	b.n	8006340 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2201      	movs	r2, #1
 80062c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	68db      	ldr	r3, [r3, #12]
 80062d6:	4313      	orrs	r3, r2
 80062d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	4313      	orrs	r3, r2
 80062e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4313      	orrs	r3, r2
 8006302:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	691b      	ldr	r3, [r3, #16]
 800630e:	4313      	orrs	r3, r2
 8006310:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	695b      	ldr	r3, [r3, #20]
 800631c:	4313      	orrs	r3, r2
 800631e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	69db      	ldr	r3, [r3, #28]
 800632a:	4313      	orrs	r3, r2
 800632c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	68fa      	ldr	r2, [r7, #12]
 8006334:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2200      	movs	r2, #0
 800633a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800633e:	2300      	movs	r3, #0
}
 8006340:	4618      	mov	r0, r3
 8006342:	3714      	adds	r7, #20
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006354:	bf00      	nop
 8006356:	370c      	adds	r7, #12
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr

08006360 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006360:	b480      	push	{r7}
 8006362:	b083      	sub	sp, #12
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006368:	bf00      	nop
 800636a:	370c      	adds	r7, #12
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr

08006374 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006374:	b084      	sub	sp, #16
 8006376:	b580      	push	{r7, lr}
 8006378:	b084      	sub	sp, #16
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]
 800637e:	f107 001c 	add.w	r0, r7, #28
 8006382:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006386:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800638a:	2b01      	cmp	r3, #1
 800638c:	d123      	bne.n	80063d6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006392:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80063a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	68db      	ldr	r3, [r3, #12]
 80063ae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80063b6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d105      	bne.n	80063ca <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	68db      	ldr	r3, [r3, #12]
 80063c2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f000 f9dc 	bl	8006788 <USB_CoreReset>
 80063d0:	4603      	mov	r3, r0
 80063d2:	73fb      	strb	r3, [r7, #15]
 80063d4:	e01b      	b.n	800640e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	68db      	ldr	r3, [r3, #12]
 80063da:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 f9d0 	bl	8006788 <USB_CoreReset>
 80063e8:	4603      	mov	r3, r0
 80063ea:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80063ec:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d106      	bne.n	8006402 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063f8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	639a      	str	r2, [r3, #56]	@ 0x38
 8006400:	e005      	b.n	800640e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006406:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800640e:	7fbb      	ldrb	r3, [r7, #30]
 8006410:	2b01      	cmp	r3, #1
 8006412:	d10b      	bne.n	800642c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	f043 0206 	orr.w	r2, r3, #6
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	f043 0220 	orr.w	r2, r3, #32
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800642c:	7bfb      	ldrb	r3, [r7, #15]
}
 800642e:	4618      	mov	r0, r3
 8006430:	3710      	adds	r7, #16
 8006432:	46bd      	mov	sp, r7
 8006434:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006438:	b004      	add	sp, #16
 800643a:	4770      	bx	lr

0800643c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800643c:	b480      	push	{r7}
 800643e:	b083      	sub	sp, #12
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	f043 0201 	orr.w	r2, r3, #1
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006450:	2300      	movs	r3, #0
}
 8006452:	4618      	mov	r0, r3
 8006454:	370c      	adds	r7, #12
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr

0800645e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800645e:	b480      	push	{r7}
 8006460:	b083      	sub	sp, #12
 8006462:	af00      	add	r7, sp, #0
 8006464:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	f023 0201 	bic.w	r2, r3, #1
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006472:	2300      	movs	r3, #0
}
 8006474:	4618      	mov	r0, r3
 8006476:	370c      	adds	r7, #12
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr

08006480 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	460b      	mov	r3, r1
 800648a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800648c:	2300      	movs	r3, #0
 800648e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	68db      	ldr	r3, [r3, #12]
 8006494:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800649c:	78fb      	ldrb	r3, [r7, #3]
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d115      	bne.n	80064ce <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	68db      	ldr	r3, [r3, #12]
 80064a6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80064ae:	200a      	movs	r0, #10
 80064b0:	f7fb fa02 	bl	80018b8 <HAL_Delay>
      ms += 10U;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	330a      	adds	r3, #10
 80064b8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 f956 	bl	800676c <USB_GetMode>
 80064c0:	4603      	mov	r3, r0
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d01e      	beq.n	8006504 <USB_SetCurrentMode+0x84>
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2bc7      	cmp	r3, #199	@ 0xc7
 80064ca:	d9f0      	bls.n	80064ae <USB_SetCurrentMode+0x2e>
 80064cc:	e01a      	b.n	8006504 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80064ce:	78fb      	ldrb	r3, [r7, #3]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d115      	bne.n	8006500 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80064e0:	200a      	movs	r0, #10
 80064e2:	f7fb f9e9 	bl	80018b8 <HAL_Delay>
      ms += 10U;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	330a      	adds	r3, #10
 80064ea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f000 f93d 	bl	800676c <USB_GetMode>
 80064f2:	4603      	mov	r3, r0
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d005      	beq.n	8006504 <USB_SetCurrentMode+0x84>
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2bc7      	cmp	r3, #199	@ 0xc7
 80064fc:	d9f0      	bls.n	80064e0 <USB_SetCurrentMode+0x60>
 80064fe:	e001      	b.n	8006504 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006500:	2301      	movs	r3, #1
 8006502:	e005      	b.n	8006510 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2bc8      	cmp	r3, #200	@ 0xc8
 8006508:	d101      	bne.n	800650e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	e000      	b.n	8006510 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800650e:	2300      	movs	r3, #0
}
 8006510:	4618      	mov	r0, r3
 8006512:	3710      	adds	r7, #16
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}

08006518 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006518:	b480      	push	{r7}
 800651a:	b085      	sub	sp, #20
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006522:	2300      	movs	r3, #0
 8006524:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	3301      	adds	r3, #1
 800652a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006532:	d901      	bls.n	8006538 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006534:	2303      	movs	r3, #3
 8006536:	e01b      	b.n	8006570 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	691b      	ldr	r3, [r3, #16]
 800653c:	2b00      	cmp	r3, #0
 800653e:	daf2      	bge.n	8006526 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006540:	2300      	movs	r3, #0
 8006542:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	019b      	lsls	r3, r3, #6
 8006548:	f043 0220 	orr.w	r2, r3, #32
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	3301      	adds	r3, #1
 8006554:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800655c:	d901      	bls.n	8006562 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800655e:	2303      	movs	r3, #3
 8006560:	e006      	b.n	8006570 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	691b      	ldr	r3, [r3, #16]
 8006566:	f003 0320 	and.w	r3, r3, #32
 800656a:	2b20      	cmp	r3, #32
 800656c:	d0f0      	beq.n	8006550 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800656e:	2300      	movs	r3, #0
}
 8006570:	4618      	mov	r0, r3
 8006572:	3714      	adds	r7, #20
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr

0800657c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800657c:	b480      	push	{r7}
 800657e:	b085      	sub	sp, #20
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006584:	2300      	movs	r3, #0
 8006586:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	3301      	adds	r3, #1
 800658c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006594:	d901      	bls.n	800659a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006596:	2303      	movs	r3, #3
 8006598:	e018      	b.n	80065cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	691b      	ldr	r3, [r3, #16]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	daf2      	bge.n	8006588 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80065a2:	2300      	movs	r3, #0
 80065a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2210      	movs	r2, #16
 80065aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	3301      	adds	r3, #1
 80065b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80065b8:	d901      	bls.n	80065be <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80065ba:	2303      	movs	r3, #3
 80065bc:	e006      	b.n	80065cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	691b      	ldr	r3, [r3, #16]
 80065c2:	f003 0310 	and.w	r3, r3, #16
 80065c6:	2b10      	cmp	r3, #16
 80065c8:	d0f0      	beq.n	80065ac <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80065ca:	2300      	movs	r3, #0
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3714      	adds	r7, #20
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr

080065d8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80065d8:	b480      	push	{r7}
 80065da:	b089      	sub	sp, #36	@ 0x24
 80065dc:	af00      	add	r7, sp, #0
 80065de:	60f8      	str	r0, [r7, #12]
 80065e0:	60b9      	str	r1, [r7, #8]
 80065e2:	4611      	mov	r1, r2
 80065e4:	461a      	mov	r2, r3
 80065e6:	460b      	mov	r3, r1
 80065e8:	71fb      	strb	r3, [r7, #7]
 80065ea:	4613      	mov	r3, r2
 80065ec:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80065f6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d123      	bne.n	8006646 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80065fe:	88bb      	ldrh	r3, [r7, #4]
 8006600:	3303      	adds	r3, #3
 8006602:	089b      	lsrs	r3, r3, #2
 8006604:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006606:	2300      	movs	r3, #0
 8006608:	61bb      	str	r3, [r7, #24]
 800660a:	e018      	b.n	800663e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800660c:	79fb      	ldrb	r3, [r7, #7]
 800660e:	031a      	lsls	r2, r3, #12
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	4413      	add	r3, r2
 8006614:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006618:	461a      	mov	r2, r3
 800661a:	69fb      	ldr	r3, [r7, #28]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006620:	69fb      	ldr	r3, [r7, #28]
 8006622:	3301      	adds	r3, #1
 8006624:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006626:	69fb      	ldr	r3, [r7, #28]
 8006628:	3301      	adds	r3, #1
 800662a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800662c:	69fb      	ldr	r3, [r7, #28]
 800662e:	3301      	adds	r3, #1
 8006630:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006632:	69fb      	ldr	r3, [r7, #28]
 8006634:	3301      	adds	r3, #1
 8006636:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006638:	69bb      	ldr	r3, [r7, #24]
 800663a:	3301      	adds	r3, #1
 800663c:	61bb      	str	r3, [r7, #24]
 800663e:	69ba      	ldr	r2, [r7, #24]
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	429a      	cmp	r2, r3
 8006644:	d3e2      	bcc.n	800660c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006646:	2300      	movs	r3, #0
}
 8006648:	4618      	mov	r0, r3
 800664a:	3724      	adds	r7, #36	@ 0x24
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr

08006654 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006654:	b480      	push	{r7}
 8006656:	b08b      	sub	sp, #44	@ 0x2c
 8006658:	af00      	add	r7, sp, #0
 800665a:	60f8      	str	r0, [r7, #12]
 800665c:	60b9      	str	r1, [r7, #8]
 800665e:	4613      	mov	r3, r2
 8006660:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800666a:	88fb      	ldrh	r3, [r7, #6]
 800666c:	089b      	lsrs	r3, r3, #2
 800666e:	b29b      	uxth	r3, r3
 8006670:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006672:	88fb      	ldrh	r3, [r7, #6]
 8006674:	f003 0303 	and.w	r3, r3, #3
 8006678:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800667a:	2300      	movs	r3, #0
 800667c:	623b      	str	r3, [r7, #32]
 800667e:	e014      	b.n	80066aa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006680:	69bb      	ldr	r3, [r7, #24]
 8006682:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800668a:	601a      	str	r2, [r3, #0]
    pDest++;
 800668c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800668e:	3301      	adds	r3, #1
 8006690:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006694:	3301      	adds	r3, #1
 8006696:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800669a:	3301      	adds	r3, #1
 800669c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800669e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a0:	3301      	adds	r3, #1
 80066a2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80066a4:	6a3b      	ldr	r3, [r7, #32]
 80066a6:	3301      	adds	r3, #1
 80066a8:	623b      	str	r3, [r7, #32]
 80066aa:	6a3a      	ldr	r2, [r7, #32]
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d3e6      	bcc.n	8006680 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80066b2:	8bfb      	ldrh	r3, [r7, #30]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d01e      	beq.n	80066f6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80066b8:	2300      	movs	r3, #0
 80066ba:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80066bc:	69bb      	ldr	r3, [r7, #24]
 80066be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066c2:	461a      	mov	r2, r3
 80066c4:	f107 0310 	add.w	r3, r7, #16
 80066c8:	6812      	ldr	r2, [r2, #0]
 80066ca:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80066cc:	693a      	ldr	r2, [r7, #16]
 80066ce:	6a3b      	ldr	r3, [r7, #32]
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	00db      	lsls	r3, r3, #3
 80066d4:	fa22 f303 	lsr.w	r3, r2, r3
 80066d8:	b2da      	uxtb	r2, r3
 80066da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066dc:	701a      	strb	r2, [r3, #0]
      i++;
 80066de:	6a3b      	ldr	r3, [r7, #32]
 80066e0:	3301      	adds	r3, #1
 80066e2:	623b      	str	r3, [r7, #32]
      pDest++;
 80066e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066e6:	3301      	adds	r3, #1
 80066e8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80066ea:	8bfb      	ldrh	r3, [r7, #30]
 80066ec:	3b01      	subs	r3, #1
 80066ee:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80066f0:	8bfb      	ldrh	r3, [r7, #30]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d1ea      	bne.n	80066cc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80066f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	372c      	adds	r7, #44	@ 0x2c
 80066fc:	46bd      	mov	sp, r7
 80066fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006702:	4770      	bx	lr

08006704 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006704:	b480      	push	{r7}
 8006706:	b085      	sub	sp, #20
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	695b      	ldr	r3, [r3, #20]
 8006710:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	699b      	ldr	r3, [r3, #24]
 8006716:	68fa      	ldr	r2, [r7, #12]
 8006718:	4013      	ands	r3, r2
 800671a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800671c:	68fb      	ldr	r3, [r7, #12]
}
 800671e:	4618      	mov	r0, r3
 8006720:	3714      	adds	r7, #20
 8006722:	46bd      	mov	sp, r7
 8006724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006728:	4770      	bx	lr

0800672a <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800672a:	b480      	push	{r7}
 800672c:	b085      	sub	sp, #20
 800672e:	af00      	add	r7, sp, #0
 8006730:	6078      	str	r0, [r7, #4]
 8006732:	460b      	mov	r3, r1
 8006734:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800673a:	78fb      	ldrb	r3, [r7, #3]
 800673c:	015a      	lsls	r2, r3, #5
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	4413      	add	r3, r2
 8006742:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800674a:	78fb      	ldrb	r3, [r7, #3]
 800674c:	015a      	lsls	r2, r3, #5
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	4413      	add	r3, r2
 8006752:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006756:	68db      	ldr	r3, [r3, #12]
 8006758:	68ba      	ldr	r2, [r7, #8]
 800675a:	4013      	ands	r3, r2
 800675c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800675e:	68bb      	ldr	r3, [r7, #8]
}
 8006760:	4618      	mov	r0, r3
 8006762:	3714      	adds	r7, #20
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr

0800676c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800676c:	b480      	push	{r7}
 800676e:	b083      	sub	sp, #12
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	695b      	ldr	r3, [r3, #20]
 8006778:	f003 0301 	and.w	r3, r3, #1
}
 800677c:	4618      	mov	r0, r3
 800677e:	370c      	adds	r7, #12
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006788:	b480      	push	{r7}
 800678a:	b085      	sub	sp, #20
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006790:	2300      	movs	r3, #0
 8006792:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	3301      	adds	r3, #1
 8006798:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80067a0:	d901      	bls.n	80067a6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80067a2:	2303      	movs	r3, #3
 80067a4:	e01b      	b.n	80067de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	691b      	ldr	r3, [r3, #16]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	daf2      	bge.n	8006794 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80067ae:	2300      	movs	r3, #0
 80067b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	691b      	ldr	r3, [r3, #16]
 80067b6:	f043 0201 	orr.w	r2, r3, #1
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	3301      	adds	r3, #1
 80067c2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80067ca:	d901      	bls.n	80067d0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80067cc:	2303      	movs	r3, #3
 80067ce:	e006      	b.n	80067de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	691b      	ldr	r3, [r3, #16]
 80067d4:	f003 0301 	and.w	r3, r3, #1
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d0f0      	beq.n	80067be <USB_CoreReset+0x36>

  return HAL_OK;
 80067dc:	2300      	movs	r3, #0
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3714      	adds	r7, #20
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr
	...

080067ec <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80067ec:	b084      	sub	sp, #16
 80067ee:	b580      	push	{r7, lr}
 80067f0:	b086      	sub	sp, #24
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]
 80067f6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80067fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80067fe:	2300      	movs	r3, #0
 8006800:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800680c:	461a      	mov	r2, r3
 800680e:	2300      	movs	r3, #0
 8006810:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006816:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006822:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800682e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	68db      	ldr	r3, [r3, #12]
 800683a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800683e:	2b00      	cmp	r3, #0
 8006840:	d119      	bne.n	8006876 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006842:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006846:	2b01      	cmp	r3, #1
 8006848:	d10a      	bne.n	8006860 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	68fa      	ldr	r2, [r7, #12]
 8006854:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006858:	f043 0304 	orr.w	r3, r3, #4
 800685c:	6013      	str	r3, [r2, #0]
 800685e:	e014      	b.n	800688a <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	68fa      	ldr	r2, [r7, #12]
 800686a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800686e:	f023 0304 	bic.w	r3, r3, #4
 8006872:	6013      	str	r3, [r2, #0]
 8006874:	e009      	b.n	800688a <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	68fa      	ldr	r2, [r7, #12]
 8006880:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006884:	f023 0304 	bic.w	r3, r3, #4
 8006888:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800688a:	2110      	movs	r1, #16
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f7ff fe43 	bl	8006518 <USB_FlushTxFifo>
 8006892:	4603      	mov	r3, r0
 8006894:	2b00      	cmp	r3, #0
 8006896:	d001      	beq.n	800689c <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8006898:	2301      	movs	r3, #1
 800689a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f7ff fe6d 	bl	800657c <USB_FlushRxFifo>
 80068a2:	4603      	mov	r3, r0
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d001      	beq.n	80068ac <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 80068a8:	2301      	movs	r3, #1
 80068aa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80068ac:	2300      	movs	r3, #0
 80068ae:	613b      	str	r3, [r7, #16]
 80068b0:	e015      	b.n	80068de <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	015a      	lsls	r2, r3, #5
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	4413      	add	r3, r2
 80068ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068be:	461a      	mov	r2, r3
 80068c0:	f04f 33ff 	mov.w	r3, #4294967295
 80068c4:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	015a      	lsls	r2, r3, #5
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	4413      	add	r3, r2
 80068ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068d2:	461a      	mov	r2, r3
 80068d4:	2300      	movs	r3, #0
 80068d6:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	3301      	adds	r3, #1
 80068dc:	613b      	str	r3, [r7, #16]
 80068de:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80068e2:	461a      	mov	r2, r3
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d3e3      	bcc.n	80068b2 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2200      	movs	r2, #0
 80068ee:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f04f 32ff 	mov.w	r2, #4294967295
 80068f6:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	4a18      	ldr	r2, [pc, #96]	@ (800695c <USB_HostInit+0x170>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d10b      	bne.n	8006918 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006906:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	4a15      	ldr	r2, [pc, #84]	@ (8006960 <USB_HostInit+0x174>)
 800690c:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	4a14      	ldr	r2, [pc, #80]	@ (8006964 <USB_HostInit+0x178>)
 8006912:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8006916:	e009      	b.n	800692c <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2280      	movs	r2, #128	@ 0x80
 800691c:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	4a11      	ldr	r2, [pc, #68]	@ (8006968 <USB_HostInit+0x17c>)
 8006922:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	4a11      	ldr	r2, [pc, #68]	@ (800696c <USB_HostInit+0x180>)
 8006928:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800692c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006930:	2b00      	cmp	r3, #0
 8006932:	d105      	bne.n	8006940 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	699b      	ldr	r3, [r3, #24]
 8006938:	f043 0210 	orr.w	r2, r3, #16
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	699a      	ldr	r2, [r3, #24]
 8006944:	4b0a      	ldr	r3, [pc, #40]	@ (8006970 <USB_HostInit+0x184>)
 8006946:	4313      	orrs	r3, r2
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800694c:	7dfb      	ldrb	r3, [r7, #23]
}
 800694e:	4618      	mov	r0, r3
 8006950:	3718      	adds	r7, #24
 8006952:	46bd      	mov	sp, r7
 8006954:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006958:	b004      	add	sp, #16
 800695a:	4770      	bx	lr
 800695c:	40040000 	.word	0x40040000
 8006960:	01000200 	.word	0x01000200
 8006964:	00e00300 	.word	0x00e00300
 8006968:	00600080 	.word	0x00600080
 800696c:	004000e0 	.word	0x004000e0
 8006970:	a3200008 	.word	0xa3200008

08006974 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006974:	b480      	push	{r7}
 8006976:	b085      	sub	sp, #20
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	460b      	mov	r3, r1
 800697e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	68fa      	ldr	r2, [r7, #12]
 800698e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006992:	f023 0303 	bic.w	r3, r3, #3
 8006996:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	78fb      	ldrb	r3, [r7, #3]
 80069a2:	f003 0303 	and.w	r3, r3, #3
 80069a6:	68f9      	ldr	r1, [r7, #12]
 80069a8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80069ac:	4313      	orrs	r3, r2
 80069ae:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80069b0:	78fb      	ldrb	r3, [r7, #3]
 80069b2:	2b01      	cmp	r3, #1
 80069b4:	d107      	bne.n	80069c6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80069bc:	461a      	mov	r2, r3
 80069be:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80069c2:	6053      	str	r3, [r2, #4]
 80069c4:	e00c      	b.n	80069e0 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80069c6:	78fb      	ldrb	r3, [r7, #3]
 80069c8:	2b02      	cmp	r3, #2
 80069ca:	d107      	bne.n	80069dc <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80069d2:	461a      	mov	r2, r3
 80069d4:	f241 7370 	movw	r3, #6000	@ 0x1770
 80069d8:	6053      	str	r3, [r2, #4]
 80069da:	e001      	b.n	80069e0 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80069dc:	2301      	movs	r3, #1
 80069de:	e000      	b.n	80069e2 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80069e0:	2300      	movs	r3, #0
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3714      	adds	r7, #20
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr

080069ee <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 80069ee:	b580      	push	{r7, lr}
 80069f0:	b084      	sub	sp, #16
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80069fa:	2300      	movs	r3, #0
 80069fc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006a0e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	68fa      	ldr	r2, [r7, #12]
 8006a14:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006a18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a1c:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006a1e:	2064      	movs	r0, #100	@ 0x64
 8006a20:	f7fa ff4a 	bl	80018b8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	68fa      	ldr	r2, [r7, #12]
 8006a28:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006a2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a30:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006a32:	200a      	movs	r0, #10
 8006a34:	f7fa ff40 	bl	80018b8 <HAL_Delay>

  return HAL_OK;
 8006a38:	2300      	movs	r3, #0
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3710      	adds	r7, #16
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}

08006a42 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006a42:	b480      	push	{r7}
 8006a44:	b085      	sub	sp, #20
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
 8006a4a:	460b      	mov	r3, r1
 8006a4c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006a52:	2300      	movs	r3, #0
 8006a54:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006a66:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d109      	bne.n	8006a86 <USB_DriveVbus+0x44>
 8006a72:	78fb      	ldrb	r3, [r7, #3]
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d106      	bne.n	8006a86 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	68fa      	ldr	r2, [r7, #12]
 8006a7c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006a80:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006a84:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006a8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a90:	d109      	bne.n	8006aa6 <USB_DriveVbus+0x64>
 8006a92:	78fb      	ldrb	r3, [r7, #3]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d106      	bne.n	8006aa6 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	68fa      	ldr	r2, [r7, #12]
 8006a9c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006aa0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006aa4:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006aa6:	2300      	movs	r3, #0
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3714      	adds	r7, #20
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr

08006ab4 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b085      	sub	sp, #20
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	0c5b      	lsrs	r3, r3, #17
 8006ad2:	f003 0303 	and.w	r3, r3, #3
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3714      	adds	r7, #20
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr

08006ae2 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8006ae2:	b480      	push	{r7}
 8006ae4:	b085      	sub	sp, #20
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006af4:	689b      	ldr	r3, [r3, #8]
 8006af6:	b29b      	uxth	r3, r3
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3714      	adds	r7, #20
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr

08006b04 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b088      	sub	sp, #32
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
 8006b0c:	4608      	mov	r0, r1
 8006b0e:	4611      	mov	r1, r2
 8006b10:	461a      	mov	r2, r3
 8006b12:	4603      	mov	r3, r0
 8006b14:	70fb      	strb	r3, [r7, #3]
 8006b16:	460b      	mov	r3, r1
 8006b18:	70bb      	strb	r3, [r7, #2]
 8006b1a:	4613      	mov	r3, r2
 8006b1c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8006b26:	78fb      	ldrb	r3, [r7, #3]
 8006b28:	015a      	lsls	r2, r3, #5
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	4413      	add	r3, r2
 8006b2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b32:	461a      	mov	r2, r3
 8006b34:	f04f 33ff 	mov.w	r3, #4294967295
 8006b38:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006b3a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006b3e:	2b03      	cmp	r3, #3
 8006b40:	d87c      	bhi.n	8006c3c <USB_HC_Init+0x138>
 8006b42:	a201      	add	r2, pc, #4	@ (adr r2, 8006b48 <USB_HC_Init+0x44>)
 8006b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b48:	08006b59 	.word	0x08006b59
 8006b4c:	08006bff 	.word	0x08006bff
 8006b50:	08006b59 	.word	0x08006b59
 8006b54:	08006bc1 	.word	0x08006bc1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006b58:	78fb      	ldrb	r3, [r7, #3]
 8006b5a:	015a      	lsls	r2, r3, #5
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	4413      	add	r3, r2
 8006b60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b64:	461a      	mov	r2, r3
 8006b66:	f240 439d 	movw	r3, #1181	@ 0x49d
 8006b6a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006b6c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	da10      	bge.n	8006b96 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006b74:	78fb      	ldrb	r3, [r7, #3]
 8006b76:	015a      	lsls	r2, r3, #5
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	4413      	add	r3, r2
 8006b7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b80:	68db      	ldr	r3, [r3, #12]
 8006b82:	78fa      	ldrb	r2, [r7, #3]
 8006b84:	0151      	lsls	r1, r2, #5
 8006b86:	693a      	ldr	r2, [r7, #16]
 8006b88:	440a      	add	r2, r1
 8006b8a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006b8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b92:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8006b94:	e055      	b.n	8006c42 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	4a6f      	ldr	r2, [pc, #444]	@ (8006d58 <USB_HC_Init+0x254>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d151      	bne.n	8006c42 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006b9e:	78fb      	ldrb	r3, [r7, #3]
 8006ba0:	015a      	lsls	r2, r3, #5
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	4413      	add	r3, r2
 8006ba6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006baa:	68db      	ldr	r3, [r3, #12]
 8006bac:	78fa      	ldrb	r2, [r7, #3]
 8006bae:	0151      	lsls	r1, r2, #5
 8006bb0:	693a      	ldr	r2, [r7, #16]
 8006bb2:	440a      	add	r2, r1
 8006bb4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006bb8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006bbc:	60d3      	str	r3, [r2, #12]
      break;
 8006bbe:	e040      	b.n	8006c42 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006bc0:	78fb      	ldrb	r3, [r7, #3]
 8006bc2:	015a      	lsls	r2, r3, #5
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	4413      	add	r3, r2
 8006bc8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006bcc:	461a      	mov	r2, r3
 8006bce:	f240 639d 	movw	r3, #1693	@ 0x69d
 8006bd2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006bd4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	da34      	bge.n	8006c46 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006bdc:	78fb      	ldrb	r3, [r7, #3]
 8006bde:	015a      	lsls	r2, r3, #5
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	4413      	add	r3, r2
 8006be4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006be8:	68db      	ldr	r3, [r3, #12]
 8006bea:	78fa      	ldrb	r2, [r7, #3]
 8006bec:	0151      	lsls	r1, r2, #5
 8006bee:	693a      	ldr	r2, [r7, #16]
 8006bf0:	440a      	add	r2, r1
 8006bf2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006bf6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006bfa:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006bfc:	e023      	b.n	8006c46 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006bfe:	78fb      	ldrb	r3, [r7, #3]
 8006c00:	015a      	lsls	r2, r3, #5
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	4413      	add	r3, r2
 8006c06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	f240 2325 	movw	r3, #549	@ 0x225
 8006c10:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006c12:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	da17      	bge.n	8006c4a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006c1a:	78fb      	ldrb	r3, [r7, #3]
 8006c1c:	015a      	lsls	r2, r3, #5
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	4413      	add	r3, r2
 8006c22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c26:	68db      	ldr	r3, [r3, #12]
 8006c28:	78fa      	ldrb	r2, [r7, #3]
 8006c2a:	0151      	lsls	r1, r2, #5
 8006c2c:	693a      	ldr	r2, [r7, #16]
 8006c2e:	440a      	add	r2, r1
 8006c30:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006c34:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8006c38:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006c3a:	e006      	b.n	8006c4a <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	77fb      	strb	r3, [r7, #31]
      break;
 8006c40:	e004      	b.n	8006c4c <USB_HC_Init+0x148>
      break;
 8006c42:	bf00      	nop
 8006c44:	e002      	b.n	8006c4c <USB_HC_Init+0x148>
      break;
 8006c46:	bf00      	nop
 8006c48:	e000      	b.n	8006c4c <USB_HC_Init+0x148>
      break;
 8006c4a:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006c4c:	78fb      	ldrb	r3, [r7, #3]
 8006c4e:	015a      	lsls	r2, r3, #5
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	4413      	add	r3, r2
 8006c54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c58:	461a      	mov	r2, r3
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006c5e:	78fb      	ldrb	r3, [r7, #3]
 8006c60:	015a      	lsls	r2, r3, #5
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	4413      	add	r3, r2
 8006c66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c6a:	68db      	ldr	r3, [r3, #12]
 8006c6c:	78fa      	ldrb	r2, [r7, #3]
 8006c6e:	0151      	lsls	r1, r2, #5
 8006c70:	693a      	ldr	r2, [r7, #16]
 8006c72:	440a      	add	r2, r1
 8006c74:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006c78:	f043 0302 	orr.w	r3, r3, #2
 8006c7c:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006c84:	699a      	ldr	r2, [r3, #24]
 8006c86:	78fb      	ldrb	r3, [r7, #3]
 8006c88:	f003 030f 	and.w	r3, r3, #15
 8006c8c:	2101      	movs	r1, #1
 8006c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8006c92:	6939      	ldr	r1, [r7, #16]
 8006c94:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	699b      	ldr	r3, [r3, #24]
 8006ca0:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006ca8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	da03      	bge.n	8006cb8 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006cb0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006cb4:	61bb      	str	r3, [r7, #24]
 8006cb6:	e001      	b.n	8006cbc <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f7ff fef9 	bl	8006ab4 <USB_GetHostSpeed>
 8006cc2:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006cc4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006cc8:	2b02      	cmp	r3, #2
 8006cca:	d106      	bne.n	8006cda <USB_HC_Init+0x1d6>
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2b02      	cmp	r3, #2
 8006cd0:	d003      	beq.n	8006cda <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006cd2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006cd6:	617b      	str	r3, [r7, #20]
 8006cd8:	e001      	b.n	8006cde <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006cde:	787b      	ldrb	r3, [r7, #1]
 8006ce0:	059b      	lsls	r3, r3, #22
 8006ce2:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006ce6:	78bb      	ldrb	r3, [r7, #2]
 8006ce8:	02db      	lsls	r3, r3, #11
 8006cea:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006cee:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006cf0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006cf4:	049b      	lsls	r3, r3, #18
 8006cf6:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006cfa:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8006cfc:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8006cfe:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006d02:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006d04:	69bb      	ldr	r3, [r7, #24]
 8006d06:	431a      	orrs	r2, r3
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006d0c:	78fa      	ldrb	r2, [r7, #3]
 8006d0e:	0151      	lsls	r1, r2, #5
 8006d10:	693a      	ldr	r2, [r7, #16]
 8006d12:	440a      	add	r2, r1
 8006d14:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006d18:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006d1c:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006d1e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006d22:	2b03      	cmp	r3, #3
 8006d24:	d003      	beq.n	8006d2e <USB_HC_Init+0x22a>
 8006d26:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	d10f      	bne.n	8006d4e <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006d2e:	78fb      	ldrb	r3, [r7, #3]
 8006d30:	015a      	lsls	r2, r3, #5
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	4413      	add	r3, r2
 8006d36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	78fa      	ldrb	r2, [r7, #3]
 8006d3e:	0151      	lsls	r1, r2, #5
 8006d40:	693a      	ldr	r2, [r7, #16]
 8006d42:	440a      	add	r2, r1
 8006d44:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006d48:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006d4c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006d4e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3720      	adds	r7, #32
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}
 8006d58:	40040000 	.word	0x40040000

08006d5c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b08c      	sub	sp, #48	@ 0x30
 8006d60:	af02      	add	r7, sp, #8
 8006d62:	60f8      	str	r0, [r7, #12]
 8006d64:	60b9      	str	r1, [r7, #8]
 8006d66:	4613      	mov	r3, r2
 8006d68:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	785b      	ldrb	r3, [r3, #1]
 8006d72:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8006d74:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006d78:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	4a5d      	ldr	r2, [pc, #372]	@ (8006ef4 <USB_HC_StartXfer+0x198>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d12f      	bne.n	8006de2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8006d82:	79fb      	ldrb	r3, [r7, #7]
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d11c      	bne.n	8006dc2 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	7c9b      	ldrb	r3, [r3, #18]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d003      	beq.n	8006d98 <USB_HC_StartXfer+0x3c>
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	7c9b      	ldrb	r3, [r3, #18]
 8006d94:	2b02      	cmp	r3, #2
 8006d96:	d124      	bne.n	8006de2 <USB_HC_StartXfer+0x86>
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	799b      	ldrb	r3, [r3, #6]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d120      	bne.n	8006de2 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006da0:	69fb      	ldr	r3, [r7, #28]
 8006da2:	015a      	lsls	r2, r3, #5
 8006da4:	6a3b      	ldr	r3, [r7, #32]
 8006da6:	4413      	add	r3, r2
 8006da8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006dac:	68db      	ldr	r3, [r3, #12]
 8006dae:	69fa      	ldr	r2, [r7, #28]
 8006db0:	0151      	lsls	r1, r2, #5
 8006db2:	6a3a      	ldr	r2, [r7, #32]
 8006db4:	440a      	add	r2, r1
 8006db6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006dba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006dbe:	60d3      	str	r3, [r2, #12]
 8006dc0:	e00f      	b.n	8006de2 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	791b      	ldrb	r3, [r3, #4]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d10b      	bne.n	8006de2 <USB_HC_StartXfer+0x86>
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	795b      	ldrb	r3, [r3, #5]
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d107      	bne.n	8006de2 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	785b      	ldrb	r3, [r3, #1]
 8006dd6:	4619      	mov	r1, r3
 8006dd8:	68f8      	ldr	r0, [r7, #12]
 8006dda:	f000 fb6b 	bl	80074b4 <USB_DoPing>
        return HAL_OK;
 8006dde:	2300      	movs	r3, #0
 8006de0:	e232      	b.n	8007248 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	799b      	ldrb	r3, [r3, #6]
 8006de6:	2b01      	cmp	r3, #1
 8006de8:	d158      	bne.n	8006e9c <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8006dea:	2301      	movs	r3, #1
 8006dec:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	78db      	ldrb	r3, [r3, #3]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d007      	beq.n	8006e06 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006df6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006df8:	68ba      	ldr	r2, [r7, #8]
 8006dfa:	8a92      	ldrh	r2, [r2, #20]
 8006dfc:	fb03 f202 	mul.w	r2, r3, r2
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	61da      	str	r2, [r3, #28]
 8006e04:	e07c      	b.n	8006f00 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	7c9b      	ldrb	r3, [r3, #18]
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d130      	bne.n	8006e70 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	6a1b      	ldr	r3, [r3, #32]
 8006e12:	2bbc      	cmp	r3, #188	@ 0xbc
 8006e14:	d918      	bls.n	8006e48 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	8a9b      	ldrh	r3, [r3, #20]
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	69da      	ldr	r2, [r3, #28]
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	68db      	ldr	r3, [r3, #12]
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d003      	beq.n	8006e38 <USB_HC_StartXfer+0xdc>
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	68db      	ldr	r3, [r3, #12]
 8006e34:	2b02      	cmp	r3, #2
 8006e36:	d103      	bne.n	8006e40 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	2202      	movs	r2, #2
 8006e3c:	60da      	str	r2, [r3, #12]
 8006e3e:	e05f      	b.n	8006f00 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	2201      	movs	r2, #1
 8006e44:	60da      	str	r2, [r3, #12]
 8006e46:	e05b      	b.n	8006f00 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	6a1a      	ldr	r2, [r3, #32]
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	68db      	ldr	r3, [r3, #12]
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d007      	beq.n	8006e68 <USB_HC_StartXfer+0x10c>
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	68db      	ldr	r3, [r3, #12]
 8006e5c:	2b02      	cmp	r3, #2
 8006e5e:	d003      	beq.n	8006e68 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	2204      	movs	r2, #4
 8006e64:	60da      	str	r2, [r3, #12]
 8006e66:	e04b      	b.n	8006f00 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	2203      	movs	r2, #3
 8006e6c:	60da      	str	r2, [r3, #12]
 8006e6e:	e047      	b.n	8006f00 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8006e70:	79fb      	ldrb	r3, [r7, #7]
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	d10d      	bne.n	8006e92 <USB_HC_StartXfer+0x136>
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	6a1b      	ldr	r3, [r3, #32]
 8006e7a:	68ba      	ldr	r2, [r7, #8]
 8006e7c:	8a92      	ldrh	r2, [r2, #20]
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d907      	bls.n	8006e92 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006e82:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006e84:	68ba      	ldr	r2, [r7, #8]
 8006e86:	8a92      	ldrh	r2, [r2, #20]
 8006e88:	fb03 f202 	mul.w	r2, r3, r2
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	61da      	str	r2, [r3, #28]
 8006e90:	e036      	b.n	8006f00 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	6a1a      	ldr	r2, [r3, #32]
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	61da      	str	r2, [r3, #28]
 8006e9a:	e031      	b.n	8006f00 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	6a1b      	ldr	r3, [r3, #32]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d018      	beq.n	8006ed6 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	6a1b      	ldr	r3, [r3, #32]
 8006ea8:	68ba      	ldr	r2, [r7, #8]
 8006eaa:	8a92      	ldrh	r2, [r2, #20]
 8006eac:	4413      	add	r3, r2
 8006eae:	3b01      	subs	r3, #1
 8006eb0:	68ba      	ldr	r2, [r7, #8]
 8006eb2:	8a92      	ldrh	r2, [r2, #20]
 8006eb4:	fbb3 f3f2 	udiv	r3, r3, r2
 8006eb8:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8006eba:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006ebc:	8b7b      	ldrh	r3, [r7, #26]
 8006ebe:	429a      	cmp	r2, r3
 8006ec0:	d90b      	bls.n	8006eda <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8006ec2:	8b7b      	ldrh	r3, [r7, #26]
 8006ec4:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006ec6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006ec8:	68ba      	ldr	r2, [r7, #8]
 8006eca:	8a92      	ldrh	r2, [r2, #20]
 8006ecc:	fb03 f202 	mul.w	r2, r3, r2
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	61da      	str	r2, [r3, #28]
 8006ed4:	e001      	b.n	8006eda <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	78db      	ldrb	r3, [r3, #3]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d00a      	beq.n	8006ef8 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006ee2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006ee4:	68ba      	ldr	r2, [r7, #8]
 8006ee6:	8a92      	ldrh	r2, [r2, #20]
 8006ee8:	fb03 f202 	mul.w	r2, r3, r2
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	61da      	str	r2, [r3, #28]
 8006ef0:	e006      	b.n	8006f00 <USB_HC_StartXfer+0x1a4>
 8006ef2:	bf00      	nop
 8006ef4:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	6a1a      	ldr	r2, [r3, #32]
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	69db      	ldr	r3, [r3, #28]
 8006f04:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006f08:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006f0a:	04d9      	lsls	r1, r3, #19
 8006f0c:	4ba3      	ldr	r3, [pc, #652]	@ (800719c <USB_HC_StartXfer+0x440>)
 8006f0e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006f10:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	7d9b      	ldrb	r3, [r3, #22]
 8006f16:	075b      	lsls	r3, r3, #29
 8006f18:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006f1c:	69f9      	ldr	r1, [r7, #28]
 8006f1e:	0148      	lsls	r0, r1, #5
 8006f20:	6a39      	ldr	r1, [r7, #32]
 8006f22:	4401      	add	r1, r0
 8006f24:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006f28:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006f2a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006f2c:	79fb      	ldrb	r3, [r7, #7]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d009      	beq.n	8006f46 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	6999      	ldr	r1, [r3, #24]
 8006f36:	69fb      	ldr	r3, [r7, #28]
 8006f38:	015a      	lsls	r2, r3, #5
 8006f3a:	6a3b      	ldr	r3, [r7, #32]
 8006f3c:	4413      	add	r3, r2
 8006f3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f42:	460a      	mov	r2, r1
 8006f44:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006f46:	6a3b      	ldr	r3, [r7, #32]
 8006f48:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006f4c:	689b      	ldr	r3, [r3, #8]
 8006f4e:	f003 0301 	and.w	r3, r3, #1
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	bf0c      	ite	eq
 8006f56:	2301      	moveq	r3, #1
 8006f58:	2300      	movne	r3, #0
 8006f5a:	b2db      	uxtb	r3, r3
 8006f5c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006f5e:	69fb      	ldr	r3, [r7, #28]
 8006f60:	015a      	lsls	r2, r3, #5
 8006f62:	6a3b      	ldr	r3, [r7, #32]
 8006f64:	4413      	add	r3, r2
 8006f66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	69fa      	ldr	r2, [r7, #28]
 8006f6e:	0151      	lsls	r1, r2, #5
 8006f70:	6a3a      	ldr	r2, [r7, #32]
 8006f72:	440a      	add	r2, r1
 8006f74:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006f78:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006f7c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006f7e:	69fb      	ldr	r3, [r7, #28]
 8006f80:	015a      	lsls	r2, r3, #5
 8006f82:	6a3b      	ldr	r3, [r7, #32]
 8006f84:	4413      	add	r3, r2
 8006f86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f8a:	681a      	ldr	r2, [r3, #0]
 8006f8c:	7e7b      	ldrb	r3, [r7, #25]
 8006f8e:	075b      	lsls	r3, r3, #29
 8006f90:	69f9      	ldr	r1, [r7, #28]
 8006f92:	0148      	lsls	r0, r1, #5
 8006f94:	6a39      	ldr	r1, [r7, #32]
 8006f96:	4401      	add	r1, r0
 8006f98:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	799b      	ldrb	r3, [r3, #6]
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	f040 80c3 	bne.w	8007130 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	7c5b      	ldrb	r3, [r3, #17]
 8006fae:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006fb0:	68ba      	ldr	r2, [r7, #8]
 8006fb2:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	69fa      	ldr	r2, [r7, #28]
 8006fb8:	0151      	lsls	r1, r2, #5
 8006fba:	6a3a      	ldr	r2, [r7, #32]
 8006fbc:	440a      	add	r2, r1
 8006fbe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006fc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006fc6:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8006fc8:	69fb      	ldr	r3, [r7, #28]
 8006fca:	015a      	lsls	r2, r3, #5
 8006fcc:	6a3b      	ldr	r3, [r7, #32]
 8006fce:	4413      	add	r3, r2
 8006fd0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006fd4:	68db      	ldr	r3, [r3, #12]
 8006fd6:	69fa      	ldr	r2, [r7, #28]
 8006fd8:	0151      	lsls	r1, r2, #5
 8006fda:	6a3a      	ldr	r2, [r7, #32]
 8006fdc:	440a      	add	r2, r1
 8006fde:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006fe2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006fe6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	79db      	ldrb	r3, [r3, #7]
 8006fec:	2b01      	cmp	r3, #1
 8006fee:	d123      	bne.n	8007038 <USB_HC_StartXfer+0x2dc>
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	78db      	ldrb	r3, [r3, #3]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d11f      	bne.n	8007038 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006ff8:	69fb      	ldr	r3, [r7, #28]
 8006ffa:	015a      	lsls	r2, r3, #5
 8006ffc:	6a3b      	ldr	r3, [r7, #32]
 8006ffe:	4413      	add	r3, r2
 8007000:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	69fa      	ldr	r2, [r7, #28]
 8007008:	0151      	lsls	r1, r2, #5
 800700a:	6a3a      	ldr	r2, [r7, #32]
 800700c:	440a      	add	r2, r1
 800700e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007012:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007016:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8007018:	69fb      	ldr	r3, [r7, #28]
 800701a:	015a      	lsls	r2, r3, #5
 800701c:	6a3b      	ldr	r3, [r7, #32]
 800701e:	4413      	add	r3, r2
 8007020:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007024:	68db      	ldr	r3, [r3, #12]
 8007026:	69fa      	ldr	r2, [r7, #28]
 8007028:	0151      	lsls	r1, r2, #5
 800702a:	6a3a      	ldr	r2, [r7, #32]
 800702c:	440a      	add	r2, r1
 800702e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007032:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007036:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	7c9b      	ldrb	r3, [r3, #18]
 800703c:	2b01      	cmp	r3, #1
 800703e:	d003      	beq.n	8007048 <USB_HC_StartXfer+0x2ec>
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	7c9b      	ldrb	r3, [r3, #18]
 8007044:	2b03      	cmp	r3, #3
 8007046:	d117      	bne.n	8007078 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800704c:	2b01      	cmp	r3, #1
 800704e:	d113      	bne.n	8007078 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	78db      	ldrb	r3, [r3, #3]
 8007054:	2b01      	cmp	r3, #1
 8007056:	d10f      	bne.n	8007078 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007058:	69fb      	ldr	r3, [r7, #28]
 800705a:	015a      	lsls	r2, r3, #5
 800705c:	6a3b      	ldr	r3, [r7, #32]
 800705e:	4413      	add	r3, r2
 8007060:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	69fa      	ldr	r2, [r7, #28]
 8007068:	0151      	lsls	r1, r2, #5
 800706a:	6a3a      	ldr	r2, [r7, #32]
 800706c:	440a      	add	r2, r1
 800706e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007072:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007076:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	7c9b      	ldrb	r3, [r3, #18]
 800707c:	2b01      	cmp	r3, #1
 800707e:	d162      	bne.n	8007146 <USB_HC_StartXfer+0x3ea>
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	78db      	ldrb	r3, [r3, #3]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d15e      	bne.n	8007146 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	68db      	ldr	r3, [r3, #12]
 800708c:	3b01      	subs	r3, #1
 800708e:	2b03      	cmp	r3, #3
 8007090:	d858      	bhi.n	8007144 <USB_HC_StartXfer+0x3e8>
 8007092:	a201      	add	r2, pc, #4	@ (adr r2, 8007098 <USB_HC_StartXfer+0x33c>)
 8007094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007098:	080070a9 	.word	0x080070a9
 800709c:	080070cb 	.word	0x080070cb
 80070a0:	080070ed 	.word	0x080070ed
 80070a4:	0800710f 	.word	0x0800710f
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 80070a8:	69fb      	ldr	r3, [r7, #28]
 80070aa:	015a      	lsls	r2, r3, #5
 80070ac:	6a3b      	ldr	r3, [r7, #32]
 80070ae:	4413      	add	r3, r2
 80070b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	69fa      	ldr	r2, [r7, #28]
 80070b8:	0151      	lsls	r1, r2, #5
 80070ba:	6a3a      	ldr	r2, [r7, #32]
 80070bc:	440a      	add	r2, r1
 80070be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80070c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80070c6:	6053      	str	r3, [r2, #4]
          break;
 80070c8:	e03d      	b.n	8007146 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 80070ca:	69fb      	ldr	r3, [r7, #28]
 80070cc:	015a      	lsls	r2, r3, #5
 80070ce:	6a3b      	ldr	r3, [r7, #32]
 80070d0:	4413      	add	r3, r2
 80070d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	69fa      	ldr	r2, [r7, #28]
 80070da:	0151      	lsls	r1, r2, #5
 80070dc:	6a3a      	ldr	r2, [r7, #32]
 80070de:	440a      	add	r2, r1
 80070e0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80070e4:	f043 030e 	orr.w	r3, r3, #14
 80070e8:	6053      	str	r3, [r2, #4]
          break;
 80070ea:	e02c      	b.n	8007146 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 80070ec:	69fb      	ldr	r3, [r7, #28]
 80070ee:	015a      	lsls	r2, r3, #5
 80070f0:	6a3b      	ldr	r3, [r7, #32]
 80070f2:	4413      	add	r3, r2
 80070f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	69fa      	ldr	r2, [r7, #28]
 80070fc:	0151      	lsls	r1, r2, #5
 80070fe:	6a3a      	ldr	r2, [r7, #32]
 8007100:	440a      	add	r2, r1
 8007102:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007106:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800710a:	6053      	str	r3, [r2, #4]
          break;
 800710c:	e01b      	b.n	8007146 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800710e:	69fb      	ldr	r3, [r7, #28]
 8007110:	015a      	lsls	r2, r3, #5
 8007112:	6a3b      	ldr	r3, [r7, #32]
 8007114:	4413      	add	r3, r2
 8007116:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	69fa      	ldr	r2, [r7, #28]
 800711e:	0151      	lsls	r1, r2, #5
 8007120:	6a3a      	ldr	r2, [r7, #32]
 8007122:	440a      	add	r2, r1
 8007124:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007128:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800712c:	6053      	str	r3, [r2, #4]
          break;
 800712e:	e00a      	b.n	8007146 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007130:	69fb      	ldr	r3, [r7, #28]
 8007132:	015a      	lsls	r2, r3, #5
 8007134:	6a3b      	ldr	r3, [r7, #32]
 8007136:	4413      	add	r3, r2
 8007138:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800713c:	461a      	mov	r2, r3
 800713e:	2300      	movs	r3, #0
 8007140:	6053      	str	r3, [r2, #4]
 8007142:	e000      	b.n	8007146 <USB_HC_StartXfer+0x3ea>
          break;
 8007144:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007146:	69fb      	ldr	r3, [r7, #28]
 8007148:	015a      	lsls	r2, r3, #5
 800714a:	6a3b      	ldr	r3, [r7, #32]
 800714c:	4413      	add	r3, r2
 800714e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800715c:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	78db      	ldrb	r3, [r3, #3]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d004      	beq.n	8007170 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800716c:	613b      	str	r3, [r7, #16]
 800716e:	e003      	b.n	8007178 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007176:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800717e:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007180:	69fb      	ldr	r3, [r7, #28]
 8007182:	015a      	lsls	r2, r3, #5
 8007184:	6a3b      	ldr	r3, [r7, #32]
 8007186:	4413      	add	r3, r2
 8007188:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800718c:	461a      	mov	r2, r3
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007192:	79fb      	ldrb	r3, [r7, #7]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d003      	beq.n	80071a0 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8007198:	2300      	movs	r3, #0
 800719a:	e055      	b.n	8007248 <USB_HC_StartXfer+0x4ec>
 800719c:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	78db      	ldrb	r3, [r3, #3]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d14e      	bne.n	8007246 <USB_HC_StartXfer+0x4ea>
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	6a1b      	ldr	r3, [r3, #32]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d04a      	beq.n	8007246 <USB_HC_StartXfer+0x4ea>
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	79db      	ldrb	r3, [r3, #7]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d146      	bne.n	8007246 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	7c9b      	ldrb	r3, [r3, #18]
 80071bc:	2b03      	cmp	r3, #3
 80071be:	d831      	bhi.n	8007224 <USB_HC_StartXfer+0x4c8>
 80071c0:	a201      	add	r2, pc, #4	@ (adr r2, 80071c8 <USB_HC_StartXfer+0x46c>)
 80071c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071c6:	bf00      	nop
 80071c8:	080071d9 	.word	0x080071d9
 80071cc:	080071fd 	.word	0x080071fd
 80071d0:	080071d9 	.word	0x080071d9
 80071d4:	080071fd 	.word	0x080071fd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	6a1b      	ldr	r3, [r3, #32]
 80071dc:	3303      	adds	r3, #3
 80071de:	089b      	lsrs	r3, r3, #2
 80071e0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80071e2:	8afa      	ldrh	r2, [r7, #22]
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d91c      	bls.n	8007228 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	699b      	ldr	r3, [r3, #24]
 80071f2:	f043 0220 	orr.w	r2, r3, #32
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	619a      	str	r2, [r3, #24]
        }
        break;
 80071fa:	e015      	b.n	8007228 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	6a1b      	ldr	r3, [r3, #32]
 8007200:	3303      	adds	r3, #3
 8007202:	089b      	lsrs	r3, r3, #2
 8007204:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007206:	8afa      	ldrh	r2, [r7, #22]
 8007208:	6a3b      	ldr	r3, [r7, #32]
 800720a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800720e:	691b      	ldr	r3, [r3, #16]
 8007210:	b29b      	uxth	r3, r3
 8007212:	429a      	cmp	r2, r3
 8007214:	d90a      	bls.n	800722c <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	699b      	ldr	r3, [r3, #24]
 800721a:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	619a      	str	r2, [r3, #24]
        }
        break;
 8007222:	e003      	b.n	800722c <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8007224:	bf00      	nop
 8007226:	e002      	b.n	800722e <USB_HC_StartXfer+0x4d2>
        break;
 8007228:	bf00      	nop
 800722a:	e000      	b.n	800722e <USB_HC_StartXfer+0x4d2>
        break;
 800722c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	6999      	ldr	r1, [r3, #24]
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	785a      	ldrb	r2, [r3, #1]
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	6a1b      	ldr	r3, [r3, #32]
 800723a:	b29b      	uxth	r3, r3
 800723c:	2000      	movs	r0, #0
 800723e:	9000      	str	r0, [sp, #0]
 8007240:	68f8      	ldr	r0, [r7, #12]
 8007242:	f7ff f9c9 	bl	80065d8 <USB_WritePacket>
  }

  return HAL_OK;
 8007246:	2300      	movs	r3, #0
}
 8007248:	4618      	mov	r0, r3
 800724a:	3728      	adds	r7, #40	@ 0x28
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}

08007250 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007250:	b480      	push	{r7}
 8007252:	b085      	sub	sp, #20
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007262:	695b      	ldr	r3, [r3, #20]
 8007264:	b29b      	uxth	r3, r3
}
 8007266:	4618      	mov	r0, r3
 8007268:	3714      	adds	r7, #20
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr

08007272 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007272:	b480      	push	{r7}
 8007274:	b089      	sub	sp, #36	@ 0x24
 8007276:	af00      	add	r7, sp, #0
 8007278:	6078      	str	r0, [r7, #4]
 800727a:	460b      	mov	r3, r1
 800727c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007282:	78fb      	ldrb	r3, [r7, #3]
 8007284:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007286:	2300      	movs	r3, #0
 8007288:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800728a:	69bb      	ldr	r3, [r7, #24]
 800728c:	015a      	lsls	r2, r3, #5
 800728e:	69fb      	ldr	r3, [r7, #28]
 8007290:	4413      	add	r3, r2
 8007292:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	0c9b      	lsrs	r3, r3, #18
 800729a:	f003 0303 	and.w	r3, r3, #3
 800729e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80072a0:	69bb      	ldr	r3, [r7, #24]
 80072a2:	015a      	lsls	r2, r3, #5
 80072a4:	69fb      	ldr	r3, [r7, #28]
 80072a6:	4413      	add	r3, r2
 80072a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	0fdb      	lsrs	r3, r3, #31
 80072b0:	f003 0301 	and.w	r3, r3, #1
 80072b4:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80072b6:	69bb      	ldr	r3, [r7, #24]
 80072b8:	015a      	lsls	r2, r3, #5
 80072ba:	69fb      	ldr	r3, [r7, #28]
 80072bc:	4413      	add	r3, r2
 80072be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072c2:	685b      	ldr	r3, [r3, #4]
 80072c4:	0fdb      	lsrs	r3, r3, #31
 80072c6:	f003 0301 	and.w	r3, r3, #1
 80072ca:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	f003 0320 	and.w	r3, r3, #32
 80072d4:	2b20      	cmp	r3, #32
 80072d6:	d10d      	bne.n	80072f4 <USB_HC_Halt+0x82>
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d10a      	bne.n	80072f4 <USB_HC_Halt+0x82>
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d005      	beq.n	80072f0 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	2b01      	cmp	r3, #1
 80072e8:	d002      	beq.n	80072f0 <USB_HC_Halt+0x7e>
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	2b03      	cmp	r3, #3
 80072ee:	d101      	bne.n	80072f4 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80072f0:	2300      	movs	r3, #0
 80072f2:	e0d8      	b.n	80074a6 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d002      	beq.n	8007300 <USB_HC_Halt+0x8e>
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	2b02      	cmp	r3, #2
 80072fe:	d173      	bne.n	80073e8 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007300:	69bb      	ldr	r3, [r7, #24]
 8007302:	015a      	lsls	r2, r3, #5
 8007304:	69fb      	ldr	r3, [r7, #28]
 8007306:	4413      	add	r3, r2
 8007308:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	69ba      	ldr	r2, [r7, #24]
 8007310:	0151      	lsls	r1, r2, #5
 8007312:	69fa      	ldr	r2, [r7, #28]
 8007314:	440a      	add	r2, r1
 8007316:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800731a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800731e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	689b      	ldr	r3, [r3, #8]
 8007324:	f003 0320 	and.w	r3, r3, #32
 8007328:	2b00      	cmp	r3, #0
 800732a:	d14a      	bne.n	80073c2 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007330:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007334:	2b00      	cmp	r3, #0
 8007336:	d133      	bne.n	80073a0 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007338:	69bb      	ldr	r3, [r7, #24]
 800733a:	015a      	lsls	r2, r3, #5
 800733c:	69fb      	ldr	r3, [r7, #28]
 800733e:	4413      	add	r3, r2
 8007340:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	69ba      	ldr	r2, [r7, #24]
 8007348:	0151      	lsls	r1, r2, #5
 800734a:	69fa      	ldr	r2, [r7, #28]
 800734c:	440a      	add	r2, r1
 800734e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007352:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007356:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007358:	69bb      	ldr	r3, [r7, #24]
 800735a:	015a      	lsls	r2, r3, #5
 800735c:	69fb      	ldr	r3, [r7, #28]
 800735e:	4413      	add	r3, r2
 8007360:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	69ba      	ldr	r2, [r7, #24]
 8007368:	0151      	lsls	r1, r2, #5
 800736a:	69fa      	ldr	r2, [r7, #28]
 800736c:	440a      	add	r2, r1
 800736e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007372:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007376:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	3301      	adds	r3, #1
 800737c:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007384:	d82e      	bhi.n	80073e4 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007386:	69bb      	ldr	r3, [r7, #24]
 8007388:	015a      	lsls	r2, r3, #5
 800738a:	69fb      	ldr	r3, [r7, #28]
 800738c:	4413      	add	r3, r2
 800738e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007398:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800739c:	d0ec      	beq.n	8007378 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800739e:	e081      	b.n	80074a4 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80073a0:	69bb      	ldr	r3, [r7, #24]
 80073a2:	015a      	lsls	r2, r3, #5
 80073a4:	69fb      	ldr	r3, [r7, #28]
 80073a6:	4413      	add	r3, r2
 80073a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	69ba      	ldr	r2, [r7, #24]
 80073b0:	0151      	lsls	r1, r2, #5
 80073b2:	69fa      	ldr	r2, [r7, #28]
 80073b4:	440a      	add	r2, r1
 80073b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80073ba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80073be:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80073c0:	e070      	b.n	80074a4 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80073c2:	69bb      	ldr	r3, [r7, #24]
 80073c4:	015a      	lsls	r2, r3, #5
 80073c6:	69fb      	ldr	r3, [r7, #28]
 80073c8:	4413      	add	r3, r2
 80073ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	69ba      	ldr	r2, [r7, #24]
 80073d2:	0151      	lsls	r1, r2, #5
 80073d4:	69fa      	ldr	r2, [r7, #28]
 80073d6:	440a      	add	r2, r1
 80073d8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80073dc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80073e0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80073e2:	e05f      	b.n	80074a4 <USB_HC_Halt+0x232>
            break;
 80073e4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80073e6:	e05d      	b.n	80074a4 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80073e8:	69bb      	ldr	r3, [r7, #24]
 80073ea:	015a      	lsls	r2, r3, #5
 80073ec:	69fb      	ldr	r3, [r7, #28]
 80073ee:	4413      	add	r3, r2
 80073f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	69ba      	ldr	r2, [r7, #24]
 80073f8:	0151      	lsls	r1, r2, #5
 80073fa:	69fa      	ldr	r2, [r7, #28]
 80073fc:	440a      	add	r2, r1
 80073fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007402:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007406:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007408:	69fb      	ldr	r3, [r7, #28]
 800740a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800740e:	691b      	ldr	r3, [r3, #16]
 8007410:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007414:	2b00      	cmp	r3, #0
 8007416:	d133      	bne.n	8007480 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007418:	69bb      	ldr	r3, [r7, #24]
 800741a:	015a      	lsls	r2, r3, #5
 800741c:	69fb      	ldr	r3, [r7, #28]
 800741e:	4413      	add	r3, r2
 8007420:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	69ba      	ldr	r2, [r7, #24]
 8007428:	0151      	lsls	r1, r2, #5
 800742a:	69fa      	ldr	r2, [r7, #28]
 800742c:	440a      	add	r2, r1
 800742e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007432:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007436:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007438:	69bb      	ldr	r3, [r7, #24]
 800743a:	015a      	lsls	r2, r3, #5
 800743c:	69fb      	ldr	r3, [r7, #28]
 800743e:	4413      	add	r3, r2
 8007440:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	69ba      	ldr	r2, [r7, #24]
 8007448:	0151      	lsls	r1, r2, #5
 800744a:	69fa      	ldr	r2, [r7, #28]
 800744c:	440a      	add	r2, r1
 800744e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007452:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007456:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	3301      	adds	r3, #1
 800745c:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007464:	d81d      	bhi.n	80074a2 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007466:	69bb      	ldr	r3, [r7, #24]
 8007468:	015a      	lsls	r2, r3, #5
 800746a:	69fb      	ldr	r3, [r7, #28]
 800746c:	4413      	add	r3, r2
 800746e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007478:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800747c:	d0ec      	beq.n	8007458 <USB_HC_Halt+0x1e6>
 800747e:	e011      	b.n	80074a4 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007480:	69bb      	ldr	r3, [r7, #24]
 8007482:	015a      	lsls	r2, r3, #5
 8007484:	69fb      	ldr	r3, [r7, #28]
 8007486:	4413      	add	r3, r2
 8007488:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	69ba      	ldr	r2, [r7, #24]
 8007490:	0151      	lsls	r1, r2, #5
 8007492:	69fa      	ldr	r2, [r7, #28]
 8007494:	440a      	add	r2, r1
 8007496:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800749a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800749e:	6013      	str	r3, [r2, #0]
 80074a0:	e000      	b.n	80074a4 <USB_HC_Halt+0x232>
          break;
 80074a2:	bf00      	nop
    }
  }

  return HAL_OK;
 80074a4:	2300      	movs	r3, #0
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3724      	adds	r7, #36	@ 0x24
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr
	...

080074b4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b087      	sub	sp, #28
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	460b      	mov	r3, r1
 80074be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80074c4:	78fb      	ldrb	r3, [r7, #3]
 80074c6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80074c8:	2301      	movs	r3, #1
 80074ca:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	04da      	lsls	r2, r3, #19
 80074d0:	4b15      	ldr	r3, [pc, #84]	@ (8007528 <USB_DoPing+0x74>)
 80074d2:	4013      	ands	r3, r2
 80074d4:	693a      	ldr	r2, [r7, #16]
 80074d6:	0151      	lsls	r1, r2, #5
 80074d8:	697a      	ldr	r2, [r7, #20]
 80074da:	440a      	add	r2, r1
 80074dc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80074e0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80074e4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	015a      	lsls	r2, r3, #5
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	4413      	add	r3, r2
 80074ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80074fc:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007504:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	015a      	lsls	r2, r3, #5
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	4413      	add	r3, r2
 800750e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007512:	461a      	mov	r2, r3
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007518:	2300      	movs	r3, #0
}
 800751a:	4618      	mov	r0, r3
 800751c:	371c      	adds	r7, #28
 800751e:	46bd      	mov	sp, r7
 8007520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007524:	4770      	bx	lr
 8007526:	bf00      	nop
 8007528:	1ff80000 	.word	0x1ff80000

0800752c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b088      	sub	sp, #32
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007534:	2300      	movs	r3, #0
 8007536:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800753c:	2300      	movs	r3, #0
 800753e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f7fe ff8c 	bl	800645e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007546:	2110      	movs	r1, #16
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f7fe ffe5 	bl	8006518 <USB_FlushTxFifo>
 800754e:	4603      	mov	r3, r0
 8007550:	2b00      	cmp	r3, #0
 8007552:	d001      	beq.n	8007558 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007554:	2301      	movs	r3, #1
 8007556:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f7ff f80f 	bl	800657c <USB_FlushRxFifo>
 800755e:	4603      	mov	r3, r0
 8007560:	2b00      	cmp	r3, #0
 8007562:	d001      	beq.n	8007568 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007564:	2301      	movs	r3, #1
 8007566:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007568:	2300      	movs	r3, #0
 800756a:	61bb      	str	r3, [r7, #24]
 800756c:	e01f      	b.n	80075ae <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800756e:	69bb      	ldr	r3, [r7, #24]
 8007570:	015a      	lsls	r2, r3, #5
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	4413      	add	r3, r2
 8007576:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007584:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800758c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007594:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007596:	69bb      	ldr	r3, [r7, #24]
 8007598:	015a      	lsls	r2, r3, #5
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	4413      	add	r3, r2
 800759e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075a2:	461a      	mov	r2, r3
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80075a8:	69bb      	ldr	r3, [r7, #24]
 80075aa:	3301      	adds	r3, #1
 80075ac:	61bb      	str	r3, [r7, #24]
 80075ae:	69bb      	ldr	r3, [r7, #24]
 80075b0:	2b0f      	cmp	r3, #15
 80075b2:	d9dc      	bls.n	800756e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80075b4:	2300      	movs	r3, #0
 80075b6:	61bb      	str	r3, [r7, #24]
 80075b8:	e034      	b.n	8007624 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80075ba:	69bb      	ldr	r3, [r7, #24]
 80075bc:	015a      	lsls	r2, r3, #5
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	4413      	add	r3, r2
 80075c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80075d0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80075d8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80075e0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80075e2:	69bb      	ldr	r3, [r7, #24]
 80075e4:	015a      	lsls	r2, r3, #5
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	4413      	add	r3, r2
 80075ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075ee:	461a      	mov	r2, r3
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	3301      	adds	r3, #1
 80075f8:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007600:	d80c      	bhi.n	800761c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007602:	69bb      	ldr	r3, [r7, #24]
 8007604:	015a      	lsls	r2, r3, #5
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	4413      	add	r3, r2
 800760a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007614:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007618:	d0ec      	beq.n	80075f4 <USB_StopHost+0xc8>
 800761a:	e000      	b.n	800761e <USB_StopHost+0xf2>
        break;
 800761c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800761e:	69bb      	ldr	r3, [r7, #24]
 8007620:	3301      	adds	r3, #1
 8007622:	61bb      	str	r3, [r7, #24]
 8007624:	69bb      	ldr	r3, [r7, #24]
 8007626:	2b0f      	cmp	r3, #15
 8007628:	d9c7      	bls.n	80075ba <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007630:	461a      	mov	r2, r3
 8007632:	f04f 33ff 	mov.w	r3, #4294967295
 8007636:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f04f 32ff 	mov.w	r2, #4294967295
 800763e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f7fe fefb 	bl	800643c <USB_EnableGlobalInt>

  return ret;
 8007646:	7ffb      	ldrb	r3, [r7, #31]
}
 8007648:	4618      	mov	r0, r3
 800764a:	3720      	adds	r7, #32
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}

08007650 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007650:	b590      	push	{r4, r7, lr}
 8007652:	b089      	sub	sp, #36	@ 0x24
 8007654:	af04      	add	r7, sp, #16
 8007656:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007658:	2301      	movs	r3, #1
 800765a:	2202      	movs	r2, #2
 800765c:	2102      	movs	r1, #2
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f000 fc85 	bl	8007f6e <USBH_FindInterface>
 8007664:	4603      	mov	r3, r0
 8007666:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007668:	7bfb      	ldrb	r3, [r7, #15]
 800766a:	2bff      	cmp	r3, #255	@ 0xff
 800766c:	d002      	beq.n	8007674 <USBH_CDC_InterfaceInit+0x24>
 800766e:	7bfb      	ldrb	r3, [r7, #15]
 8007670:	2b01      	cmp	r3, #1
 8007672:	d901      	bls.n	8007678 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007674:	2302      	movs	r3, #2
 8007676:	e13d      	b.n	80078f4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007678:	7bfb      	ldrb	r3, [r7, #15]
 800767a:	4619      	mov	r1, r3
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f000 fc5a 	bl	8007f36 <USBH_SelectInterface>
 8007682:	4603      	mov	r3, r0
 8007684:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007686:	7bbb      	ldrb	r3, [r7, #14]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d001      	beq.n	8007690 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800768c:	2302      	movs	r3, #2
 800768e:	e131      	b.n	80078f4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8007696:	2050      	movs	r0, #80	@ 0x50
 8007698:	f002 fb64 	bl	8009d64 <malloc>
 800769c:	4603      	mov	r3, r0
 800769e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80076a6:	69db      	ldr	r3, [r3, #28]
 80076a8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d101      	bne.n	80076b4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80076b0:	2302      	movs	r3, #2
 80076b2:	e11f      	b.n	80078f4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80076b4:	2250      	movs	r2, #80	@ 0x50
 80076b6:	2100      	movs	r1, #0
 80076b8:	68b8      	ldr	r0, [r7, #8]
 80076ba:	f002 fc11 	bl	8009ee0 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80076be:	7bfb      	ldrb	r3, [r7, #15]
 80076c0:	687a      	ldr	r2, [r7, #4]
 80076c2:	211a      	movs	r1, #26
 80076c4:	fb01 f303 	mul.w	r3, r1, r3
 80076c8:	4413      	add	r3, r2
 80076ca:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80076ce:	781b      	ldrb	r3, [r3, #0]
 80076d0:	b25b      	sxtb	r3, r3
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	da15      	bge.n	8007702 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80076d6:	7bfb      	ldrb	r3, [r7, #15]
 80076d8:	687a      	ldr	r2, [r7, #4]
 80076da:	211a      	movs	r1, #26
 80076dc:	fb01 f303 	mul.w	r3, r1, r3
 80076e0:	4413      	add	r3, r2
 80076e2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80076e6:	781a      	ldrb	r2, [r3, #0]
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80076ec:	7bfb      	ldrb	r3, [r7, #15]
 80076ee:	687a      	ldr	r2, [r7, #4]
 80076f0:	211a      	movs	r1, #26
 80076f2:	fb01 f303 	mul.w	r3, r1, r3
 80076f6:	4413      	add	r3, r2
 80076f8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80076fc:	881a      	ldrh	r2, [r3, #0]
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	785b      	ldrb	r3, [r3, #1]
 8007706:	4619      	mov	r1, r3
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f001 ffbe 	bl	800968a <USBH_AllocPipe>
 800770e:	4603      	mov	r3, r0
 8007710:	461a      	mov	r2, r3
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	7819      	ldrb	r1, [r3, #0]
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	7858      	ldrb	r0, [r3, #1]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800772a:	68ba      	ldr	r2, [r7, #8]
 800772c:	8952      	ldrh	r2, [r2, #10]
 800772e:	9202      	str	r2, [sp, #8]
 8007730:	2203      	movs	r2, #3
 8007732:	9201      	str	r2, [sp, #4]
 8007734:	9300      	str	r3, [sp, #0]
 8007736:	4623      	mov	r3, r4
 8007738:	4602      	mov	r2, r0
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f001 ff76 	bl	800962c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	781b      	ldrb	r3, [r3, #0]
 8007744:	2200      	movs	r2, #0
 8007746:	4619      	mov	r1, r3
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f002 fa85 	bl	8009c58 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800774e:	2300      	movs	r3, #0
 8007750:	2200      	movs	r2, #0
 8007752:	210a      	movs	r1, #10
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f000 fc0a 	bl	8007f6e <USBH_FindInterface>
 800775a:	4603      	mov	r3, r0
 800775c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800775e:	7bfb      	ldrb	r3, [r7, #15]
 8007760:	2bff      	cmp	r3, #255	@ 0xff
 8007762:	d002      	beq.n	800776a <USBH_CDC_InterfaceInit+0x11a>
 8007764:	7bfb      	ldrb	r3, [r7, #15]
 8007766:	2b01      	cmp	r3, #1
 8007768:	d901      	bls.n	800776e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800776a:	2302      	movs	r3, #2
 800776c:	e0c2      	b.n	80078f4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800776e:	7bfb      	ldrb	r3, [r7, #15]
 8007770:	687a      	ldr	r2, [r7, #4]
 8007772:	211a      	movs	r1, #26
 8007774:	fb01 f303 	mul.w	r3, r1, r3
 8007778:	4413      	add	r3, r2
 800777a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	b25b      	sxtb	r3, r3
 8007782:	2b00      	cmp	r3, #0
 8007784:	da16      	bge.n	80077b4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007786:	7bfb      	ldrb	r3, [r7, #15]
 8007788:	687a      	ldr	r2, [r7, #4]
 800778a:	211a      	movs	r1, #26
 800778c:	fb01 f303 	mul.w	r3, r1, r3
 8007790:	4413      	add	r3, r2
 8007792:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007796:	781a      	ldrb	r2, [r3, #0]
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800779c:	7bfb      	ldrb	r3, [r7, #15]
 800779e:	687a      	ldr	r2, [r7, #4]
 80077a0:	211a      	movs	r1, #26
 80077a2:	fb01 f303 	mul.w	r3, r1, r3
 80077a6:	4413      	add	r3, r2
 80077a8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80077ac:	881a      	ldrh	r2, [r3, #0]
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	835a      	strh	r2, [r3, #26]
 80077b2:	e015      	b.n	80077e0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80077b4:	7bfb      	ldrb	r3, [r7, #15]
 80077b6:	687a      	ldr	r2, [r7, #4]
 80077b8:	211a      	movs	r1, #26
 80077ba:	fb01 f303 	mul.w	r3, r1, r3
 80077be:	4413      	add	r3, r2
 80077c0:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80077c4:	781a      	ldrb	r2, [r3, #0]
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80077ca:	7bfb      	ldrb	r3, [r7, #15]
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	211a      	movs	r1, #26
 80077d0:	fb01 f303 	mul.w	r3, r1, r3
 80077d4:	4413      	add	r3, r2
 80077d6:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80077da:	881a      	ldrh	r2, [r3, #0]
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80077e0:	7bfb      	ldrb	r3, [r7, #15]
 80077e2:	687a      	ldr	r2, [r7, #4]
 80077e4:	211a      	movs	r1, #26
 80077e6:	fb01 f303 	mul.w	r3, r1, r3
 80077ea:	4413      	add	r3, r2
 80077ec:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80077f0:	781b      	ldrb	r3, [r3, #0]
 80077f2:	b25b      	sxtb	r3, r3
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	da16      	bge.n	8007826 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80077f8:	7bfb      	ldrb	r3, [r7, #15]
 80077fa:	687a      	ldr	r2, [r7, #4]
 80077fc:	211a      	movs	r1, #26
 80077fe:	fb01 f303 	mul.w	r3, r1, r3
 8007802:	4413      	add	r3, r2
 8007804:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007808:	781a      	ldrb	r2, [r3, #0]
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800780e:	7bfb      	ldrb	r3, [r7, #15]
 8007810:	687a      	ldr	r2, [r7, #4]
 8007812:	211a      	movs	r1, #26
 8007814:	fb01 f303 	mul.w	r3, r1, r3
 8007818:	4413      	add	r3, r2
 800781a:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800781e:	881a      	ldrh	r2, [r3, #0]
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	835a      	strh	r2, [r3, #26]
 8007824:	e015      	b.n	8007852 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007826:	7bfb      	ldrb	r3, [r7, #15]
 8007828:	687a      	ldr	r2, [r7, #4]
 800782a:	211a      	movs	r1, #26
 800782c:	fb01 f303 	mul.w	r3, r1, r3
 8007830:	4413      	add	r3, r2
 8007832:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007836:	781a      	ldrb	r2, [r3, #0]
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800783c:	7bfb      	ldrb	r3, [r7, #15]
 800783e:	687a      	ldr	r2, [r7, #4]
 8007840:	211a      	movs	r1, #26
 8007842:	fb01 f303 	mul.w	r3, r1, r3
 8007846:	4413      	add	r3, r2
 8007848:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800784c:	881a      	ldrh	r2, [r3, #0]
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	7b9b      	ldrb	r3, [r3, #14]
 8007856:	4619      	mov	r1, r3
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f001 ff16 	bl	800968a <USBH_AllocPipe>
 800785e:	4603      	mov	r3, r0
 8007860:	461a      	mov	r2, r3
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	7bdb      	ldrb	r3, [r3, #15]
 800786a:	4619      	mov	r1, r3
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f001 ff0c 	bl	800968a <USBH_AllocPipe>
 8007872:	4603      	mov	r3, r0
 8007874:	461a      	mov	r2, r3
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	7b59      	ldrb	r1, [r3, #13]
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	7b98      	ldrb	r0, [r3, #14]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800788e:	68ba      	ldr	r2, [r7, #8]
 8007890:	8b12      	ldrh	r2, [r2, #24]
 8007892:	9202      	str	r2, [sp, #8]
 8007894:	2202      	movs	r2, #2
 8007896:	9201      	str	r2, [sp, #4]
 8007898:	9300      	str	r3, [sp, #0]
 800789a:	4623      	mov	r3, r4
 800789c:	4602      	mov	r2, r0
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f001 fec4 	bl	800962c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	7b19      	ldrb	r1, [r3, #12]
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	7bd8      	ldrb	r0, [r3, #15]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80078b8:	68ba      	ldr	r2, [r7, #8]
 80078ba:	8b52      	ldrh	r2, [r2, #26]
 80078bc:	9202      	str	r2, [sp, #8]
 80078be:	2202      	movs	r2, #2
 80078c0:	9201      	str	r2, [sp, #4]
 80078c2:	9300      	str	r3, [sp, #0]
 80078c4:	4623      	mov	r3, r4
 80078c6:	4602      	mov	r2, r0
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f001 feaf 	bl	800962c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	2200      	movs	r2, #0
 80078d2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	7b5b      	ldrb	r3, [r3, #13]
 80078da:	2200      	movs	r2, #0
 80078dc:	4619      	mov	r1, r3
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f002 f9ba 	bl	8009c58 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	7b1b      	ldrb	r3, [r3, #12]
 80078e8:	2200      	movs	r2, #0
 80078ea:	4619      	mov	r1, r3
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f002 f9b3 	bl	8009c58 <USBH_LL_SetToggle>

  return USBH_OK;
 80078f2:	2300      	movs	r3, #0
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	3714      	adds	r7, #20
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd90      	pop	{r4, r7, pc}

080078fc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b084      	sub	sp, #16
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800790a:	69db      	ldr	r3, [r3, #28]
 800790c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	781b      	ldrb	r3, [r3, #0]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d00e      	beq.n	8007934 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	781b      	ldrb	r3, [r3, #0]
 800791a:	4619      	mov	r1, r3
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f001 fea4 	bl	800966a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	781b      	ldrb	r3, [r3, #0]
 8007926:	4619      	mov	r1, r3
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f001 fecf 	bl	80096cc <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2200      	movs	r2, #0
 8007932:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	7b1b      	ldrb	r3, [r3, #12]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d00e      	beq.n	800795a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	7b1b      	ldrb	r3, [r3, #12]
 8007940:	4619      	mov	r1, r3
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f001 fe91 	bl	800966a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	7b1b      	ldrb	r3, [r3, #12]
 800794c:	4619      	mov	r1, r3
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f001 febc 	bl	80096cc <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	2200      	movs	r2, #0
 8007958:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	7b5b      	ldrb	r3, [r3, #13]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d00e      	beq.n	8007980 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	7b5b      	ldrb	r3, [r3, #13]
 8007966:	4619      	mov	r1, r3
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f001 fe7e 	bl	800966a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	7b5b      	ldrb	r3, [r3, #13]
 8007972:	4619      	mov	r1, r3
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f001 fea9 	bl	80096cc <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2200      	movs	r2, #0
 800797e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007986:	69db      	ldr	r3, [r3, #28]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d00b      	beq.n	80079a4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007992:	69db      	ldr	r3, [r3, #28]
 8007994:	4618      	mov	r0, r3
 8007996:	f002 f9ed 	bl	8009d74 <free>
    phost->pActiveClass->pData = 0U;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80079a0:	2200      	movs	r2, #0
 80079a2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80079a4:	2300      	movs	r3, #0
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3710      	adds	r7, #16
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}

080079ae <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80079ae:	b580      	push	{r7, lr}
 80079b0:	b084      	sub	sp, #16
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80079bc:	69db      	ldr	r3, [r3, #28]
 80079be:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	3340      	adds	r3, #64	@ 0x40
 80079c4:	4619      	mov	r1, r3
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f000 f8b1 	bl	8007b2e <GetLineCoding>
 80079cc:	4603      	mov	r3, r0
 80079ce:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80079d0:	7afb      	ldrb	r3, [r7, #11]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d105      	bne.n	80079e2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80079dc:	2102      	movs	r1, #2
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80079e2:	7afb      	ldrb	r3, [r7, #11]
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3710      	adds	r7, #16
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}

080079ec <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b084      	sub	sp, #16
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80079f4:	2301      	movs	r3, #1
 80079f6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80079f8:	2300      	movs	r3, #0
 80079fa:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007a02:	69db      	ldr	r3, [r3, #28]
 8007a04:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8007a0c:	2b04      	cmp	r3, #4
 8007a0e:	d877      	bhi.n	8007b00 <USBH_CDC_Process+0x114>
 8007a10:	a201      	add	r2, pc, #4	@ (adr r2, 8007a18 <USBH_CDC_Process+0x2c>)
 8007a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a16:	bf00      	nop
 8007a18:	08007a2d 	.word	0x08007a2d
 8007a1c:	08007a33 	.word	0x08007a33
 8007a20:	08007a63 	.word	0x08007a63
 8007a24:	08007ad7 	.word	0x08007ad7
 8007a28:	08007ae5 	.word	0x08007ae5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	73fb      	strb	r3, [r7, #15]
      break;
 8007a30:	e06d      	b.n	8007b0e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a36:	4619      	mov	r1, r3
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f000 f897 	bl	8007b6c <SetLineCoding>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007a42:	7bbb      	ldrb	r3, [r7, #14]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d104      	bne.n	8007a52 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	2202      	movs	r2, #2
 8007a4c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007a50:	e058      	b.n	8007b04 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007a52:	7bbb      	ldrb	r3, [r7, #14]
 8007a54:	2b01      	cmp	r3, #1
 8007a56:	d055      	beq.n	8007b04 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	2204      	movs	r2, #4
 8007a5c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8007a60:	e050      	b.n	8007b04 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	3340      	adds	r3, #64	@ 0x40
 8007a66:	4619      	mov	r1, r3
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f000 f860 	bl	8007b2e <GetLineCoding>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007a72:	7bbb      	ldrb	r3, [r7, #14]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d126      	bne.n	8007ac6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a8a:	791b      	ldrb	r3, [r3, #4]
 8007a8c:	429a      	cmp	r2, r3
 8007a8e:	d13b      	bne.n	8007b08 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a9a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d133      	bne.n	8007b08 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007aaa:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d12b      	bne.n	8007b08 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ab8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d124      	bne.n	8007b08 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 f958 	bl	8007d74 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007ac4:	e020      	b.n	8007b08 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007ac6:	7bbb      	ldrb	r3, [r7, #14]
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	d01d      	beq.n	8007b08 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	2204      	movs	r2, #4
 8007ad0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8007ad4:	e018      	b.n	8007b08 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 f867 	bl	8007baa <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f000 f8da 	bl	8007c96 <CDC_ProcessReception>
      break;
 8007ae2:	e014      	b.n	8007b0e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007ae4:	2100      	movs	r1, #0
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f001 f81a 	bl	8008b20 <USBH_ClrFeature>
 8007aec:	4603      	mov	r3, r0
 8007aee:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007af0:	7bbb      	ldrb	r3, [r7, #14]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d10a      	bne.n	8007b0c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	2200      	movs	r2, #0
 8007afa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8007afe:	e005      	b.n	8007b0c <USBH_CDC_Process+0x120>

    default:
      break;
 8007b00:	bf00      	nop
 8007b02:	e004      	b.n	8007b0e <USBH_CDC_Process+0x122>
      break;
 8007b04:	bf00      	nop
 8007b06:	e002      	b.n	8007b0e <USBH_CDC_Process+0x122>
      break;
 8007b08:	bf00      	nop
 8007b0a:	e000      	b.n	8007b0e <USBH_CDC_Process+0x122>
      break;
 8007b0c:	bf00      	nop

  }

  return status;
 8007b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3710      	adds	r7, #16
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b083      	sub	sp, #12
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007b20:	2300      	movs	r3, #0
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	370c      	adds	r7, #12
 8007b26:	46bd      	mov	sp, r7
 8007b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2c:	4770      	bx	lr

08007b2e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007b2e:	b580      	push	{r7, lr}
 8007b30:	b082      	sub	sp, #8
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	6078      	str	r0, [r7, #4]
 8007b36:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	22a1      	movs	r2, #161	@ 0xa1
 8007b3c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2221      	movs	r2, #33	@ 0x21
 8007b42:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2200      	movs	r2, #0
 8007b48:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2207      	movs	r2, #7
 8007b54:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	2207      	movs	r2, #7
 8007b5a:	4619      	mov	r1, r3
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f001 fb14 	bl	800918a <USBH_CtlReq>
 8007b62:	4603      	mov	r3, r0
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	3708      	adds	r7, #8
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}

08007b6c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b082      	sub	sp, #8
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2221      	movs	r2, #33	@ 0x21
 8007b7a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2220      	movs	r2, #32
 8007b80:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2200      	movs	r2, #0
 8007b86:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2207      	movs	r2, #7
 8007b92:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	2207      	movs	r2, #7
 8007b98:	4619      	mov	r1, r3
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f001 faf5 	bl	800918a <USBH_CtlReq>
 8007ba0:	4603      	mov	r3, r0
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3708      	adds	r7, #8
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}

08007baa <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007baa:	b580      	push	{r7, lr}
 8007bac:	b086      	sub	sp, #24
 8007bae:	af02      	add	r7, sp, #8
 8007bb0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007bb8:	69db      	ldr	r3, [r3, #28]
 8007bba:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8007bc6:	2b01      	cmp	r3, #1
 8007bc8:	d002      	beq.n	8007bd0 <CDC_ProcessTransmission+0x26>
 8007bca:	2b02      	cmp	r3, #2
 8007bcc:	d023      	beq.n	8007c16 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007bce:	e05e      	b.n	8007c8e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bd4:	68fa      	ldr	r2, [r7, #12]
 8007bd6:	8b12      	ldrh	r2, [r2, #24]
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d90b      	bls.n	8007bf4 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	69d9      	ldr	r1, [r3, #28]
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	8b1a      	ldrh	r2, [r3, #24]
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	7b5b      	ldrb	r3, [r3, #13]
 8007be8:	2001      	movs	r0, #1
 8007bea:	9000      	str	r0, [sp, #0]
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f001 fcda 	bl	80095a6 <USBH_BulkSendData>
 8007bf2:	e00b      	b.n	8007c0c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8007bfc:	b29a      	uxth	r2, r3
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	7b5b      	ldrb	r3, [r3, #13]
 8007c02:	2001      	movs	r0, #1
 8007c04:	9000      	str	r0, [sp, #0]
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f001 fccd 	bl	80095a6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2202      	movs	r2, #2
 8007c10:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007c14:	e03b      	b.n	8007c8e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	7b5b      	ldrb	r3, [r3, #13]
 8007c1a:	4619      	mov	r1, r3
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f001 fff1 	bl	8009c04 <USBH_LL_GetURBState>
 8007c22:	4603      	mov	r3, r0
 8007c24:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007c26:	7afb      	ldrb	r3, [r7, #11]
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	d128      	bne.n	8007c7e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c30:	68fa      	ldr	r2, [r7, #12]
 8007c32:	8b12      	ldrh	r2, [r2, #24]
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d90e      	bls.n	8007c56 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c3c:	68fa      	ldr	r2, [r7, #12]
 8007c3e:	8b12      	ldrh	r2, [r2, #24]
 8007c40:	1a9a      	subs	r2, r3, r2
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	69db      	ldr	r3, [r3, #28]
 8007c4a:	68fa      	ldr	r2, [r7, #12]
 8007c4c:	8b12      	ldrh	r2, [r2, #24]
 8007c4e:	441a      	add	r2, r3
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	61da      	str	r2, [r3, #28]
 8007c54:	e002      	b.n	8007c5c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d004      	beq.n	8007c6e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	2201      	movs	r2, #1
 8007c68:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007c6c:	e00e      	b.n	8007c8c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2200      	movs	r2, #0
 8007c72:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f000 f868 	bl	8007d4c <USBH_CDC_TransmitCallback>
      break;
 8007c7c:	e006      	b.n	8007c8c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007c7e:	7afb      	ldrb	r3, [r7, #11]
 8007c80:	2b02      	cmp	r3, #2
 8007c82:	d103      	bne.n	8007c8c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2201      	movs	r2, #1
 8007c88:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007c8c:	bf00      	nop
  }
}
 8007c8e:	bf00      	nop
 8007c90:	3710      	adds	r7, #16
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}

08007c96 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007c96:	b580      	push	{r7, lr}
 8007c98:	b086      	sub	sp, #24
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007ca4:	69db      	ldr	r3, [r3, #28]
 8007ca6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8007cb2:	2b03      	cmp	r3, #3
 8007cb4:	d002      	beq.n	8007cbc <CDC_ProcessReception+0x26>
 8007cb6:	2b04      	cmp	r3, #4
 8007cb8:	d00e      	beq.n	8007cd8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007cba:	e043      	b.n	8007d44 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	6a19      	ldr	r1, [r3, #32]
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	8b5a      	ldrh	r2, [r3, #26]
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	7b1b      	ldrb	r3, [r3, #12]
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f001 fc91 	bl	80095f0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	2204      	movs	r2, #4
 8007cd2:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8007cd6:	e035      	b.n	8007d44 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	7b1b      	ldrb	r3, [r3, #12]
 8007cdc:	4619      	mov	r1, r3
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f001 ff90 	bl	8009c04 <USBH_LL_GetURBState>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007ce8:	7cfb      	ldrb	r3, [r7, #19]
 8007cea:	2b01      	cmp	r3, #1
 8007cec:	d129      	bne.n	8007d42 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	7b1b      	ldrb	r3, [r3, #12]
 8007cf2:	4619      	mov	r1, r3
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f001 fef3 	bl	8009ae0 <USBH_LL_GetLastXferSize>
 8007cfa:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d00:	68fa      	ldr	r2, [r7, #12]
 8007d02:	429a      	cmp	r2, r3
 8007d04:	d016      	beq.n	8007d34 <CDC_ProcessReception+0x9e>
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	8b5b      	ldrh	r3, [r3, #26]
 8007d0a:	461a      	mov	r2, r3
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d110      	bne.n	8007d34 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8007d12:	697b      	ldr	r3, [r7, #20]
 8007d14:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	1ad2      	subs	r2, r2, r3
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	6a1a      	ldr	r2, [r3, #32]
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	441a      	add	r2, r3
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	2203      	movs	r2, #3
 8007d2e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8007d32:	e006      	b.n	8007d42 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	2200      	movs	r2, #0
 8007d38:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f000 f80f 	bl	8007d60 <USBH_CDC_ReceiveCallback>
      break;
 8007d42:	bf00      	nop
  }
}
 8007d44:	bf00      	nop
 8007d46:	3718      	adds	r7, #24
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}

08007d4c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b083      	sub	sp, #12
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007d54:	bf00      	nop
 8007d56:	370c      	adds	r7, #12
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5e:	4770      	bx	lr

08007d60 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b083      	sub	sp, #12
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007d68:	bf00      	nop
 8007d6a:	370c      	adds	r7, #12
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d72:	4770      	bx	lr

08007d74 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007d74:	b480      	push	{r7}
 8007d76:	b083      	sub	sp, #12
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007d7c:	bf00      	nop
 8007d7e:	370c      	adds	r7, #12
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr

08007d88 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b084      	sub	sp, #16
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	60f8      	str	r0, [r7, #12]
 8007d90:	60b9      	str	r1, [r7, #8]
 8007d92:	4613      	mov	r3, r2
 8007d94:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d101      	bne.n	8007da0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007d9c:	2302      	movs	r3, #2
 8007d9e:	e029      	b.n	8007df4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	79fa      	ldrb	r2, [r7, #7]
 8007da4:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2200      	movs	r2, #0
 8007dac:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	2200      	movs	r2, #0
 8007db4:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007db8:	68f8      	ldr	r0, [r7, #12]
 8007dba:	f000 f81f 	bl	8007dfc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d003      	beq.n	8007dec <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	68ba      	ldr	r2, [r7, #8]
 8007de8:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007dec:	68f8      	ldr	r0, [r7, #12]
 8007dee:	f001 fdc3 	bl	8009978 <USBH_LL_Init>

  return USBH_OK;
 8007df2:	2300      	movs	r3, #0
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3710      	adds	r7, #16
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b084      	sub	sp, #16
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007e04:	2300      	movs	r3, #0
 8007e06:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007e08:	2300      	movs	r3, #0
 8007e0a:	60fb      	str	r3, [r7, #12]
 8007e0c:	e009      	b.n	8007e22 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007e0e:	687a      	ldr	r2, [r7, #4]
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	33e0      	adds	r3, #224	@ 0xe0
 8007e14:	009b      	lsls	r3, r3, #2
 8007e16:	4413      	add	r3, r2
 8007e18:	2200      	movs	r2, #0
 8007e1a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	3301      	adds	r3, #1
 8007e20:	60fb      	str	r3, [r7, #12]
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2b0f      	cmp	r3, #15
 8007e26:	d9f2      	bls.n	8007e0e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007e28:	2300      	movs	r3, #0
 8007e2a:	60fb      	str	r3, [r7, #12]
 8007e2c:	e009      	b.n	8007e42 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007e2e:	687a      	ldr	r2, [r7, #4]
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	4413      	add	r3, r2
 8007e34:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007e38:	2200      	movs	r2, #0
 8007e3a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	3301      	adds	r3, #1
 8007e40:	60fb      	str	r3, [r7, #12]
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e48:	d3f1      	bcc.n	8007e2e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2200      	movs	r2, #0
 8007e54:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2201      	movs	r2, #1
 8007e5a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2201      	movs	r2, #1
 8007e68:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2240      	movs	r2, #64	@ 0x40
 8007e6e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2200      	movs	r2, #0
 8007e74:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2201      	movs	r2, #1
 8007e82:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2200      	movs	r2, #0
 8007e92:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	331c      	adds	r3, #28
 8007e9a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007e9e:	2100      	movs	r1, #0
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f002 f81d 	bl	8009ee0 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007eac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007eb0:	2100      	movs	r1, #0
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f002 f814 	bl	8009ee0 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8007ebe:	2212      	movs	r2, #18
 8007ec0:	2100      	movs	r1, #0
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f002 f80c 	bl	8009ee0 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007ece:	223e      	movs	r2, #62	@ 0x3e
 8007ed0:	2100      	movs	r1, #0
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f002 f804 	bl	8009ee0 <memset>

  return USBH_OK;
 8007ed8:	2300      	movs	r3, #0
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	3710      	adds	r7, #16
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}

08007ee2 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007ee2:	b480      	push	{r7}
 8007ee4:	b085      	sub	sp, #20
 8007ee6:	af00      	add	r7, sp, #0
 8007ee8:	6078      	str	r0, [r7, #4]
 8007eea:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007eec:	2300      	movs	r3, #0
 8007eee:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d016      	beq.n	8007f24 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d10e      	bne.n	8007f1e <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007f06:	1c59      	adds	r1, r3, #1
 8007f08:	687a      	ldr	r2, [r7, #4]
 8007f0a:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8007f0e:	687a      	ldr	r2, [r7, #4]
 8007f10:	33de      	adds	r3, #222	@ 0xde
 8007f12:	6839      	ldr	r1, [r7, #0]
 8007f14:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	73fb      	strb	r3, [r7, #15]
 8007f1c:	e004      	b.n	8007f28 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007f1e:	2302      	movs	r3, #2
 8007f20:	73fb      	strb	r3, [r7, #15]
 8007f22:	e001      	b.n	8007f28 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007f24:	2302      	movs	r3, #2
 8007f26:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3714      	adds	r7, #20
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f34:	4770      	bx	lr

08007f36 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007f36:	b480      	push	{r7}
 8007f38:	b085      	sub	sp, #20
 8007f3a:	af00      	add	r7, sp, #0
 8007f3c:	6078      	str	r0, [r7, #4]
 8007f3e:	460b      	mov	r3, r1
 8007f40:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007f42:	2300      	movs	r3, #0
 8007f44:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8007f4c:	78fa      	ldrb	r2, [r7, #3]
 8007f4e:	429a      	cmp	r2, r3
 8007f50:	d204      	bcs.n	8007f5c <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	78fa      	ldrb	r2, [r7, #3]
 8007f56:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8007f5a:	e001      	b.n	8007f60 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007f5c:	2302      	movs	r3, #2
 8007f5e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3714      	adds	r7, #20
 8007f66:	46bd      	mov	sp, r7
 8007f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6c:	4770      	bx	lr

08007f6e <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007f6e:	b480      	push	{r7}
 8007f70:	b087      	sub	sp, #28
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	6078      	str	r0, [r7, #4]
 8007f76:	4608      	mov	r0, r1
 8007f78:	4611      	mov	r1, r2
 8007f7a:	461a      	mov	r2, r3
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	70fb      	strb	r3, [r7, #3]
 8007f80:	460b      	mov	r3, r1
 8007f82:	70bb      	strb	r3, [r7, #2]
 8007f84:	4613      	mov	r3, r2
 8007f86:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007f88:	2300      	movs	r3, #0
 8007f8a:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007f96:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007f98:	e025      	b.n	8007fe6 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007f9a:	7dfb      	ldrb	r3, [r7, #23]
 8007f9c:	221a      	movs	r2, #26
 8007f9e:	fb02 f303 	mul.w	r3, r2, r3
 8007fa2:	3308      	adds	r3, #8
 8007fa4:	68fa      	ldr	r2, [r7, #12]
 8007fa6:	4413      	add	r3, r2
 8007fa8:	3302      	adds	r3, #2
 8007faa:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	795b      	ldrb	r3, [r3, #5]
 8007fb0:	78fa      	ldrb	r2, [r7, #3]
 8007fb2:	429a      	cmp	r2, r3
 8007fb4:	d002      	beq.n	8007fbc <USBH_FindInterface+0x4e>
 8007fb6:	78fb      	ldrb	r3, [r7, #3]
 8007fb8:	2bff      	cmp	r3, #255	@ 0xff
 8007fba:	d111      	bne.n	8007fe0 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007fc0:	78ba      	ldrb	r2, [r7, #2]
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	d002      	beq.n	8007fcc <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007fc6:	78bb      	ldrb	r3, [r7, #2]
 8007fc8:	2bff      	cmp	r3, #255	@ 0xff
 8007fca:	d109      	bne.n	8007fe0 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007fd0:	787a      	ldrb	r2, [r7, #1]
 8007fd2:	429a      	cmp	r2, r3
 8007fd4:	d002      	beq.n	8007fdc <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007fd6:	787b      	ldrb	r3, [r7, #1]
 8007fd8:	2bff      	cmp	r3, #255	@ 0xff
 8007fda:	d101      	bne.n	8007fe0 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007fdc:	7dfb      	ldrb	r3, [r7, #23]
 8007fde:	e006      	b.n	8007fee <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007fe0:	7dfb      	ldrb	r3, [r7, #23]
 8007fe2:	3301      	adds	r3, #1
 8007fe4:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007fe6:	7dfb      	ldrb	r3, [r7, #23]
 8007fe8:	2b01      	cmp	r3, #1
 8007fea:	d9d6      	bls.n	8007f9a <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007fec:	23ff      	movs	r3, #255	@ 0xff
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	371c      	adds	r7, #28
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff8:	4770      	bx	lr

08007ffa <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8007ffa:	b580      	push	{r7, lr}
 8007ffc:	b082      	sub	sp, #8
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f001 fcf4 	bl	80099f0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8008008:	2101      	movs	r1, #1
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f001 fe0d 	bl	8009c2a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008010:	2300      	movs	r3, #0
}
 8008012:	4618      	mov	r0, r3
 8008014:	3708      	adds	r7, #8
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}
	...

0800801c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b088      	sub	sp, #32
 8008020:	af04      	add	r7, sp, #16
 8008022:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008024:	2302      	movs	r3, #2
 8008026:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008028:	2300      	movs	r3, #0
 800802a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8008032:	b2db      	uxtb	r3, r3
 8008034:	2b01      	cmp	r3, #1
 8008036:	d102      	bne.n	800803e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2203      	movs	r2, #3
 800803c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	781b      	ldrb	r3, [r3, #0]
 8008042:	b2db      	uxtb	r3, r3
 8008044:	2b0b      	cmp	r3, #11
 8008046:	f200 81bb 	bhi.w	80083c0 <USBH_Process+0x3a4>
 800804a:	a201      	add	r2, pc, #4	@ (adr r2, 8008050 <USBH_Process+0x34>)
 800804c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008050:	08008081 	.word	0x08008081
 8008054:	080080b3 	.word	0x080080b3
 8008058:	0800811b 	.word	0x0800811b
 800805c:	0800835b 	.word	0x0800835b
 8008060:	080083c1 	.word	0x080083c1
 8008064:	080081bb 	.word	0x080081bb
 8008068:	08008301 	.word	0x08008301
 800806c:	080081f1 	.word	0x080081f1
 8008070:	08008211 	.word	0x08008211
 8008074:	0800822f 	.word	0x0800822f
 8008078:	08008273 	.word	0x08008273
 800807c:	08008343 	.word	0x08008343
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8008086:	b2db      	uxtb	r3, r3
 8008088:	2b00      	cmp	r3, #0
 800808a:	f000 819b 	beq.w	80083c4 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2201      	movs	r2, #1
 8008092:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008094:	20c8      	movs	r0, #200	@ 0xc8
 8008096:	f001 fe12 	bl	8009cbe <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f001 fd05 	bl	8009aaa <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2200      	movs	r2, #0
 80080a4:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2200      	movs	r2, #0
 80080ac:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80080b0:	e188      	b.n	80083c4 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	d107      	bne.n	80080cc <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2200      	movs	r2, #0
 80080c0:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2202      	movs	r2, #2
 80080c8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80080ca:	e18a      	b.n	80083e2 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80080d2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80080d6:	d914      	bls.n	8008102 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80080de:	3301      	adds	r3, #1
 80080e0:	b2da      	uxtb	r2, r3
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80080ee:	2b03      	cmp	r3, #3
 80080f0:	d903      	bls.n	80080fa <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	220d      	movs	r2, #13
 80080f6:	701a      	strb	r2, [r3, #0]
      break;
 80080f8:	e173      	b.n	80083e2 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2200      	movs	r2, #0
 80080fe:	701a      	strb	r2, [r3, #0]
      break;
 8008100:	e16f      	b.n	80083e2 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8008108:	f103 020a 	add.w	r2, r3, #10
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8008112:	200a      	movs	r0, #10
 8008114:	f001 fdd3 	bl	8009cbe <USBH_Delay>
      break;
 8008118:	e163      	b.n	80083e2 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008120:	2b00      	cmp	r3, #0
 8008122:	d005      	beq.n	8008130 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800812a:	2104      	movs	r1, #4
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008130:	2064      	movs	r0, #100	@ 0x64
 8008132:	f001 fdc4 	bl	8009cbe <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f001 fc90 	bl	8009a5c <USBH_LL_GetSpeed>
 800813c:	4603      	mov	r3, r0
 800813e:	461a      	mov	r2, r3
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2205      	movs	r2, #5
 800814a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800814c:	2100      	movs	r1, #0
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f001 fa9b 	bl	800968a <USBH_AllocPipe>
 8008154:	4603      	mov	r3, r0
 8008156:	461a      	mov	r2, r3
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800815c:	2180      	movs	r1, #128	@ 0x80
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f001 fa93 	bl	800968a <USBH_AllocPipe>
 8008164:	4603      	mov	r3, r0
 8008166:	461a      	mov	r2, r3
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	7919      	ldrb	r1, [r3, #4]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800817c:	687a      	ldr	r2, [r7, #4]
 800817e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008180:	9202      	str	r2, [sp, #8]
 8008182:	2200      	movs	r2, #0
 8008184:	9201      	str	r2, [sp, #4]
 8008186:	9300      	str	r3, [sp, #0]
 8008188:	4603      	mov	r3, r0
 800818a:	2280      	movs	r2, #128	@ 0x80
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f001 fa4d 	bl	800962c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	7959      	ldrb	r1, [r3, #5]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80081a2:	687a      	ldr	r2, [r7, #4]
 80081a4:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80081a6:	9202      	str	r2, [sp, #8]
 80081a8:	2200      	movs	r2, #0
 80081aa:	9201      	str	r2, [sp, #4]
 80081ac:	9300      	str	r3, [sp, #0]
 80081ae:	4603      	mov	r3, r0
 80081b0:	2200      	movs	r2, #0
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f001 fa3a 	bl	800962c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80081b8:	e113      	b.n	80083e2 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f000 f916 	bl	80083ec <USBH_HandleEnum>
 80081c0:	4603      	mov	r3, r0
 80081c2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80081c4:	7bbb      	ldrb	r3, [r7, #14]
 80081c6:	b2db      	uxtb	r3, r3
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	f040 80fd 	bne.w	80083c8 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2200      	movs	r2, #0
 80081d2:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 80081dc:	2b01      	cmp	r3, #1
 80081de:	d103      	bne.n	80081e8 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2208      	movs	r2, #8
 80081e4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80081e6:	e0ef      	b.n	80083c8 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2207      	movs	r2, #7
 80081ec:	701a      	strb	r2, [r3, #0]
      break;
 80081ee:	e0eb      	b.n	80083c8 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	f000 80e8 	beq.w	80083cc <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008202:	2101      	movs	r1, #1
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2208      	movs	r2, #8
 800820c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800820e:	e0dd      	b.n	80083cc <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8008216:	4619      	mov	r1, r3
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f000 fc3a 	bl	8008a92 <USBH_SetCfg>
 800821e:	4603      	mov	r3, r0
 8008220:	2b00      	cmp	r3, #0
 8008222:	f040 80d5 	bne.w	80083d0 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2209      	movs	r2, #9
 800822a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800822c:	e0d0      	b.n	80083d0 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8008234:	f003 0320 	and.w	r3, r3, #32
 8008238:	2b00      	cmp	r3, #0
 800823a:	d016      	beq.n	800826a <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800823c:	2101      	movs	r1, #1
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 fc4a 	bl	8008ad8 <USBH_SetFeature>
 8008244:	4603      	mov	r3, r0
 8008246:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008248:	7bbb      	ldrb	r3, [r7, #14]
 800824a:	b2db      	uxtb	r3, r3
 800824c:	2b00      	cmp	r3, #0
 800824e:	d103      	bne.n	8008258 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	220a      	movs	r2, #10
 8008254:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008256:	e0bd      	b.n	80083d4 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8008258:	7bbb      	ldrb	r3, [r7, #14]
 800825a:	b2db      	uxtb	r3, r3
 800825c:	2b03      	cmp	r3, #3
 800825e:	f040 80b9 	bne.w	80083d4 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	220a      	movs	r2, #10
 8008266:	701a      	strb	r2, [r3, #0]
      break;
 8008268:	e0b4      	b.n	80083d4 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	220a      	movs	r2, #10
 800826e:	701a      	strb	r2, [r3, #0]
      break;
 8008270:	e0b0      	b.n	80083d4 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008278:	2b00      	cmp	r3, #0
 800827a:	f000 80ad 	beq.w	80083d8 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2200      	movs	r2, #0
 8008282:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008286:	2300      	movs	r3, #0
 8008288:	73fb      	strb	r3, [r7, #15]
 800828a:	e016      	b.n	80082ba <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800828c:	7bfa      	ldrb	r2, [r7, #15]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	32de      	adds	r2, #222	@ 0xde
 8008292:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008296:	791a      	ldrb	r2, [r3, #4]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800829e:	429a      	cmp	r2, r3
 80082a0:	d108      	bne.n	80082b4 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 80082a2:	7bfa      	ldrb	r2, [r7, #15]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	32de      	adds	r2, #222	@ 0xde
 80082a8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 80082b2:	e005      	b.n	80082c0 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80082b4:	7bfb      	ldrb	r3, [r7, #15]
 80082b6:	3301      	adds	r3, #1
 80082b8:	73fb      	strb	r3, [r7, #15]
 80082ba:	7bfb      	ldrb	r3, [r7, #15]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d0e5      	beq.n	800828c <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d016      	beq.n	80082f8 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80082d0:	689b      	ldr	r3, [r3, #8]
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	4798      	blx	r3
 80082d6:	4603      	mov	r3, r0
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d109      	bne.n	80082f0 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2206      	movs	r2, #6
 80082e0:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80082e8:	2103      	movs	r1, #3
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80082ee:	e073      	b.n	80083d8 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	220d      	movs	r2, #13
 80082f4:	701a      	strb	r2, [r3, #0]
      break;
 80082f6:	e06f      	b.n	80083d8 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	220d      	movs	r2, #13
 80082fc:	701a      	strb	r2, [r3, #0]
      break;
 80082fe:	e06b      	b.n	80083d8 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008306:	2b00      	cmp	r3, #0
 8008308:	d017      	beq.n	800833a <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008310:	691b      	ldr	r3, [r3, #16]
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	4798      	blx	r3
 8008316:	4603      	mov	r3, r0
 8008318:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800831a:	7bbb      	ldrb	r3, [r7, #14]
 800831c:	b2db      	uxtb	r3, r3
 800831e:	2b00      	cmp	r3, #0
 8008320:	d103      	bne.n	800832a <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	220b      	movs	r2, #11
 8008326:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008328:	e058      	b.n	80083dc <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 800832a:	7bbb      	ldrb	r3, [r7, #14]
 800832c:	b2db      	uxtb	r3, r3
 800832e:	2b02      	cmp	r3, #2
 8008330:	d154      	bne.n	80083dc <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	220d      	movs	r2, #13
 8008336:	701a      	strb	r2, [r3, #0]
      break;
 8008338:	e050      	b.n	80083dc <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	220d      	movs	r2, #13
 800833e:	701a      	strb	r2, [r3, #0]
      break;
 8008340:	e04c      	b.n	80083dc <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008348:	2b00      	cmp	r3, #0
 800834a:	d049      	beq.n	80083e0 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008352:	695b      	ldr	r3, [r3, #20]
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	4798      	blx	r3
      }
      break;
 8008358:	e042      	b.n	80083e0 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2200      	movs	r2, #0
 800835e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f7ff fd4a 	bl	8007dfc <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800836e:	2b00      	cmp	r3, #0
 8008370:	d009      	beq.n	8008386 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008378:	68db      	ldr	r3, [r3, #12]
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2200      	movs	r2, #0
 8008382:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800838c:	2b00      	cmp	r3, #0
 800838e:	d005      	beq.n	800839c <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008396:	2105      	movs	r1, #5
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 80083a2:	b2db      	uxtb	r3, r3
 80083a4:	2b01      	cmp	r3, #1
 80083a6:	d107      	bne.n	80083b8 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2200      	movs	r2, #0
 80083ac:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f7ff fe22 	bl	8007ffa <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80083b6:	e014      	b.n	80083e2 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f001 fb19 	bl	80099f0 <USBH_LL_Start>
      break;
 80083be:	e010      	b.n	80083e2 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 80083c0:	bf00      	nop
 80083c2:	e00e      	b.n	80083e2 <USBH_Process+0x3c6>
      break;
 80083c4:	bf00      	nop
 80083c6:	e00c      	b.n	80083e2 <USBH_Process+0x3c6>
      break;
 80083c8:	bf00      	nop
 80083ca:	e00a      	b.n	80083e2 <USBH_Process+0x3c6>
    break;
 80083cc:	bf00      	nop
 80083ce:	e008      	b.n	80083e2 <USBH_Process+0x3c6>
      break;
 80083d0:	bf00      	nop
 80083d2:	e006      	b.n	80083e2 <USBH_Process+0x3c6>
      break;
 80083d4:	bf00      	nop
 80083d6:	e004      	b.n	80083e2 <USBH_Process+0x3c6>
      break;
 80083d8:	bf00      	nop
 80083da:	e002      	b.n	80083e2 <USBH_Process+0x3c6>
      break;
 80083dc:	bf00      	nop
 80083de:	e000      	b.n	80083e2 <USBH_Process+0x3c6>
      break;
 80083e0:	bf00      	nop
  }
  return USBH_OK;
 80083e2:	2300      	movs	r3, #0
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	3710      	adds	r7, #16
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}

080083ec <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b088      	sub	sp, #32
 80083f0:	af04      	add	r7, sp, #16
 80083f2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80083f4:	2301      	movs	r3, #1
 80083f6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80083f8:	2301      	movs	r3, #1
 80083fa:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	785b      	ldrb	r3, [r3, #1]
 8008400:	2b07      	cmp	r3, #7
 8008402:	f200 81bd 	bhi.w	8008780 <USBH_HandleEnum+0x394>
 8008406:	a201      	add	r2, pc, #4	@ (adr r2, 800840c <USBH_HandleEnum+0x20>)
 8008408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800840c:	0800842d 	.word	0x0800842d
 8008410:	080084e7 	.word	0x080084e7
 8008414:	08008551 	.word	0x08008551
 8008418:	080085db 	.word	0x080085db
 800841c:	08008645 	.word	0x08008645
 8008420:	080086b5 	.word	0x080086b5
 8008424:	080086fb 	.word	0x080086fb
 8008428:	08008741 	.word	0x08008741
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800842c:	2108      	movs	r1, #8
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f000 fa4c 	bl	80088cc <USBH_Get_DevDesc>
 8008434:	4603      	mov	r3, r0
 8008436:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008438:	7bbb      	ldrb	r3, [r7, #14]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d12e      	bne.n	800849c <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2201      	movs	r2, #1
 800844c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	7919      	ldrb	r1, [r3, #4]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800845e:	687a      	ldr	r2, [r7, #4]
 8008460:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008462:	9202      	str	r2, [sp, #8]
 8008464:	2200      	movs	r2, #0
 8008466:	9201      	str	r2, [sp, #4]
 8008468:	9300      	str	r3, [sp, #0]
 800846a:	4603      	mov	r3, r0
 800846c:	2280      	movs	r2, #128	@ 0x80
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f001 f8dc 	bl	800962c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	7959      	ldrb	r1, [r3, #5]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008484:	687a      	ldr	r2, [r7, #4]
 8008486:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008488:	9202      	str	r2, [sp, #8]
 800848a:	2200      	movs	r2, #0
 800848c:	9201      	str	r2, [sp, #4]
 800848e:	9300      	str	r3, [sp, #0]
 8008490:	4603      	mov	r3, r0
 8008492:	2200      	movs	r2, #0
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f001 f8c9 	bl	800962c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800849a:	e173      	b.n	8008784 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800849c:	7bbb      	ldrb	r3, [r7, #14]
 800849e:	2b03      	cmp	r3, #3
 80084a0:	f040 8170 	bne.w	8008784 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80084aa:	3301      	adds	r3, #1
 80084ac:	b2da      	uxtb	r2, r3
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80084ba:	2b03      	cmp	r3, #3
 80084bc:	d903      	bls.n	80084c6 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	220d      	movs	r2, #13
 80084c2:	701a      	strb	r2, [r3, #0]
      break;
 80084c4:	e15e      	b.n	8008784 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	795b      	ldrb	r3, [r3, #5]
 80084ca:	4619      	mov	r1, r3
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f001 f8fd 	bl	80096cc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	791b      	ldrb	r3, [r3, #4]
 80084d6:	4619      	mov	r1, r3
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f001 f8f7 	bl	80096cc <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2200      	movs	r2, #0
 80084e2:	701a      	strb	r2, [r3, #0]
      break;
 80084e4:	e14e      	b.n	8008784 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80084e6:	2112      	movs	r1, #18
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f000 f9ef 	bl	80088cc <USBH_Get_DevDesc>
 80084ee:	4603      	mov	r3, r0
 80084f0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80084f2:	7bbb      	ldrb	r3, [r7, #14]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d103      	bne.n	8008500 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2202      	movs	r2, #2
 80084fc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80084fe:	e143      	b.n	8008788 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008500:	7bbb      	ldrb	r3, [r7, #14]
 8008502:	2b03      	cmp	r3, #3
 8008504:	f040 8140 	bne.w	8008788 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800850e:	3301      	adds	r3, #1
 8008510:	b2da      	uxtb	r2, r3
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800851e:	2b03      	cmp	r3, #3
 8008520:	d903      	bls.n	800852a <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	220d      	movs	r2, #13
 8008526:	701a      	strb	r2, [r3, #0]
      break;
 8008528:	e12e      	b.n	8008788 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	795b      	ldrb	r3, [r3, #5]
 800852e:	4619      	mov	r1, r3
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f001 f8cb 	bl	80096cc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	791b      	ldrb	r3, [r3, #4]
 800853a:	4619      	mov	r1, r3
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f001 f8c5 	bl	80096cc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2200      	movs	r2, #0
 8008546:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2200      	movs	r2, #0
 800854c:	701a      	strb	r2, [r3, #0]
      break;
 800854e:	e11b      	b.n	8008788 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008550:	2101      	movs	r1, #1
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f000 fa79 	bl	8008a4a <USBH_SetAddress>
 8008558:	4603      	mov	r3, r0
 800855a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800855c:	7bbb      	ldrb	r3, [r7, #14]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d130      	bne.n	80085c4 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8008562:	2002      	movs	r0, #2
 8008564:	f001 fbab 	bl	8009cbe <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2201      	movs	r2, #1
 800856c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2203      	movs	r2, #3
 8008574:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	7919      	ldrb	r1, [r3, #4]
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008586:	687a      	ldr	r2, [r7, #4]
 8008588:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800858a:	9202      	str	r2, [sp, #8]
 800858c:	2200      	movs	r2, #0
 800858e:	9201      	str	r2, [sp, #4]
 8008590:	9300      	str	r3, [sp, #0]
 8008592:	4603      	mov	r3, r0
 8008594:	2280      	movs	r2, #128	@ 0x80
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f001 f848 	bl	800962c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	7959      	ldrb	r1, [r3, #5]
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80085ac:	687a      	ldr	r2, [r7, #4]
 80085ae:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80085b0:	9202      	str	r2, [sp, #8]
 80085b2:	2200      	movs	r2, #0
 80085b4:	9201      	str	r2, [sp, #4]
 80085b6:	9300      	str	r3, [sp, #0]
 80085b8:	4603      	mov	r3, r0
 80085ba:	2200      	movs	r2, #0
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f001 f835 	bl	800962c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80085c2:	e0e3      	b.n	800878c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80085c4:	7bbb      	ldrb	r3, [r7, #14]
 80085c6:	2b03      	cmp	r3, #3
 80085c8:	f040 80e0 	bne.w	800878c <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	220d      	movs	r2, #13
 80085d0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2200      	movs	r2, #0
 80085d6:	705a      	strb	r2, [r3, #1]
      break;
 80085d8:	e0d8      	b.n	800878c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80085da:	2109      	movs	r1, #9
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f000 f9a1 	bl	8008924 <USBH_Get_CfgDesc>
 80085e2:	4603      	mov	r3, r0
 80085e4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80085e6:	7bbb      	ldrb	r3, [r7, #14]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d103      	bne.n	80085f4 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2204      	movs	r2, #4
 80085f0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80085f2:	e0cd      	b.n	8008790 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80085f4:	7bbb      	ldrb	r3, [r7, #14]
 80085f6:	2b03      	cmp	r3, #3
 80085f8:	f040 80ca 	bne.w	8008790 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008602:	3301      	adds	r3, #1
 8008604:	b2da      	uxtb	r2, r3
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008612:	2b03      	cmp	r3, #3
 8008614:	d903      	bls.n	800861e <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	220d      	movs	r2, #13
 800861a:	701a      	strb	r2, [r3, #0]
      break;
 800861c:	e0b8      	b.n	8008790 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	795b      	ldrb	r3, [r3, #5]
 8008622:	4619      	mov	r1, r3
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f001 f851 	bl	80096cc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	791b      	ldrb	r3, [r3, #4]
 800862e:	4619      	mov	r1, r3
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f001 f84b 	bl	80096cc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2200      	movs	r2, #0
 800863a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2200      	movs	r2, #0
 8008640:	701a      	strb	r2, [r3, #0]
      break;
 8008642:	e0a5      	b.n	8008790 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800864a:	4619      	mov	r1, r3
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f000 f969 	bl	8008924 <USBH_Get_CfgDesc>
 8008652:	4603      	mov	r3, r0
 8008654:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008656:	7bbb      	ldrb	r3, [r7, #14]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d103      	bne.n	8008664 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2205      	movs	r2, #5
 8008660:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008662:	e097      	b.n	8008794 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008664:	7bbb      	ldrb	r3, [r7, #14]
 8008666:	2b03      	cmp	r3, #3
 8008668:	f040 8094 	bne.w	8008794 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008672:	3301      	adds	r3, #1
 8008674:	b2da      	uxtb	r2, r3
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008682:	2b03      	cmp	r3, #3
 8008684:	d903      	bls.n	800868e <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	220d      	movs	r2, #13
 800868a:	701a      	strb	r2, [r3, #0]
      break;
 800868c:	e082      	b.n	8008794 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	795b      	ldrb	r3, [r3, #5]
 8008692:	4619      	mov	r1, r3
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f001 f819 	bl	80096cc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	791b      	ldrb	r3, [r3, #4]
 800869e:	4619      	mov	r1, r3
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f001 f813 	bl	80096cc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2200      	movs	r2, #0
 80086aa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2200      	movs	r2, #0
 80086b0:	701a      	strb	r2, [r3, #0]
      break;
 80086b2:	e06f      	b.n	8008794 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d019      	beq.n	80086f2 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80086ca:	23ff      	movs	r3, #255	@ 0xff
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f000 f953 	bl	8008978 <USBH_Get_StringDesc>
 80086d2:	4603      	mov	r3, r0
 80086d4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80086d6:	7bbb      	ldrb	r3, [r7, #14]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d103      	bne.n	80086e4 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2206      	movs	r2, #6
 80086e0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80086e2:	e059      	b.n	8008798 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80086e4:	7bbb      	ldrb	r3, [r7, #14]
 80086e6:	2b03      	cmp	r3, #3
 80086e8:	d156      	bne.n	8008798 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2206      	movs	r2, #6
 80086ee:	705a      	strb	r2, [r3, #1]
      break;
 80086f0:	e052      	b.n	8008798 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2206      	movs	r2, #6
 80086f6:	705a      	strb	r2, [r3, #1]
      break;
 80086f8:	e04e      	b.n	8008798 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8008700:	2b00      	cmp	r3, #0
 8008702:	d019      	beq.n	8008738 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008710:	23ff      	movs	r3, #255	@ 0xff
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f000 f930 	bl	8008978 <USBH_Get_StringDesc>
 8008718:	4603      	mov	r3, r0
 800871a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800871c:	7bbb      	ldrb	r3, [r7, #14]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d103      	bne.n	800872a <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2207      	movs	r2, #7
 8008726:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008728:	e038      	b.n	800879c <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800872a:	7bbb      	ldrb	r3, [r7, #14]
 800872c:	2b03      	cmp	r3, #3
 800872e:	d135      	bne.n	800879c <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2207      	movs	r2, #7
 8008734:	705a      	strb	r2, [r3, #1]
      break;
 8008736:	e031      	b.n	800879c <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2207      	movs	r2, #7
 800873c:	705a      	strb	r2, [r3, #1]
      break;
 800873e:	e02d      	b.n	800879c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8008746:	2b00      	cmp	r3, #0
 8008748:	d017      	beq.n	800877a <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008756:	23ff      	movs	r3, #255	@ 0xff
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f000 f90d 	bl	8008978 <USBH_Get_StringDesc>
 800875e:	4603      	mov	r3, r0
 8008760:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008762:	7bbb      	ldrb	r3, [r7, #14]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d102      	bne.n	800876e <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008768:	2300      	movs	r3, #0
 800876a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800876c:	e018      	b.n	80087a0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800876e:	7bbb      	ldrb	r3, [r7, #14]
 8008770:	2b03      	cmp	r3, #3
 8008772:	d115      	bne.n	80087a0 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8008774:	2300      	movs	r3, #0
 8008776:	73fb      	strb	r3, [r7, #15]
      break;
 8008778:	e012      	b.n	80087a0 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800877a:	2300      	movs	r3, #0
 800877c:	73fb      	strb	r3, [r7, #15]
      break;
 800877e:	e00f      	b.n	80087a0 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8008780:	bf00      	nop
 8008782:	e00e      	b.n	80087a2 <USBH_HandleEnum+0x3b6>
      break;
 8008784:	bf00      	nop
 8008786:	e00c      	b.n	80087a2 <USBH_HandleEnum+0x3b6>
      break;
 8008788:	bf00      	nop
 800878a:	e00a      	b.n	80087a2 <USBH_HandleEnum+0x3b6>
      break;
 800878c:	bf00      	nop
 800878e:	e008      	b.n	80087a2 <USBH_HandleEnum+0x3b6>
      break;
 8008790:	bf00      	nop
 8008792:	e006      	b.n	80087a2 <USBH_HandleEnum+0x3b6>
      break;
 8008794:	bf00      	nop
 8008796:	e004      	b.n	80087a2 <USBH_HandleEnum+0x3b6>
      break;
 8008798:	bf00      	nop
 800879a:	e002      	b.n	80087a2 <USBH_HandleEnum+0x3b6>
      break;
 800879c:	bf00      	nop
 800879e:	e000      	b.n	80087a2 <USBH_HandleEnum+0x3b6>
      break;
 80087a0:	bf00      	nop
  }
  return Status;
 80087a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	3710      	adds	r7, #16
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}

080087ac <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b083      	sub	sp, #12
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	683a      	ldr	r2, [r7, #0]
 80087ba:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 80087be:	bf00      	nop
 80087c0:	370c      	adds	r7, #12
 80087c2:	46bd      	mov	sp, r7
 80087c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c8:	4770      	bx	lr

080087ca <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80087ca:	b580      	push	{r7, lr}
 80087cc:	b082      	sub	sp, #8
 80087ce:	af00      	add	r7, sp, #0
 80087d0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80087d8:	1c5a      	adds	r2, r3, #1
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f000 f804 	bl	80087ee <USBH_HandleSof>
}
 80087e6:	bf00      	nop
 80087e8:	3708      	adds	r7, #8
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}

080087ee <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80087ee:	b580      	push	{r7, lr}
 80087f0:	b082      	sub	sp, #8
 80087f2:	af00      	add	r7, sp, #0
 80087f4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	781b      	ldrb	r3, [r3, #0]
 80087fa:	b2db      	uxtb	r3, r3
 80087fc:	2b0b      	cmp	r3, #11
 80087fe:	d10a      	bne.n	8008816 <USBH_HandleSof+0x28>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008806:	2b00      	cmp	r3, #0
 8008808:	d005      	beq.n	8008816 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008810:	699b      	ldr	r3, [r3, #24]
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	4798      	blx	r3
  }
}
 8008816:	bf00      	nop
 8008818:	3708      	adds	r7, #8
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}

0800881e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800881e:	b480      	push	{r7}
 8008820:	b083      	sub	sp, #12
 8008822:	af00      	add	r7, sp, #0
 8008824:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2201      	movs	r2, #1
 800882a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800882e:	bf00      	nop
}
 8008830:	370c      	adds	r7, #12
 8008832:	46bd      	mov	sp, r7
 8008834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008838:	4770      	bx	lr

0800883a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800883a:	b480      	push	{r7}
 800883c:	b083      	sub	sp, #12
 800883e:	af00      	add	r7, sp, #0
 8008840:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2200      	movs	r2, #0
 8008846:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800884a:	bf00      	nop
}
 800884c:	370c      	adds	r7, #12
 800884e:	46bd      	mov	sp, r7
 8008850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008854:	4770      	bx	lr

08008856 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008856:	b480      	push	{r7}
 8008858:	b083      	sub	sp, #12
 800885a:	af00      	add	r7, sp, #0
 800885c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2201      	movs	r2, #1
 8008862:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2200      	movs	r2, #0
 800886a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2200      	movs	r2, #0
 8008872:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008876:	2300      	movs	r3, #0
}
 8008878:	4618      	mov	r0, r3
 800887a:	370c      	adds	r7, #12
 800887c:	46bd      	mov	sp, r7
 800887e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008882:	4770      	bx	lr

08008884 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b082      	sub	sp, #8
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2201      	movs	r2, #1
 8008890:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2200      	movs	r2, #0
 8008898:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2200      	movs	r2, #0
 80088a0:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f001 f8be 	bl	8009a26 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	791b      	ldrb	r3, [r3, #4]
 80088ae:	4619      	mov	r1, r3
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f000 ff0b 	bl	80096cc <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	795b      	ldrb	r3, [r3, #5]
 80088ba:	4619      	mov	r1, r3
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f000 ff05 	bl	80096cc <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80088c2:	2300      	movs	r3, #0
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	3708      	adds	r7, #8
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}

080088cc <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b086      	sub	sp, #24
 80088d0:	af02      	add	r7, sp, #8
 80088d2:	6078      	str	r0, [r7, #4]
 80088d4:	460b      	mov	r3, r1
 80088d6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 80088d8:	887b      	ldrh	r3, [r7, #2]
 80088da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80088de:	d901      	bls.n	80088e4 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80088e0:	2303      	movs	r3, #3
 80088e2:	e01b      	b.n	800891c <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80088ea:	887b      	ldrh	r3, [r7, #2]
 80088ec:	9300      	str	r3, [sp, #0]
 80088ee:	4613      	mov	r3, r2
 80088f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80088f4:	2100      	movs	r1, #0
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f000 f872 	bl	80089e0 <USBH_GetDescriptor>
 80088fc:	4603      	mov	r3, r0
 80088fe:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8008900:	7bfb      	ldrb	r3, [r7, #15]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d109      	bne.n	800891a <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800890c:	887a      	ldrh	r2, [r7, #2]
 800890e:	4619      	mov	r1, r3
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f000 f929 	bl	8008b68 <USBH_ParseDevDesc>
 8008916:	4603      	mov	r3, r0
 8008918:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800891a:	7bfb      	ldrb	r3, [r7, #15]
}
 800891c:	4618      	mov	r0, r3
 800891e:	3710      	adds	r7, #16
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}

08008924 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b086      	sub	sp, #24
 8008928:	af02      	add	r7, sp, #8
 800892a:	6078      	str	r0, [r7, #4]
 800892c:	460b      	mov	r3, r1
 800892e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	331c      	adds	r3, #28
 8008934:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8008936:	887b      	ldrh	r3, [r7, #2]
 8008938:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800893c:	d901      	bls.n	8008942 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800893e:	2303      	movs	r3, #3
 8008940:	e016      	b.n	8008970 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008942:	887b      	ldrh	r3, [r7, #2]
 8008944:	9300      	str	r3, [sp, #0]
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800894c:	2100      	movs	r1, #0
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f000 f846 	bl	80089e0 <USBH_GetDescriptor>
 8008954:	4603      	mov	r3, r0
 8008956:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008958:	7bfb      	ldrb	r3, [r7, #15]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d107      	bne.n	800896e <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800895e:	887b      	ldrh	r3, [r7, #2]
 8008960:	461a      	mov	r2, r3
 8008962:	68b9      	ldr	r1, [r7, #8]
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f000 f9af 	bl	8008cc8 <USBH_ParseCfgDesc>
 800896a:	4603      	mov	r3, r0
 800896c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800896e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008970:	4618      	mov	r0, r3
 8008972:	3710      	adds	r7, #16
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}

08008978 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b088      	sub	sp, #32
 800897c:	af02      	add	r7, sp, #8
 800897e:	60f8      	str	r0, [r7, #12]
 8008980:	607a      	str	r2, [r7, #4]
 8008982:	461a      	mov	r2, r3
 8008984:	460b      	mov	r3, r1
 8008986:	72fb      	strb	r3, [r7, #11]
 8008988:	4613      	mov	r3, r2
 800898a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800898c:	893b      	ldrh	r3, [r7, #8]
 800898e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008992:	d802      	bhi.n	800899a <USBH_Get_StringDesc+0x22>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d101      	bne.n	800899e <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800899a:	2303      	movs	r3, #3
 800899c:	e01c      	b.n	80089d8 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800899e:	7afb      	ldrb	r3, [r7, #11]
 80089a0:	b29b      	uxth	r3, r3
 80089a2:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80089a6:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80089ae:	893b      	ldrh	r3, [r7, #8]
 80089b0:	9300      	str	r3, [sp, #0]
 80089b2:	460b      	mov	r3, r1
 80089b4:	2100      	movs	r1, #0
 80089b6:	68f8      	ldr	r0, [r7, #12]
 80089b8:	f000 f812 	bl	80089e0 <USBH_GetDescriptor>
 80089bc:	4603      	mov	r3, r0
 80089be:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80089c0:	7dfb      	ldrb	r3, [r7, #23]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d107      	bne.n	80089d6 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80089cc:	893a      	ldrh	r2, [r7, #8]
 80089ce:	6879      	ldr	r1, [r7, #4]
 80089d0:	4618      	mov	r0, r3
 80089d2:	f000 fb8d 	bl	80090f0 <USBH_ParseStringDesc>
  }

  return status;
 80089d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80089d8:	4618      	mov	r0, r3
 80089da:	3718      	adds	r7, #24
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}

080089e0 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b084      	sub	sp, #16
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	60f8      	str	r0, [r7, #12]
 80089e8:	607b      	str	r3, [r7, #4]
 80089ea:	460b      	mov	r3, r1
 80089ec:	72fb      	strb	r3, [r7, #11]
 80089ee:	4613      	mov	r3, r2
 80089f0:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	789b      	ldrb	r3, [r3, #2]
 80089f6:	2b01      	cmp	r3, #1
 80089f8:	d11c      	bne.n	8008a34 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80089fa:	7afb      	ldrb	r3, [r7, #11]
 80089fc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008a00:	b2da      	uxtb	r2, r3
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	2206      	movs	r2, #6
 8008a0a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	893a      	ldrh	r2, [r7, #8]
 8008a10:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008a12:	893b      	ldrh	r3, [r7, #8]
 8008a14:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008a18:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008a1c:	d104      	bne.n	8008a28 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	f240 4209 	movw	r2, #1033	@ 0x409
 8008a24:	829a      	strh	r2, [r3, #20]
 8008a26:	e002      	b.n	8008a2e <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	8b3a      	ldrh	r2, [r7, #24]
 8008a32:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008a34:	8b3b      	ldrh	r3, [r7, #24]
 8008a36:	461a      	mov	r2, r3
 8008a38:	6879      	ldr	r1, [r7, #4]
 8008a3a:	68f8      	ldr	r0, [r7, #12]
 8008a3c:	f000 fba5 	bl	800918a <USBH_CtlReq>
 8008a40:	4603      	mov	r3, r0
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3710      	adds	r7, #16
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}

08008a4a <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008a4a:	b580      	push	{r7, lr}
 8008a4c:	b082      	sub	sp, #8
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	6078      	str	r0, [r7, #4]
 8008a52:	460b      	mov	r3, r1
 8008a54:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	789b      	ldrb	r3, [r3, #2]
 8008a5a:	2b01      	cmp	r3, #1
 8008a5c:	d10f      	bne.n	8008a7e <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2200      	movs	r2, #0
 8008a62:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2205      	movs	r2, #5
 8008a68:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008a6a:	78fb      	ldrb	r3, [r7, #3]
 8008a6c:	b29a      	uxth	r2, r3
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2200      	movs	r2, #0
 8008a76:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008a7e:	2200      	movs	r2, #0
 8008a80:	2100      	movs	r1, #0
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f000 fb81 	bl	800918a <USBH_CtlReq>
 8008a88:	4603      	mov	r3, r0
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3708      	adds	r7, #8
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}

08008a92 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008a92:	b580      	push	{r7, lr}
 8008a94:	b082      	sub	sp, #8
 8008a96:	af00      	add	r7, sp, #0
 8008a98:	6078      	str	r0, [r7, #4]
 8008a9a:	460b      	mov	r3, r1
 8008a9c:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	789b      	ldrb	r3, [r3, #2]
 8008aa2:	2b01      	cmp	r3, #1
 8008aa4:	d10e      	bne.n	8008ac4 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2209      	movs	r2, #9
 8008ab0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	887a      	ldrh	r2, [r7, #2]
 8008ab6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2200      	movs	r2, #0
 8008abc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	2100      	movs	r1, #0
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f000 fb5e 	bl	800918a <USBH_CtlReq>
 8008ace:	4603      	mov	r3, r0
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3708      	adds	r7, #8
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}

08008ad8 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b082      	sub	sp, #8
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	460b      	mov	r3, r1
 8008ae2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	789b      	ldrb	r3, [r3, #2]
 8008ae8:	2b01      	cmp	r3, #1
 8008aea:	d10f      	bne.n	8008b0c <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2200      	movs	r2, #0
 8008af0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2203      	movs	r2, #3
 8008af6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008af8:	78fb      	ldrb	r3, [r7, #3]
 8008afa:	b29a      	uxth	r2, r3
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2200      	movs	r2, #0
 8008b04:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	2100      	movs	r1, #0
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f000 fb3a 	bl	800918a <USBH_CtlReq>
 8008b16:	4603      	mov	r3, r0
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	3708      	adds	r7, #8
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}

08008b20 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b082      	sub	sp, #8
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
 8008b28:	460b      	mov	r3, r1
 8008b2a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	789b      	ldrb	r3, [r3, #2]
 8008b30:	2b01      	cmp	r3, #1
 8008b32:	d10f      	bne.n	8008b54 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2202      	movs	r2, #2
 8008b38:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2201      	movs	r2, #1
 8008b3e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2200      	movs	r2, #0
 8008b44:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008b46:	78fb      	ldrb	r3, [r7, #3]
 8008b48:	b29a      	uxth	r2, r3
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2200      	movs	r2, #0
 8008b52:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008b54:	2200      	movs	r2, #0
 8008b56:	2100      	movs	r1, #0
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f000 fb16 	bl	800918a <USBH_CtlReq>
 8008b5e:	4603      	mov	r3, r0
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3708      	adds	r7, #8
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}

08008b68 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b087      	sub	sp, #28
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	60f8      	str	r0, [r7, #12]
 8008b70:	60b9      	str	r1, [r7, #8]
 8008b72:	4613      	mov	r3, r2
 8008b74:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008b7c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d101      	bne.n	8008b8c <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8008b88:	2302      	movs	r3, #2
 8008b8a:	e094      	b.n	8008cb6 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	781a      	ldrb	r2, [r3, #0]
 8008b90:	693b      	ldr	r3, [r7, #16]
 8008b92:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	785a      	ldrb	r2, [r3, #1]
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	3302      	adds	r3, #2
 8008ba0:	781b      	ldrb	r3, [r3, #0]
 8008ba2:	461a      	mov	r2, r3
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	3303      	adds	r3, #3
 8008ba8:	781b      	ldrb	r3, [r3, #0]
 8008baa:	021b      	lsls	r3, r3, #8
 8008bac:	b29b      	uxth	r3, r3
 8008bae:	4313      	orrs	r3, r2
 8008bb0:	b29a      	uxth	r2, r3
 8008bb2:	693b      	ldr	r3, [r7, #16]
 8008bb4:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	791a      	ldrb	r2, [r3, #4]
 8008bba:	693b      	ldr	r3, [r7, #16]
 8008bbc:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	795a      	ldrb	r2, [r3, #5]
 8008bc2:	693b      	ldr	r3, [r7, #16]
 8008bc4:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	799a      	ldrb	r2, [r3, #6]
 8008bca:	693b      	ldr	r3, [r7, #16]
 8008bcc:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	79da      	ldrb	r2, [r3, #7]
 8008bd2:	693b      	ldr	r3, [r7, #16]
 8008bd4:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d004      	beq.n	8008bea <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008be6:	2b01      	cmp	r3, #1
 8008be8:	d11b      	bne.n	8008c22 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8008bea:	693b      	ldr	r3, [r7, #16]
 8008bec:	79db      	ldrb	r3, [r3, #7]
 8008bee:	2b20      	cmp	r3, #32
 8008bf0:	dc0f      	bgt.n	8008c12 <USBH_ParseDevDesc+0xaa>
 8008bf2:	2b08      	cmp	r3, #8
 8008bf4:	db0f      	blt.n	8008c16 <USBH_ParseDevDesc+0xae>
 8008bf6:	3b08      	subs	r3, #8
 8008bf8:	4a32      	ldr	r2, [pc, #200]	@ (8008cc4 <USBH_ParseDevDesc+0x15c>)
 8008bfa:	fa22 f303 	lsr.w	r3, r2, r3
 8008bfe:	f003 0301 	and.w	r3, r3, #1
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	bf14      	ite	ne
 8008c06:	2301      	movne	r3, #1
 8008c08:	2300      	moveq	r3, #0
 8008c0a:	b2db      	uxtb	r3, r3
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d106      	bne.n	8008c1e <USBH_ParseDevDesc+0xb6>
 8008c10:	e001      	b.n	8008c16 <USBH_ParseDevDesc+0xae>
 8008c12:	2b40      	cmp	r3, #64	@ 0x40
 8008c14:	d003      	beq.n	8008c1e <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	2208      	movs	r2, #8
 8008c1a:	71da      	strb	r2, [r3, #7]
        break;
 8008c1c:	e000      	b.n	8008c20 <USBH_ParseDevDesc+0xb8>
        break;
 8008c1e:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8008c20:	e00e      	b.n	8008c40 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008c28:	2b02      	cmp	r3, #2
 8008c2a:	d107      	bne.n	8008c3c <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8008c2c:	693b      	ldr	r3, [r7, #16]
 8008c2e:	79db      	ldrb	r3, [r3, #7]
 8008c30:	2b08      	cmp	r3, #8
 8008c32:	d005      	beq.n	8008c40 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8008c34:	693b      	ldr	r3, [r7, #16]
 8008c36:	2208      	movs	r2, #8
 8008c38:	71da      	strb	r2, [r3, #7]
 8008c3a:	e001      	b.n	8008c40 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008c3c:	2303      	movs	r3, #3
 8008c3e:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8008c40:	88fb      	ldrh	r3, [r7, #6]
 8008c42:	2b08      	cmp	r3, #8
 8008c44:	d936      	bls.n	8008cb4 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	3308      	adds	r3, #8
 8008c4a:	781b      	ldrb	r3, [r3, #0]
 8008c4c:	461a      	mov	r2, r3
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	3309      	adds	r3, #9
 8008c52:	781b      	ldrb	r3, [r3, #0]
 8008c54:	021b      	lsls	r3, r3, #8
 8008c56:	b29b      	uxth	r3, r3
 8008c58:	4313      	orrs	r3, r2
 8008c5a:	b29a      	uxth	r2, r3
 8008c5c:	693b      	ldr	r3, [r7, #16]
 8008c5e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	330a      	adds	r3, #10
 8008c64:	781b      	ldrb	r3, [r3, #0]
 8008c66:	461a      	mov	r2, r3
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	330b      	adds	r3, #11
 8008c6c:	781b      	ldrb	r3, [r3, #0]
 8008c6e:	021b      	lsls	r3, r3, #8
 8008c70:	b29b      	uxth	r3, r3
 8008c72:	4313      	orrs	r3, r2
 8008c74:	b29a      	uxth	r2, r3
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	330c      	adds	r3, #12
 8008c7e:	781b      	ldrb	r3, [r3, #0]
 8008c80:	461a      	mov	r2, r3
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	330d      	adds	r3, #13
 8008c86:	781b      	ldrb	r3, [r3, #0]
 8008c88:	021b      	lsls	r3, r3, #8
 8008c8a:	b29b      	uxth	r3, r3
 8008c8c:	4313      	orrs	r3, r2
 8008c8e:	b29a      	uxth	r2, r3
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	7b9a      	ldrb	r2, [r3, #14]
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	7bda      	ldrb	r2, [r3, #15]
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	7c1a      	ldrb	r2, [r3, #16]
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	7c5a      	ldrb	r2, [r3, #17]
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8008cb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	371c      	adds	r7, #28
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc0:	4770      	bx	lr
 8008cc2:	bf00      	nop
 8008cc4:	01000101 	.word	0x01000101

08008cc8 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b08c      	sub	sp, #48	@ 0x30
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	60f8      	str	r0, [r7, #12]
 8008cd0:	60b9      	str	r1, [r7, #8]
 8008cd2:	4613      	mov	r3, r2
 8008cd4:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008cdc:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8008cea:	2300      	movs	r3, #0
 8008cec:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d101      	bne.n	8008cfa <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8008cf6:	2302      	movs	r3, #2
 8008cf8:	e0da      	b.n	8008eb0 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8008cfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d00:	781b      	ldrb	r3, [r3, #0]
 8008d02:	2b09      	cmp	r3, #9
 8008d04:	d002      	beq.n	8008d0c <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d08:	2209      	movs	r2, #9
 8008d0a:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	781a      	ldrb	r2, [r3, #0]
 8008d10:	6a3b      	ldr	r3, [r7, #32]
 8008d12:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	785a      	ldrb	r2, [r3, #1]
 8008d18:	6a3b      	ldr	r3, [r7, #32]
 8008d1a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	3302      	adds	r3, #2
 8008d20:	781b      	ldrb	r3, [r3, #0]
 8008d22:	461a      	mov	r2, r3
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	3303      	adds	r3, #3
 8008d28:	781b      	ldrb	r3, [r3, #0]
 8008d2a:	021b      	lsls	r3, r3, #8
 8008d2c:	b29b      	uxth	r3, r3
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	b29b      	uxth	r3, r3
 8008d32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d36:	bf28      	it	cs
 8008d38:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8008d3c:	b29a      	uxth	r2, r3
 8008d3e:	6a3b      	ldr	r3, [r7, #32]
 8008d40:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	791a      	ldrb	r2, [r3, #4]
 8008d46:	6a3b      	ldr	r3, [r7, #32]
 8008d48:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	795a      	ldrb	r2, [r3, #5]
 8008d4e:	6a3b      	ldr	r3, [r7, #32]
 8008d50:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	799a      	ldrb	r2, [r3, #6]
 8008d56:	6a3b      	ldr	r3, [r7, #32]
 8008d58:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8008d5a:	68bb      	ldr	r3, [r7, #8]
 8008d5c:	79da      	ldrb	r2, [r3, #7]
 8008d5e:	6a3b      	ldr	r3, [r7, #32]
 8008d60:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	7a1a      	ldrb	r2, [r3, #8]
 8008d66:	6a3b      	ldr	r3, [r7, #32]
 8008d68:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008d6a:	88fb      	ldrh	r3, [r7, #6]
 8008d6c:	2b09      	cmp	r3, #9
 8008d6e:	f240 809d 	bls.w	8008eac <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8008d72:	2309      	movs	r3, #9
 8008d74:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008d76:	2300      	movs	r3, #0
 8008d78:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008d7a:	e081      	b.n	8008e80 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008d7c:	f107 0316 	add.w	r3, r7, #22
 8008d80:	4619      	mov	r1, r3
 8008d82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008d84:	f000 f9e7 	bl	8009156 <USBH_GetNextDesc>
 8008d88:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008d8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d8c:	785b      	ldrb	r3, [r3, #1]
 8008d8e:	2b04      	cmp	r3, #4
 8008d90:	d176      	bne.n	8008e80 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d94:	781b      	ldrb	r3, [r3, #0]
 8008d96:	2b09      	cmp	r3, #9
 8008d98:	d002      	beq.n	8008da0 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d9c:	2209      	movs	r2, #9
 8008d9e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008da0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008da4:	221a      	movs	r2, #26
 8008da6:	fb02 f303 	mul.w	r3, r2, r3
 8008daa:	3308      	adds	r3, #8
 8008dac:	6a3a      	ldr	r2, [r7, #32]
 8008dae:	4413      	add	r3, r2
 8008db0:	3302      	adds	r3, #2
 8008db2:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008db4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008db6:	69f8      	ldr	r0, [r7, #28]
 8008db8:	f000 f87e 	bl	8008eb8 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008dc6:	e043      	b.n	8008e50 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008dc8:	f107 0316 	add.w	r3, r7, #22
 8008dcc:	4619      	mov	r1, r3
 8008dce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008dd0:	f000 f9c1 	bl	8009156 <USBH_GetNextDesc>
 8008dd4:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dd8:	785b      	ldrb	r3, [r3, #1]
 8008dda:	2b05      	cmp	r3, #5
 8008ddc:	d138      	bne.n	8008e50 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8008dde:	69fb      	ldr	r3, [r7, #28]
 8008de0:	795b      	ldrb	r3, [r3, #5]
 8008de2:	2b01      	cmp	r3, #1
 8008de4:	d113      	bne.n	8008e0e <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008de6:	69fb      	ldr	r3, [r7, #28]
 8008de8:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8008dea:	2b02      	cmp	r3, #2
 8008dec:	d003      	beq.n	8008df6 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008dee:	69fb      	ldr	r3, [r7, #28]
 8008df0:	799b      	ldrb	r3, [r3, #6]
 8008df2:	2b03      	cmp	r3, #3
 8008df4:	d10b      	bne.n	8008e0e <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008df6:	69fb      	ldr	r3, [r7, #28]
 8008df8:	79db      	ldrb	r3, [r3, #7]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d10b      	bne.n	8008e16 <USBH_ParseCfgDesc+0x14e>
 8008dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e00:	781b      	ldrb	r3, [r3, #0]
 8008e02:	2b09      	cmp	r3, #9
 8008e04:	d007      	beq.n	8008e16 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8008e06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e08:	2209      	movs	r2, #9
 8008e0a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008e0c:	e003      	b.n	8008e16 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008e0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e10:	2207      	movs	r2, #7
 8008e12:	701a      	strb	r2, [r3, #0]
 8008e14:	e000      	b.n	8008e18 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008e16:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008e18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008e1c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008e20:	3201      	adds	r2, #1
 8008e22:	00d2      	lsls	r2, r2, #3
 8008e24:	211a      	movs	r1, #26
 8008e26:	fb01 f303 	mul.w	r3, r1, r3
 8008e2a:	4413      	add	r3, r2
 8008e2c:	3308      	adds	r3, #8
 8008e2e:	6a3a      	ldr	r2, [r7, #32]
 8008e30:	4413      	add	r3, r2
 8008e32:	3304      	adds	r3, #4
 8008e34:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008e36:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008e38:	69b9      	ldr	r1, [r7, #24]
 8008e3a:	68f8      	ldr	r0, [r7, #12]
 8008e3c:	f000 f870 	bl	8008f20 <USBH_ParseEPDesc>
 8008e40:	4603      	mov	r3, r0
 8008e42:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8008e46:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008e4a:	3301      	adds	r3, #1
 8008e4c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008e50:	69fb      	ldr	r3, [r7, #28]
 8008e52:	791b      	ldrb	r3, [r3, #4]
 8008e54:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008e58:	429a      	cmp	r2, r3
 8008e5a:	d204      	bcs.n	8008e66 <USBH_ParseCfgDesc+0x19e>
 8008e5c:	6a3b      	ldr	r3, [r7, #32]
 8008e5e:	885a      	ldrh	r2, [r3, #2]
 8008e60:	8afb      	ldrh	r3, [r7, #22]
 8008e62:	429a      	cmp	r2, r3
 8008e64:	d8b0      	bhi.n	8008dc8 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008e66:	69fb      	ldr	r3, [r7, #28]
 8008e68:	791b      	ldrb	r3, [r3, #4]
 8008e6a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008e6e:	429a      	cmp	r2, r3
 8008e70:	d201      	bcs.n	8008e76 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8008e72:	2303      	movs	r3, #3
 8008e74:	e01c      	b.n	8008eb0 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8008e76:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008e7a:	3301      	adds	r3, #1
 8008e7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008e80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008e84:	2b01      	cmp	r3, #1
 8008e86:	d805      	bhi.n	8008e94 <USBH_ParseCfgDesc+0x1cc>
 8008e88:	6a3b      	ldr	r3, [r7, #32]
 8008e8a:	885a      	ldrh	r2, [r3, #2]
 8008e8c:	8afb      	ldrh	r3, [r7, #22]
 8008e8e:	429a      	cmp	r2, r3
 8008e90:	f63f af74 	bhi.w	8008d7c <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008e94:	6a3b      	ldr	r3, [r7, #32]
 8008e96:	791b      	ldrb	r3, [r3, #4]
 8008e98:	2b02      	cmp	r3, #2
 8008e9a:	bf28      	it	cs
 8008e9c:	2302      	movcs	r3, #2
 8008e9e:	b2db      	uxtb	r3, r3
 8008ea0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008ea4:	429a      	cmp	r2, r3
 8008ea6:	d201      	bcs.n	8008eac <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8008ea8:	2303      	movs	r3, #3
 8008eaa:	e001      	b.n	8008eb0 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8008eac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	3730      	adds	r7, #48	@ 0x30
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}

08008eb8 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8008eb8:	b480      	push	{r7}
 8008eba:	b083      	sub	sp, #12
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
 8008ec0:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	781a      	ldrb	r2, [r3, #0]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	785a      	ldrb	r2, [r3, #1]
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	789a      	ldrb	r2, [r3, #2]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	78da      	ldrb	r2, [r3, #3]
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	3304      	adds	r3, #4
 8008ee6:	781b      	ldrb	r3, [r3, #0]
 8008ee8:	2b02      	cmp	r3, #2
 8008eea:	bf28      	it	cs
 8008eec:	2302      	movcs	r3, #2
 8008eee:	b2da      	uxtb	r2, r3
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	795a      	ldrb	r2, [r3, #5]
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	799a      	ldrb	r2, [r3, #6]
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	79da      	ldrb	r2, [r3, #7]
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	7a1a      	ldrb	r2, [r3, #8]
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	721a      	strb	r2, [r3, #8]
}
 8008f14:	bf00      	nop
 8008f16:	370c      	adds	r7, #12
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1e:	4770      	bx	lr

08008f20 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b087      	sub	sp, #28
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	60f8      	str	r0, [r7, #12]
 8008f28:	60b9      	str	r1, [r7, #8]
 8008f2a:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	781a      	ldrb	r2, [r3, #0]
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	785a      	ldrb	r2, [r3, #1]
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	789a      	ldrb	r2, [r3, #2]
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	78da      	ldrb	r2, [r3, #3]
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	3304      	adds	r3, #4
 8008f54:	781b      	ldrb	r3, [r3, #0]
 8008f56:	461a      	mov	r2, r3
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	3305      	adds	r3, #5
 8008f5c:	781b      	ldrb	r3, [r3, #0]
 8008f5e:	021b      	lsls	r3, r3, #8
 8008f60:	b29b      	uxth	r3, r3
 8008f62:	4313      	orrs	r3, r2
 8008f64:	b29a      	uxth	r2, r3
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	799a      	ldrb	r2, [r3, #6]
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	889b      	ldrh	r3, [r3, #4]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d009      	beq.n	8008f8e <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008f7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f82:	d804      	bhi.n	8008f8e <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008f88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f8c:	d901      	bls.n	8008f92 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8008f8e:	2303      	movs	r3, #3
 8008f90:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d136      	bne.n	800900a <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	78db      	ldrb	r3, [r3, #3]
 8008fa0:	f003 0303 	and.w	r3, r3, #3
 8008fa4:	2b02      	cmp	r3, #2
 8008fa6:	d108      	bne.n	8008fba <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	889b      	ldrh	r3, [r3, #4]
 8008fac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008fb0:	f240 8097 	bls.w	80090e2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008fb4:	2303      	movs	r3, #3
 8008fb6:	75fb      	strb	r3, [r7, #23]
 8008fb8:	e093      	b.n	80090e2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	78db      	ldrb	r3, [r3, #3]
 8008fbe:	f003 0303 	and.w	r3, r3, #3
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d107      	bne.n	8008fd6 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	889b      	ldrh	r3, [r3, #4]
 8008fca:	2b40      	cmp	r3, #64	@ 0x40
 8008fcc:	f240 8089 	bls.w	80090e2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008fd0:	2303      	movs	r3, #3
 8008fd2:	75fb      	strb	r3, [r7, #23]
 8008fd4:	e085      	b.n	80090e2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	78db      	ldrb	r3, [r3, #3]
 8008fda:	f003 0303 	and.w	r3, r3, #3
 8008fde:	2b01      	cmp	r3, #1
 8008fe0:	d005      	beq.n	8008fee <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	78db      	ldrb	r3, [r3, #3]
 8008fe6:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008fea:	2b03      	cmp	r3, #3
 8008fec:	d10a      	bne.n	8009004 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	799b      	ldrb	r3, [r3, #6]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d003      	beq.n	8008ffe <USBH_ParseEPDesc+0xde>
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	799b      	ldrb	r3, [r3, #6]
 8008ffa:	2b10      	cmp	r3, #16
 8008ffc:	d970      	bls.n	80090e0 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8008ffe:	2303      	movs	r3, #3
 8009000:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009002:	e06d      	b.n	80090e0 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009004:	2303      	movs	r3, #3
 8009006:	75fb      	strb	r3, [r7, #23]
 8009008:	e06b      	b.n	80090e2 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009010:	2b01      	cmp	r3, #1
 8009012:	d13c      	bne.n	800908e <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	78db      	ldrb	r3, [r3, #3]
 8009018:	f003 0303 	and.w	r3, r3, #3
 800901c:	2b02      	cmp	r3, #2
 800901e:	d005      	beq.n	800902c <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	78db      	ldrb	r3, [r3, #3]
 8009024:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009028:	2b00      	cmp	r3, #0
 800902a:	d106      	bne.n	800903a <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	889b      	ldrh	r3, [r3, #4]
 8009030:	2b40      	cmp	r3, #64	@ 0x40
 8009032:	d956      	bls.n	80090e2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009034:	2303      	movs	r3, #3
 8009036:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009038:	e053      	b.n	80090e2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	78db      	ldrb	r3, [r3, #3]
 800903e:	f003 0303 	and.w	r3, r3, #3
 8009042:	2b01      	cmp	r3, #1
 8009044:	d10e      	bne.n	8009064 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	799b      	ldrb	r3, [r3, #6]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d007      	beq.n	800905e <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800904e:	68bb      	ldr	r3, [r7, #8]
 8009050:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8009052:	2b10      	cmp	r3, #16
 8009054:	d803      	bhi.n	800905e <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800905a:	2b40      	cmp	r3, #64	@ 0x40
 800905c:	d941      	bls.n	80090e2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800905e:	2303      	movs	r3, #3
 8009060:	75fb      	strb	r3, [r7, #23]
 8009062:	e03e      	b.n	80090e2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	78db      	ldrb	r3, [r3, #3]
 8009068:	f003 0303 	and.w	r3, r3, #3
 800906c:	2b03      	cmp	r3, #3
 800906e:	d10b      	bne.n	8009088 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	799b      	ldrb	r3, [r3, #6]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d004      	beq.n	8009082 <USBH_ParseEPDesc+0x162>
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	889b      	ldrh	r3, [r3, #4]
 800907c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009080:	d32f      	bcc.n	80090e2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009082:	2303      	movs	r3, #3
 8009084:	75fb      	strb	r3, [r7, #23]
 8009086:	e02c      	b.n	80090e2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009088:	2303      	movs	r3, #3
 800908a:	75fb      	strb	r3, [r7, #23]
 800908c:	e029      	b.n	80090e2 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009094:	2b02      	cmp	r3, #2
 8009096:	d120      	bne.n	80090da <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	78db      	ldrb	r3, [r3, #3]
 800909c:	f003 0303 	and.w	r3, r3, #3
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d106      	bne.n	80090b2 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	889b      	ldrh	r3, [r3, #4]
 80090a8:	2b08      	cmp	r3, #8
 80090aa:	d01a      	beq.n	80090e2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80090ac:	2303      	movs	r3, #3
 80090ae:	75fb      	strb	r3, [r7, #23]
 80090b0:	e017      	b.n	80090e2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80090b2:	68bb      	ldr	r3, [r7, #8]
 80090b4:	78db      	ldrb	r3, [r3, #3]
 80090b6:	f003 0303 	and.w	r3, r3, #3
 80090ba:	2b03      	cmp	r3, #3
 80090bc:	d10a      	bne.n	80090d4 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	799b      	ldrb	r3, [r3, #6]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d003      	beq.n	80090ce <USBH_ParseEPDesc+0x1ae>
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	889b      	ldrh	r3, [r3, #4]
 80090ca:	2b08      	cmp	r3, #8
 80090cc:	d909      	bls.n	80090e2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80090ce:	2303      	movs	r3, #3
 80090d0:	75fb      	strb	r3, [r7, #23]
 80090d2:	e006      	b.n	80090e2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80090d4:	2303      	movs	r3, #3
 80090d6:	75fb      	strb	r3, [r7, #23]
 80090d8:	e003      	b.n	80090e2 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80090da:	2303      	movs	r3, #3
 80090dc:	75fb      	strb	r3, [r7, #23]
 80090de:	e000      	b.n	80090e2 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80090e0:	bf00      	nop
  }

  return status;
 80090e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	371c      	adds	r7, #28
 80090e8:	46bd      	mov	sp, r7
 80090ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ee:	4770      	bx	lr

080090f0 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80090f0:	b480      	push	{r7}
 80090f2:	b087      	sub	sp, #28
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	60f8      	str	r0, [r7, #12]
 80090f8:	60b9      	str	r1, [r7, #8]
 80090fa:	4613      	mov	r3, r2
 80090fc:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	3301      	adds	r3, #1
 8009102:	781b      	ldrb	r3, [r3, #0]
 8009104:	2b03      	cmp	r3, #3
 8009106:	d120      	bne.n	800914a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	781b      	ldrb	r3, [r3, #0]
 800910c:	1e9a      	subs	r2, r3, #2
 800910e:	88fb      	ldrh	r3, [r7, #6]
 8009110:	4293      	cmp	r3, r2
 8009112:	bf28      	it	cs
 8009114:	4613      	movcs	r3, r2
 8009116:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	3302      	adds	r3, #2
 800911c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800911e:	2300      	movs	r3, #0
 8009120:	82fb      	strh	r3, [r7, #22]
 8009122:	e00b      	b.n	800913c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009124:	8afb      	ldrh	r3, [r7, #22]
 8009126:	68fa      	ldr	r2, [r7, #12]
 8009128:	4413      	add	r3, r2
 800912a:	781a      	ldrb	r2, [r3, #0]
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	3301      	adds	r3, #1
 8009134:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009136:	8afb      	ldrh	r3, [r7, #22]
 8009138:	3302      	adds	r3, #2
 800913a:	82fb      	strh	r3, [r7, #22]
 800913c:	8afa      	ldrh	r2, [r7, #22]
 800913e:	8abb      	ldrh	r3, [r7, #20]
 8009140:	429a      	cmp	r2, r3
 8009142:	d3ef      	bcc.n	8009124 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	2200      	movs	r2, #0
 8009148:	701a      	strb	r2, [r3, #0]
  }
}
 800914a:	bf00      	nop
 800914c:	371c      	adds	r7, #28
 800914e:	46bd      	mov	sp, r7
 8009150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009154:	4770      	bx	lr

08009156 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009156:	b480      	push	{r7}
 8009158:	b085      	sub	sp, #20
 800915a:	af00      	add	r7, sp, #0
 800915c:	6078      	str	r0, [r7, #4]
 800915e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	881b      	ldrh	r3, [r3, #0]
 8009164:	687a      	ldr	r2, [r7, #4]
 8009166:	7812      	ldrb	r2, [r2, #0]
 8009168:	4413      	add	r3, r2
 800916a:	b29a      	uxth	r2, r3
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	781b      	ldrb	r3, [r3, #0]
 8009174:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	4413      	add	r3, r2
 800917a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800917c:	68fb      	ldr	r3, [r7, #12]
}
 800917e:	4618      	mov	r0, r3
 8009180:	3714      	adds	r7, #20
 8009182:	46bd      	mov	sp, r7
 8009184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009188:	4770      	bx	lr

0800918a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800918a:	b580      	push	{r7, lr}
 800918c:	b086      	sub	sp, #24
 800918e:	af00      	add	r7, sp, #0
 8009190:	60f8      	str	r0, [r7, #12]
 8009192:	60b9      	str	r1, [r7, #8]
 8009194:	4613      	mov	r3, r2
 8009196:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009198:	2301      	movs	r3, #1
 800919a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	789b      	ldrb	r3, [r3, #2]
 80091a0:	2b01      	cmp	r3, #1
 80091a2:	d002      	beq.n	80091aa <USBH_CtlReq+0x20>
 80091a4:	2b02      	cmp	r3, #2
 80091a6:	d00f      	beq.n	80091c8 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80091a8:	e027      	b.n	80091fa <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	68ba      	ldr	r2, [r7, #8]
 80091ae:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	88fa      	ldrh	r2, [r7, #6]
 80091b4:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	2201      	movs	r2, #1
 80091ba:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	2202      	movs	r2, #2
 80091c0:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80091c2:	2301      	movs	r3, #1
 80091c4:	75fb      	strb	r3, [r7, #23]
      break;
 80091c6:	e018      	b.n	80091fa <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80091c8:	68f8      	ldr	r0, [r7, #12]
 80091ca:	f000 f81b 	bl	8009204 <USBH_HandleControl>
 80091ce:	4603      	mov	r3, r0
 80091d0:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80091d2:	7dfb      	ldrb	r3, [r7, #23]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d002      	beq.n	80091de <USBH_CtlReq+0x54>
 80091d8:	7dfb      	ldrb	r3, [r7, #23]
 80091da:	2b03      	cmp	r3, #3
 80091dc:	d106      	bne.n	80091ec <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	2201      	movs	r2, #1
 80091e2:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	2200      	movs	r2, #0
 80091e8:	761a      	strb	r2, [r3, #24]
      break;
 80091ea:	e005      	b.n	80091f8 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80091ec:	7dfb      	ldrb	r3, [r7, #23]
 80091ee:	2b02      	cmp	r3, #2
 80091f0:	d102      	bne.n	80091f8 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	2201      	movs	r2, #1
 80091f6:	709a      	strb	r2, [r3, #2]
      break;
 80091f8:	bf00      	nop
  }
  return status;
 80091fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80091fc:	4618      	mov	r0, r3
 80091fe:	3718      	adds	r7, #24
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}

08009204 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b086      	sub	sp, #24
 8009208:	af02      	add	r7, sp, #8
 800920a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800920c:	2301      	movs	r3, #1
 800920e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009210:	2300      	movs	r3, #0
 8009212:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	7e1b      	ldrb	r3, [r3, #24]
 8009218:	3b01      	subs	r3, #1
 800921a:	2b0a      	cmp	r3, #10
 800921c:	f200 8156 	bhi.w	80094cc <USBH_HandleControl+0x2c8>
 8009220:	a201      	add	r2, pc, #4	@ (adr r2, 8009228 <USBH_HandleControl+0x24>)
 8009222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009226:	bf00      	nop
 8009228:	08009255 	.word	0x08009255
 800922c:	0800926f 	.word	0x0800926f
 8009230:	080092d9 	.word	0x080092d9
 8009234:	080092ff 	.word	0x080092ff
 8009238:	08009337 	.word	0x08009337
 800923c:	08009361 	.word	0x08009361
 8009240:	080093b3 	.word	0x080093b3
 8009244:	080093d5 	.word	0x080093d5
 8009248:	08009411 	.word	0x08009411
 800924c:	08009437 	.word	0x08009437
 8009250:	08009475 	.word	0x08009475
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f103 0110 	add.w	r1, r3, #16
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	795b      	ldrb	r3, [r3, #5]
 800925e:	461a      	mov	r2, r3
 8009260:	6878      	ldr	r0, [r7, #4]
 8009262:	f000 f943 	bl	80094ec <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2202      	movs	r2, #2
 800926a:	761a      	strb	r2, [r3, #24]
      break;
 800926c:	e139      	b.n	80094e2 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	795b      	ldrb	r3, [r3, #5]
 8009272:	4619      	mov	r1, r3
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f000 fcc5 	bl	8009c04 <USBH_LL_GetURBState>
 800927a:	4603      	mov	r3, r0
 800927c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800927e:	7bbb      	ldrb	r3, [r7, #14]
 8009280:	2b01      	cmp	r3, #1
 8009282:	d11e      	bne.n	80092c2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	7c1b      	ldrb	r3, [r3, #16]
 8009288:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800928c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	8adb      	ldrh	r3, [r3, #22]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d00a      	beq.n	80092ac <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009296:	7b7b      	ldrb	r3, [r7, #13]
 8009298:	2b80      	cmp	r3, #128	@ 0x80
 800929a:	d103      	bne.n	80092a4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2203      	movs	r2, #3
 80092a0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80092a2:	e115      	b.n	80094d0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2205      	movs	r2, #5
 80092a8:	761a      	strb	r2, [r3, #24]
      break;
 80092aa:	e111      	b.n	80094d0 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80092ac:	7b7b      	ldrb	r3, [r7, #13]
 80092ae:	2b80      	cmp	r3, #128	@ 0x80
 80092b0:	d103      	bne.n	80092ba <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2209      	movs	r2, #9
 80092b6:	761a      	strb	r2, [r3, #24]
      break;
 80092b8:	e10a      	b.n	80094d0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2207      	movs	r2, #7
 80092be:	761a      	strb	r2, [r3, #24]
      break;
 80092c0:	e106      	b.n	80094d0 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80092c2:	7bbb      	ldrb	r3, [r7, #14]
 80092c4:	2b04      	cmp	r3, #4
 80092c6:	d003      	beq.n	80092d0 <USBH_HandleControl+0xcc>
 80092c8:	7bbb      	ldrb	r3, [r7, #14]
 80092ca:	2b02      	cmp	r3, #2
 80092cc:	f040 8100 	bne.w	80094d0 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	220b      	movs	r2, #11
 80092d4:	761a      	strb	r2, [r3, #24]
      break;
 80092d6:	e0fb      	b.n	80094d0 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80092de:	b29a      	uxth	r2, r3
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6899      	ldr	r1, [r3, #8]
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	899a      	ldrh	r2, [r3, #12]
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	791b      	ldrb	r3, [r3, #4]
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f000 f93a 	bl	800956a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2204      	movs	r2, #4
 80092fa:	761a      	strb	r2, [r3, #24]
      break;
 80092fc:	e0f1      	b.n	80094e2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	791b      	ldrb	r3, [r3, #4]
 8009302:	4619      	mov	r1, r3
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f000 fc7d 	bl	8009c04 <USBH_LL_GetURBState>
 800930a:	4603      	mov	r3, r0
 800930c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800930e:	7bbb      	ldrb	r3, [r7, #14]
 8009310:	2b01      	cmp	r3, #1
 8009312:	d102      	bne.n	800931a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2209      	movs	r2, #9
 8009318:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800931a:	7bbb      	ldrb	r3, [r7, #14]
 800931c:	2b05      	cmp	r3, #5
 800931e:	d102      	bne.n	8009326 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009320:	2303      	movs	r3, #3
 8009322:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009324:	e0d6      	b.n	80094d4 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8009326:	7bbb      	ldrb	r3, [r7, #14]
 8009328:	2b04      	cmp	r3, #4
 800932a:	f040 80d3 	bne.w	80094d4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	220b      	movs	r2, #11
 8009332:	761a      	strb	r2, [r3, #24]
      break;
 8009334:	e0ce      	b.n	80094d4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6899      	ldr	r1, [r3, #8]
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	899a      	ldrh	r2, [r3, #12]
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	795b      	ldrb	r3, [r3, #5]
 8009342:	2001      	movs	r0, #1
 8009344:	9000      	str	r0, [sp, #0]
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f000 f8ea 	bl	8009520 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009352:	b29a      	uxth	r2, r3
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2206      	movs	r2, #6
 800935c:	761a      	strb	r2, [r3, #24]
      break;
 800935e:	e0c0      	b.n	80094e2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	795b      	ldrb	r3, [r3, #5]
 8009364:	4619      	mov	r1, r3
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f000 fc4c 	bl	8009c04 <USBH_LL_GetURBState>
 800936c:	4603      	mov	r3, r0
 800936e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009370:	7bbb      	ldrb	r3, [r7, #14]
 8009372:	2b01      	cmp	r3, #1
 8009374:	d103      	bne.n	800937e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2207      	movs	r2, #7
 800937a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800937c:	e0ac      	b.n	80094d8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800937e:	7bbb      	ldrb	r3, [r7, #14]
 8009380:	2b05      	cmp	r3, #5
 8009382:	d105      	bne.n	8009390 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	220c      	movs	r2, #12
 8009388:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800938a:	2303      	movs	r3, #3
 800938c:	73fb      	strb	r3, [r7, #15]
      break;
 800938e:	e0a3      	b.n	80094d8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009390:	7bbb      	ldrb	r3, [r7, #14]
 8009392:	2b02      	cmp	r3, #2
 8009394:	d103      	bne.n	800939e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2205      	movs	r2, #5
 800939a:	761a      	strb	r2, [r3, #24]
      break;
 800939c:	e09c      	b.n	80094d8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800939e:	7bbb      	ldrb	r3, [r7, #14]
 80093a0:	2b04      	cmp	r3, #4
 80093a2:	f040 8099 	bne.w	80094d8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	220b      	movs	r2, #11
 80093aa:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80093ac:	2302      	movs	r3, #2
 80093ae:	73fb      	strb	r3, [r7, #15]
      break;
 80093b0:	e092      	b.n	80094d8 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	791b      	ldrb	r3, [r3, #4]
 80093b6:	2200      	movs	r2, #0
 80093b8:	2100      	movs	r1, #0
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f000 f8d5 	bl	800956a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80093c6:	b29a      	uxth	r2, r3
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2208      	movs	r2, #8
 80093d0:	761a      	strb	r2, [r3, #24]

      break;
 80093d2:	e086      	b.n	80094e2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	791b      	ldrb	r3, [r3, #4]
 80093d8:	4619      	mov	r1, r3
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f000 fc12 	bl	8009c04 <USBH_LL_GetURBState>
 80093e0:	4603      	mov	r3, r0
 80093e2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80093e4:	7bbb      	ldrb	r3, [r7, #14]
 80093e6:	2b01      	cmp	r3, #1
 80093e8:	d105      	bne.n	80093f6 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	220d      	movs	r2, #13
 80093ee:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80093f0:	2300      	movs	r3, #0
 80093f2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80093f4:	e072      	b.n	80094dc <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80093f6:	7bbb      	ldrb	r3, [r7, #14]
 80093f8:	2b04      	cmp	r3, #4
 80093fa:	d103      	bne.n	8009404 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	220b      	movs	r2, #11
 8009400:	761a      	strb	r2, [r3, #24]
      break;
 8009402:	e06b      	b.n	80094dc <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8009404:	7bbb      	ldrb	r3, [r7, #14]
 8009406:	2b05      	cmp	r3, #5
 8009408:	d168      	bne.n	80094dc <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800940a:	2303      	movs	r3, #3
 800940c:	73fb      	strb	r3, [r7, #15]
      break;
 800940e:	e065      	b.n	80094dc <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	795b      	ldrb	r3, [r3, #5]
 8009414:	2201      	movs	r2, #1
 8009416:	9200      	str	r2, [sp, #0]
 8009418:	2200      	movs	r2, #0
 800941a:	2100      	movs	r1, #0
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f000 f87f 	bl	8009520 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009428:	b29a      	uxth	r2, r3
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	220a      	movs	r2, #10
 8009432:	761a      	strb	r2, [r3, #24]
      break;
 8009434:	e055      	b.n	80094e2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	795b      	ldrb	r3, [r3, #5]
 800943a:	4619      	mov	r1, r3
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	f000 fbe1 	bl	8009c04 <USBH_LL_GetURBState>
 8009442:	4603      	mov	r3, r0
 8009444:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009446:	7bbb      	ldrb	r3, [r7, #14]
 8009448:	2b01      	cmp	r3, #1
 800944a:	d105      	bne.n	8009458 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800944c:	2300      	movs	r3, #0
 800944e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	220d      	movs	r2, #13
 8009454:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009456:	e043      	b.n	80094e0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009458:	7bbb      	ldrb	r3, [r7, #14]
 800945a:	2b02      	cmp	r3, #2
 800945c:	d103      	bne.n	8009466 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2209      	movs	r2, #9
 8009462:	761a      	strb	r2, [r3, #24]
      break;
 8009464:	e03c      	b.n	80094e0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8009466:	7bbb      	ldrb	r3, [r7, #14]
 8009468:	2b04      	cmp	r3, #4
 800946a:	d139      	bne.n	80094e0 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	220b      	movs	r2, #11
 8009470:	761a      	strb	r2, [r3, #24]
      break;
 8009472:	e035      	b.n	80094e0 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	7e5b      	ldrb	r3, [r3, #25]
 8009478:	3301      	adds	r3, #1
 800947a:	b2da      	uxtb	r2, r3
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	765a      	strb	r2, [r3, #25]
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	7e5b      	ldrb	r3, [r3, #25]
 8009484:	2b02      	cmp	r3, #2
 8009486:	d806      	bhi.n	8009496 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2201      	movs	r2, #1
 800948c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2201      	movs	r2, #1
 8009492:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009494:	e025      	b.n	80094e2 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800949c:	2106      	movs	r1, #6
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2200      	movs	r2, #0
 80094a6:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	795b      	ldrb	r3, [r3, #5]
 80094ac:	4619      	mov	r1, r3
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f000 f90c 	bl	80096cc <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	791b      	ldrb	r3, [r3, #4]
 80094b8:	4619      	mov	r1, r3
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f000 f906 	bl	80096cc <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2200      	movs	r2, #0
 80094c4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80094c6:	2302      	movs	r3, #2
 80094c8:	73fb      	strb	r3, [r7, #15]
      break;
 80094ca:	e00a      	b.n	80094e2 <USBH_HandleControl+0x2de>

    default:
      break;
 80094cc:	bf00      	nop
 80094ce:	e008      	b.n	80094e2 <USBH_HandleControl+0x2de>
      break;
 80094d0:	bf00      	nop
 80094d2:	e006      	b.n	80094e2 <USBH_HandleControl+0x2de>
      break;
 80094d4:	bf00      	nop
 80094d6:	e004      	b.n	80094e2 <USBH_HandleControl+0x2de>
      break;
 80094d8:	bf00      	nop
 80094da:	e002      	b.n	80094e2 <USBH_HandleControl+0x2de>
      break;
 80094dc:	bf00      	nop
 80094de:	e000      	b.n	80094e2 <USBH_HandleControl+0x2de>
      break;
 80094e0:	bf00      	nop
  }

  return status;
 80094e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	3710      	adds	r7, #16
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}

080094ec <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b088      	sub	sp, #32
 80094f0:	af04      	add	r7, sp, #16
 80094f2:	60f8      	str	r0, [r7, #12]
 80094f4:	60b9      	str	r1, [r7, #8]
 80094f6:	4613      	mov	r3, r2
 80094f8:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80094fa:	79f9      	ldrb	r1, [r7, #7]
 80094fc:	2300      	movs	r3, #0
 80094fe:	9303      	str	r3, [sp, #12]
 8009500:	2308      	movs	r3, #8
 8009502:	9302      	str	r3, [sp, #8]
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	9301      	str	r3, [sp, #4]
 8009508:	2300      	movs	r3, #0
 800950a:	9300      	str	r3, [sp, #0]
 800950c:	2300      	movs	r3, #0
 800950e:	2200      	movs	r2, #0
 8009510:	68f8      	ldr	r0, [r7, #12]
 8009512:	f000 fb46 	bl	8009ba2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8009516:	2300      	movs	r3, #0
}
 8009518:	4618      	mov	r0, r3
 800951a:	3710      	adds	r7, #16
 800951c:	46bd      	mov	sp, r7
 800951e:	bd80      	pop	{r7, pc}

08009520 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b088      	sub	sp, #32
 8009524:	af04      	add	r7, sp, #16
 8009526:	60f8      	str	r0, [r7, #12]
 8009528:	60b9      	str	r1, [r7, #8]
 800952a:	4611      	mov	r1, r2
 800952c:	461a      	mov	r2, r3
 800952e:	460b      	mov	r3, r1
 8009530:	80fb      	strh	r3, [r7, #6]
 8009532:	4613      	mov	r3, r2
 8009534:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800953c:	2b00      	cmp	r3, #0
 800953e:	d001      	beq.n	8009544 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009540:	2300      	movs	r3, #0
 8009542:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009544:	7979      	ldrb	r1, [r7, #5]
 8009546:	7e3b      	ldrb	r3, [r7, #24]
 8009548:	9303      	str	r3, [sp, #12]
 800954a:	88fb      	ldrh	r3, [r7, #6]
 800954c:	9302      	str	r3, [sp, #8]
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	9301      	str	r3, [sp, #4]
 8009552:	2301      	movs	r3, #1
 8009554:	9300      	str	r3, [sp, #0]
 8009556:	2300      	movs	r3, #0
 8009558:	2200      	movs	r2, #0
 800955a:	68f8      	ldr	r0, [r7, #12]
 800955c:	f000 fb21 	bl	8009ba2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009560:	2300      	movs	r3, #0
}
 8009562:	4618      	mov	r0, r3
 8009564:	3710      	adds	r7, #16
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}

0800956a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800956a:	b580      	push	{r7, lr}
 800956c:	b088      	sub	sp, #32
 800956e:	af04      	add	r7, sp, #16
 8009570:	60f8      	str	r0, [r7, #12]
 8009572:	60b9      	str	r1, [r7, #8]
 8009574:	4611      	mov	r1, r2
 8009576:	461a      	mov	r2, r3
 8009578:	460b      	mov	r3, r1
 800957a:	80fb      	strh	r3, [r7, #6]
 800957c:	4613      	mov	r3, r2
 800957e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009580:	7979      	ldrb	r1, [r7, #5]
 8009582:	2300      	movs	r3, #0
 8009584:	9303      	str	r3, [sp, #12]
 8009586:	88fb      	ldrh	r3, [r7, #6]
 8009588:	9302      	str	r3, [sp, #8]
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	9301      	str	r3, [sp, #4]
 800958e:	2301      	movs	r3, #1
 8009590:	9300      	str	r3, [sp, #0]
 8009592:	2300      	movs	r3, #0
 8009594:	2201      	movs	r2, #1
 8009596:	68f8      	ldr	r0, [r7, #12]
 8009598:	f000 fb03 	bl	8009ba2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800959c:	2300      	movs	r3, #0

}
 800959e:	4618      	mov	r0, r3
 80095a0:	3710      	adds	r7, #16
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}

080095a6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80095a6:	b580      	push	{r7, lr}
 80095a8:	b088      	sub	sp, #32
 80095aa:	af04      	add	r7, sp, #16
 80095ac:	60f8      	str	r0, [r7, #12]
 80095ae:	60b9      	str	r1, [r7, #8]
 80095b0:	4611      	mov	r1, r2
 80095b2:	461a      	mov	r2, r3
 80095b4:	460b      	mov	r3, r1
 80095b6:	80fb      	strh	r3, [r7, #6]
 80095b8:	4613      	mov	r3, r2
 80095ba:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d001      	beq.n	80095ca <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80095c6:	2300      	movs	r3, #0
 80095c8:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80095ca:	7979      	ldrb	r1, [r7, #5]
 80095cc:	7e3b      	ldrb	r3, [r7, #24]
 80095ce:	9303      	str	r3, [sp, #12]
 80095d0:	88fb      	ldrh	r3, [r7, #6]
 80095d2:	9302      	str	r3, [sp, #8]
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	9301      	str	r3, [sp, #4]
 80095d8:	2301      	movs	r3, #1
 80095da:	9300      	str	r3, [sp, #0]
 80095dc:	2302      	movs	r3, #2
 80095de:	2200      	movs	r2, #0
 80095e0:	68f8      	ldr	r0, [r7, #12]
 80095e2:	f000 fade 	bl	8009ba2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80095e6:	2300      	movs	r3, #0
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	3710      	adds	r7, #16
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}

080095f0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b088      	sub	sp, #32
 80095f4:	af04      	add	r7, sp, #16
 80095f6:	60f8      	str	r0, [r7, #12]
 80095f8:	60b9      	str	r1, [r7, #8]
 80095fa:	4611      	mov	r1, r2
 80095fc:	461a      	mov	r2, r3
 80095fe:	460b      	mov	r3, r1
 8009600:	80fb      	strh	r3, [r7, #6]
 8009602:	4613      	mov	r3, r2
 8009604:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009606:	7979      	ldrb	r1, [r7, #5]
 8009608:	2300      	movs	r3, #0
 800960a:	9303      	str	r3, [sp, #12]
 800960c:	88fb      	ldrh	r3, [r7, #6]
 800960e:	9302      	str	r3, [sp, #8]
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	9301      	str	r3, [sp, #4]
 8009614:	2301      	movs	r3, #1
 8009616:	9300      	str	r3, [sp, #0]
 8009618:	2302      	movs	r3, #2
 800961a:	2201      	movs	r2, #1
 800961c:	68f8      	ldr	r0, [r7, #12]
 800961e:	f000 fac0 	bl	8009ba2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009622:	2300      	movs	r3, #0
}
 8009624:	4618      	mov	r0, r3
 8009626:	3710      	adds	r7, #16
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}

0800962c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b086      	sub	sp, #24
 8009630:	af04      	add	r7, sp, #16
 8009632:	6078      	str	r0, [r7, #4]
 8009634:	4608      	mov	r0, r1
 8009636:	4611      	mov	r1, r2
 8009638:	461a      	mov	r2, r3
 800963a:	4603      	mov	r3, r0
 800963c:	70fb      	strb	r3, [r7, #3]
 800963e:	460b      	mov	r3, r1
 8009640:	70bb      	strb	r3, [r7, #2]
 8009642:	4613      	mov	r3, r2
 8009644:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009646:	7878      	ldrb	r0, [r7, #1]
 8009648:	78ba      	ldrb	r2, [r7, #2]
 800964a:	78f9      	ldrb	r1, [r7, #3]
 800964c:	8b3b      	ldrh	r3, [r7, #24]
 800964e:	9302      	str	r3, [sp, #8]
 8009650:	7d3b      	ldrb	r3, [r7, #20]
 8009652:	9301      	str	r3, [sp, #4]
 8009654:	7c3b      	ldrb	r3, [r7, #16]
 8009656:	9300      	str	r3, [sp, #0]
 8009658:	4603      	mov	r3, r0
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f000 fa53 	bl	8009b06 <USBH_LL_OpenPipe>

  return USBH_OK;
 8009660:	2300      	movs	r3, #0
}
 8009662:	4618      	mov	r0, r3
 8009664:	3708      	adds	r7, #8
 8009666:	46bd      	mov	sp, r7
 8009668:	bd80      	pop	{r7, pc}

0800966a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800966a:	b580      	push	{r7, lr}
 800966c:	b082      	sub	sp, #8
 800966e:	af00      	add	r7, sp, #0
 8009670:	6078      	str	r0, [r7, #4]
 8009672:	460b      	mov	r3, r1
 8009674:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8009676:	78fb      	ldrb	r3, [r7, #3]
 8009678:	4619      	mov	r1, r3
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	f000 fa72 	bl	8009b64 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009680:	2300      	movs	r3, #0
}
 8009682:	4618      	mov	r0, r3
 8009684:	3708      	adds	r7, #8
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}

0800968a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800968a:	b580      	push	{r7, lr}
 800968c:	b084      	sub	sp, #16
 800968e:	af00      	add	r7, sp, #0
 8009690:	6078      	str	r0, [r7, #4]
 8009692:	460b      	mov	r3, r1
 8009694:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f000 f836 	bl	8009708 <USBH_GetFreePipe>
 800969c:	4603      	mov	r3, r0
 800969e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80096a0:	89fb      	ldrh	r3, [r7, #14]
 80096a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80096a6:	4293      	cmp	r3, r2
 80096a8:	d00a      	beq.n	80096c0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80096aa:	78fa      	ldrb	r2, [r7, #3]
 80096ac:	89fb      	ldrh	r3, [r7, #14]
 80096ae:	f003 030f 	and.w	r3, r3, #15
 80096b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80096b6:	6879      	ldr	r1, [r7, #4]
 80096b8:	33e0      	adds	r3, #224	@ 0xe0
 80096ba:	009b      	lsls	r3, r3, #2
 80096bc:	440b      	add	r3, r1
 80096be:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80096c0:	89fb      	ldrh	r3, [r7, #14]
 80096c2:	b2db      	uxtb	r3, r3
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	3710      	adds	r7, #16
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bd80      	pop	{r7, pc}

080096cc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80096cc:	b480      	push	{r7}
 80096ce:	b083      	sub	sp, #12
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
 80096d4:	460b      	mov	r3, r1
 80096d6:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80096d8:	78fb      	ldrb	r3, [r7, #3]
 80096da:	2b0f      	cmp	r3, #15
 80096dc:	d80d      	bhi.n	80096fa <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80096de:	78fb      	ldrb	r3, [r7, #3]
 80096e0:	687a      	ldr	r2, [r7, #4]
 80096e2:	33e0      	adds	r3, #224	@ 0xe0
 80096e4:	009b      	lsls	r3, r3, #2
 80096e6:	4413      	add	r3, r2
 80096e8:	685a      	ldr	r2, [r3, #4]
 80096ea:	78fb      	ldrb	r3, [r7, #3]
 80096ec:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80096f0:	6879      	ldr	r1, [r7, #4]
 80096f2:	33e0      	adds	r3, #224	@ 0xe0
 80096f4:	009b      	lsls	r3, r3, #2
 80096f6:	440b      	add	r3, r1
 80096f8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80096fa:	2300      	movs	r3, #0
}
 80096fc:	4618      	mov	r0, r3
 80096fe:	370c      	adds	r7, #12
 8009700:	46bd      	mov	sp, r7
 8009702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009706:	4770      	bx	lr

08009708 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009708:	b480      	push	{r7}
 800970a:	b085      	sub	sp, #20
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009710:	2300      	movs	r3, #0
 8009712:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009714:	2300      	movs	r3, #0
 8009716:	73fb      	strb	r3, [r7, #15]
 8009718:	e00f      	b.n	800973a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800971a:	7bfb      	ldrb	r3, [r7, #15]
 800971c:	687a      	ldr	r2, [r7, #4]
 800971e:	33e0      	adds	r3, #224	@ 0xe0
 8009720:	009b      	lsls	r3, r3, #2
 8009722:	4413      	add	r3, r2
 8009724:	685b      	ldr	r3, [r3, #4]
 8009726:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800972a:	2b00      	cmp	r3, #0
 800972c:	d102      	bne.n	8009734 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800972e:	7bfb      	ldrb	r3, [r7, #15]
 8009730:	b29b      	uxth	r3, r3
 8009732:	e007      	b.n	8009744 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009734:	7bfb      	ldrb	r3, [r7, #15]
 8009736:	3301      	adds	r3, #1
 8009738:	73fb      	strb	r3, [r7, #15]
 800973a:	7bfb      	ldrb	r3, [r7, #15]
 800973c:	2b0f      	cmp	r3, #15
 800973e:	d9ec      	bls.n	800971a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009740:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8009744:	4618      	mov	r0, r3
 8009746:	3714      	adds	r7, #20
 8009748:	46bd      	mov	sp, r7
 800974a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974e:	4770      	bx	lr

08009750 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009750:	b580      	push	{r7, lr}
 8009752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009754:	2201      	movs	r2, #1
 8009756:	490e      	ldr	r1, [pc, #56]	@ (8009790 <MX_USB_HOST_Init+0x40>)
 8009758:	480e      	ldr	r0, [pc, #56]	@ (8009794 <MX_USB_HOST_Init+0x44>)
 800975a:	f7fe fb15 	bl	8007d88 <USBH_Init>
 800975e:	4603      	mov	r3, r0
 8009760:	2b00      	cmp	r3, #0
 8009762:	d001      	beq.n	8009768 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009764:	f7f7 fe3a 	bl	80013dc <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009768:	490b      	ldr	r1, [pc, #44]	@ (8009798 <MX_USB_HOST_Init+0x48>)
 800976a:	480a      	ldr	r0, [pc, #40]	@ (8009794 <MX_USB_HOST_Init+0x44>)
 800976c:	f7fe fbb9 	bl	8007ee2 <USBH_RegisterClass>
 8009770:	4603      	mov	r3, r0
 8009772:	2b00      	cmp	r3, #0
 8009774:	d001      	beq.n	800977a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009776:	f7f7 fe31 	bl	80013dc <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800977a:	4806      	ldr	r0, [pc, #24]	@ (8009794 <MX_USB_HOST_Init+0x44>)
 800977c:	f7fe fc3d 	bl	8007ffa <USBH_Start>
 8009780:	4603      	mov	r3, r0
 8009782:	2b00      	cmp	r3, #0
 8009784:	d001      	beq.n	800978a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009786:	f7f7 fe29 	bl	80013dc <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800978a:	bf00      	nop
 800978c:	bd80      	pop	{r7, pc}
 800978e:	bf00      	nop
 8009790:	080097b1 	.word	0x080097b1
 8009794:	20000198 	.word	0x20000198
 8009798:	2000000c 	.word	0x2000000c

0800979c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80097a0:	4802      	ldr	r0, [pc, #8]	@ (80097ac <MX_USB_HOST_Process+0x10>)
 80097a2:	f7fe fc3b 	bl	800801c <USBH_Process>
}
 80097a6:	bf00      	nop
 80097a8:	bd80      	pop	{r7, pc}
 80097aa:	bf00      	nop
 80097ac:	20000198 	.word	0x20000198

080097b0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80097b0:	b480      	push	{r7}
 80097b2:	b083      	sub	sp, #12
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
 80097b8:	460b      	mov	r3, r1
 80097ba:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80097bc:	78fb      	ldrb	r3, [r7, #3]
 80097be:	3b01      	subs	r3, #1
 80097c0:	2b04      	cmp	r3, #4
 80097c2:	d819      	bhi.n	80097f8 <USBH_UserProcess+0x48>
 80097c4:	a201      	add	r2, pc, #4	@ (adr r2, 80097cc <USBH_UserProcess+0x1c>)
 80097c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097ca:	bf00      	nop
 80097cc:	080097f9 	.word	0x080097f9
 80097d0:	080097e9 	.word	0x080097e9
 80097d4:	080097f9 	.word	0x080097f9
 80097d8:	080097f1 	.word	0x080097f1
 80097dc:	080097e1 	.word	0x080097e1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80097e0:	4b09      	ldr	r3, [pc, #36]	@ (8009808 <USBH_UserProcess+0x58>)
 80097e2:	2203      	movs	r2, #3
 80097e4:	701a      	strb	r2, [r3, #0]
  break;
 80097e6:	e008      	b.n	80097fa <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80097e8:	4b07      	ldr	r3, [pc, #28]	@ (8009808 <USBH_UserProcess+0x58>)
 80097ea:	2202      	movs	r2, #2
 80097ec:	701a      	strb	r2, [r3, #0]
  break;
 80097ee:	e004      	b.n	80097fa <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80097f0:	4b05      	ldr	r3, [pc, #20]	@ (8009808 <USBH_UserProcess+0x58>)
 80097f2:	2201      	movs	r2, #1
 80097f4:	701a      	strb	r2, [r3, #0]
  break;
 80097f6:	e000      	b.n	80097fa <USBH_UserProcess+0x4a>

  default:
  break;
 80097f8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80097fa:	bf00      	nop
 80097fc:	370c      	adds	r7, #12
 80097fe:	46bd      	mov	sp, r7
 8009800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009804:	4770      	bx	lr
 8009806:	bf00      	nop
 8009808:	20000570 	.word	0x20000570

0800980c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b08a      	sub	sp, #40	@ 0x28
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009814:	f107 0314 	add.w	r3, r7, #20
 8009818:	2200      	movs	r2, #0
 800981a:	601a      	str	r2, [r3, #0]
 800981c:	605a      	str	r2, [r3, #4]
 800981e:	609a      	str	r2, [r3, #8]
 8009820:	60da      	str	r2, [r3, #12]
 8009822:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800982c:	d147      	bne.n	80098be <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800982e:	2300      	movs	r3, #0
 8009830:	613b      	str	r3, [r7, #16]
 8009832:	4b25      	ldr	r3, [pc, #148]	@ (80098c8 <HAL_HCD_MspInit+0xbc>)
 8009834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009836:	4a24      	ldr	r2, [pc, #144]	@ (80098c8 <HAL_HCD_MspInit+0xbc>)
 8009838:	f043 0301 	orr.w	r3, r3, #1
 800983c:	6313      	str	r3, [r2, #48]	@ 0x30
 800983e:	4b22      	ldr	r3, [pc, #136]	@ (80098c8 <HAL_HCD_MspInit+0xbc>)
 8009840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009842:	f003 0301 	and.w	r3, r3, #1
 8009846:	613b      	str	r3, [r7, #16]
 8009848:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800984a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800984e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009850:	2300      	movs	r3, #0
 8009852:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009854:	2300      	movs	r3, #0
 8009856:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009858:	f107 0314 	add.w	r3, r7, #20
 800985c:	4619      	mov	r1, r3
 800985e:	481b      	ldr	r0, [pc, #108]	@ (80098cc <HAL_HCD_MspInit+0xc0>)
 8009860:	f7f8 f960 	bl	8001b24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009864:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8009868:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800986a:	2302      	movs	r3, #2
 800986c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800986e:	2300      	movs	r3, #0
 8009870:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009872:	2300      	movs	r3, #0
 8009874:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009876:	230a      	movs	r3, #10
 8009878:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800987a:	f107 0314 	add.w	r3, r7, #20
 800987e:	4619      	mov	r1, r3
 8009880:	4812      	ldr	r0, [pc, #72]	@ (80098cc <HAL_HCD_MspInit+0xc0>)
 8009882:	f7f8 f94f 	bl	8001b24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009886:	4b10      	ldr	r3, [pc, #64]	@ (80098c8 <HAL_HCD_MspInit+0xbc>)
 8009888:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800988a:	4a0f      	ldr	r2, [pc, #60]	@ (80098c8 <HAL_HCD_MspInit+0xbc>)
 800988c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009890:	6353      	str	r3, [r2, #52]	@ 0x34
 8009892:	2300      	movs	r3, #0
 8009894:	60fb      	str	r3, [r7, #12]
 8009896:	4b0c      	ldr	r3, [pc, #48]	@ (80098c8 <HAL_HCD_MspInit+0xbc>)
 8009898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800989a:	4a0b      	ldr	r2, [pc, #44]	@ (80098c8 <HAL_HCD_MspInit+0xbc>)
 800989c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80098a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80098a2:	4b09      	ldr	r3, [pc, #36]	@ (80098c8 <HAL_HCD_MspInit+0xbc>)
 80098a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80098aa:	60fb      	str	r3, [r7, #12]
 80098ac:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80098ae:	2200      	movs	r2, #0
 80098b0:	2100      	movs	r1, #0
 80098b2:	2043      	movs	r0, #67	@ 0x43
 80098b4:	f7f8 f8ff 	bl	8001ab6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80098b8:	2043      	movs	r0, #67	@ 0x43
 80098ba:	f7f8 f918 	bl	8001aee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80098be:	bf00      	nop
 80098c0:	3728      	adds	r7, #40	@ 0x28
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}
 80098c6:	bf00      	nop
 80098c8:	40023800 	.word	0x40023800
 80098cc:	40020000 	.word	0x40020000

080098d0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b082      	sub	sp, #8
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80098de:	4618      	mov	r0, r3
 80098e0:	f7fe ff73 	bl	80087ca <USBH_LL_IncTimer>
}
 80098e4:	bf00      	nop
 80098e6:	3708      	adds	r7, #8
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}

080098ec <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b082      	sub	sp, #8
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80098fa:	4618      	mov	r0, r3
 80098fc:	f7fe ffab 	bl	8008856 <USBH_LL_Connect>
}
 8009900:	bf00      	nop
 8009902:	3708      	adds	r7, #8
 8009904:	46bd      	mov	sp, r7
 8009906:	bd80      	pop	{r7, pc}

08009908 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b082      	sub	sp, #8
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009916:	4618      	mov	r0, r3
 8009918:	f7fe ffb4 	bl	8008884 <USBH_LL_Disconnect>
}
 800991c:	bf00      	nop
 800991e:	3708      	adds	r7, #8
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}

08009924 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009924:	b480      	push	{r7}
 8009926:	b083      	sub	sp, #12
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
 800992c:	460b      	mov	r3, r1
 800992e:	70fb      	strb	r3, [r7, #3]
 8009930:	4613      	mov	r3, r2
 8009932:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009934:	bf00      	nop
 8009936:	370c      	adds	r7, #12
 8009938:	46bd      	mov	sp, r7
 800993a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993e:	4770      	bx	lr

08009940 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b082      	sub	sp, #8
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800994e:	4618      	mov	r0, r3
 8009950:	f7fe ff65 	bl	800881e <USBH_LL_PortEnabled>
}
 8009954:	bf00      	nop
 8009956:	3708      	adds	r7, #8
 8009958:	46bd      	mov	sp, r7
 800995a:	bd80      	pop	{r7, pc}

0800995c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b082      	sub	sp, #8
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800996a:	4618      	mov	r0, r3
 800996c:	f7fe ff65 	bl	800883a <USBH_LL_PortDisabled>
}
 8009970:	bf00      	nop
 8009972:	3708      	adds	r7, #8
 8009974:	46bd      	mov	sp, r7
 8009976:	bd80      	pop	{r7, pc}

08009978 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b082      	sub	sp, #8
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8009986:	2b01      	cmp	r3, #1
 8009988:	d12a      	bne.n	80099e0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800998a:	4a18      	ldr	r2, [pc, #96]	@ (80099ec <USBH_LL_Init+0x74>)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	4a15      	ldr	r2, [pc, #84]	@ (80099ec <USBH_LL_Init+0x74>)
 8009996:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800999a:	4b14      	ldr	r3, [pc, #80]	@ (80099ec <USBH_LL_Init+0x74>)
 800999c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80099a0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80099a2:	4b12      	ldr	r3, [pc, #72]	@ (80099ec <USBH_LL_Init+0x74>)
 80099a4:	2208      	movs	r2, #8
 80099a6:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80099a8:	4b10      	ldr	r3, [pc, #64]	@ (80099ec <USBH_LL_Init+0x74>)
 80099aa:	2201      	movs	r2, #1
 80099ac:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80099ae:	4b0f      	ldr	r3, [pc, #60]	@ (80099ec <USBH_LL_Init+0x74>)
 80099b0:	2200      	movs	r2, #0
 80099b2:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80099b4:	4b0d      	ldr	r3, [pc, #52]	@ (80099ec <USBH_LL_Init+0x74>)
 80099b6:	2202      	movs	r2, #2
 80099b8:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80099ba:	4b0c      	ldr	r3, [pc, #48]	@ (80099ec <USBH_LL_Init+0x74>)
 80099bc:	2200      	movs	r2, #0
 80099be:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80099c0:	480a      	ldr	r0, [pc, #40]	@ (80099ec <USBH_LL_Init+0x74>)
 80099c2:	f7f8 fa64 	bl	8001e8e <HAL_HCD_Init>
 80099c6:	4603      	mov	r3, r0
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d001      	beq.n	80099d0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80099cc:	f7f7 fd06 	bl	80013dc <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80099d0:	4806      	ldr	r0, [pc, #24]	@ (80099ec <USBH_LL_Init+0x74>)
 80099d2:	f7f8 fec5 	bl	8002760 <HAL_HCD_GetCurrentFrame>
 80099d6:	4603      	mov	r3, r0
 80099d8:	4619      	mov	r1, r3
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	f7fe fee6 	bl	80087ac <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80099e0:	2300      	movs	r3, #0
}
 80099e2:	4618      	mov	r0, r3
 80099e4:	3708      	adds	r7, #8
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}
 80099ea:	bf00      	nop
 80099ec:	20000574 	.word	0x20000574

080099f0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b084      	sub	sp, #16
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099f8:	2300      	movs	r3, #0
 80099fa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80099fc:	2300      	movs	r3, #0
 80099fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009a06:	4618      	mov	r0, r3
 8009a08:	f7f8 fe32 	bl	8002670 <HAL_HCD_Start>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009a10:	7bfb      	ldrb	r3, [r7, #15]
 8009a12:	4618      	mov	r0, r3
 8009a14:	f000 f95e 	bl	8009cd4 <USBH_Get_USB_Status>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a1e:	4618      	mov	r0, r3
 8009a20:	3710      	adds	r7, #16
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bd80      	pop	{r7, pc}

08009a26 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009a26:	b580      	push	{r7, lr}
 8009a28:	b084      	sub	sp, #16
 8009a2a:	af00      	add	r7, sp, #0
 8009a2c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a2e:	2300      	movs	r3, #0
 8009a30:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009a32:	2300      	movs	r3, #0
 8009a34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	f7f8 fe3a 	bl	80026b6 <HAL_HCD_Stop>
 8009a42:	4603      	mov	r3, r0
 8009a44:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009a46:	7bfb      	ldrb	r3, [r7, #15]
 8009a48:	4618      	mov	r0, r3
 8009a4a:	f000 f943 	bl	8009cd4 <USBH_Get_USB_Status>
 8009a4e:	4603      	mov	r3, r0
 8009a50:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a52:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a54:	4618      	mov	r0, r3
 8009a56:	3710      	adds	r7, #16
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}

08009a5c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b084      	sub	sp, #16
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009a64:	2301      	movs	r3, #1
 8009a66:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009a6e:	4618      	mov	r0, r3
 8009a70:	f7f8 fe84 	bl	800277c <HAL_HCD_GetCurrentSpeed>
 8009a74:	4603      	mov	r3, r0
 8009a76:	2b02      	cmp	r3, #2
 8009a78:	d00c      	beq.n	8009a94 <USBH_LL_GetSpeed+0x38>
 8009a7a:	2b02      	cmp	r3, #2
 8009a7c:	d80d      	bhi.n	8009a9a <USBH_LL_GetSpeed+0x3e>
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d002      	beq.n	8009a88 <USBH_LL_GetSpeed+0x2c>
 8009a82:	2b01      	cmp	r3, #1
 8009a84:	d003      	beq.n	8009a8e <USBH_LL_GetSpeed+0x32>
 8009a86:	e008      	b.n	8009a9a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009a88:	2300      	movs	r3, #0
 8009a8a:	73fb      	strb	r3, [r7, #15]
    break;
 8009a8c:	e008      	b.n	8009aa0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009a8e:	2301      	movs	r3, #1
 8009a90:	73fb      	strb	r3, [r7, #15]
    break;
 8009a92:	e005      	b.n	8009aa0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009a94:	2302      	movs	r3, #2
 8009a96:	73fb      	strb	r3, [r7, #15]
    break;
 8009a98:	e002      	b.n	8009aa0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8009a9a:	2301      	movs	r3, #1
 8009a9c:	73fb      	strb	r3, [r7, #15]
    break;
 8009a9e:	bf00      	nop
  }
  return  speed;
 8009aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	3710      	adds	r7, #16
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}

08009aaa <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009aaa:	b580      	push	{r7, lr}
 8009aac:	b084      	sub	sp, #16
 8009aae:	af00      	add	r7, sp, #0
 8009ab0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	f7f8 fe15 	bl	80026f0 <HAL_HCD_ResetPort>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009aca:	7bfb      	ldrb	r3, [r7, #15]
 8009acc:	4618      	mov	r0, r3
 8009ace:	f000 f901 	bl	8009cd4 <USBH_Get_USB_Status>
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ad6:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ad8:	4618      	mov	r0, r3
 8009ada:	3710      	adds	r7, #16
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd80      	pop	{r7, pc}

08009ae0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b082      	sub	sp, #8
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
 8009ae8:	460b      	mov	r3, r1
 8009aea:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009af2:	78fa      	ldrb	r2, [r7, #3]
 8009af4:	4611      	mov	r1, r2
 8009af6:	4618      	mov	r0, r3
 8009af8:	f7f8 fe1d 	bl	8002736 <HAL_HCD_HC_GetXferCount>
 8009afc:	4603      	mov	r3, r0
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	3708      	adds	r7, #8
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}

08009b06 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009b06:	b590      	push	{r4, r7, lr}
 8009b08:	b089      	sub	sp, #36	@ 0x24
 8009b0a:	af04      	add	r7, sp, #16
 8009b0c:	6078      	str	r0, [r7, #4]
 8009b0e:	4608      	mov	r0, r1
 8009b10:	4611      	mov	r1, r2
 8009b12:	461a      	mov	r2, r3
 8009b14:	4603      	mov	r3, r0
 8009b16:	70fb      	strb	r3, [r7, #3]
 8009b18:	460b      	mov	r3, r1
 8009b1a:	70bb      	strb	r3, [r7, #2]
 8009b1c:	4613      	mov	r3, r2
 8009b1e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b20:	2300      	movs	r3, #0
 8009b22:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009b24:	2300      	movs	r3, #0
 8009b26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8009b2e:	787c      	ldrb	r4, [r7, #1]
 8009b30:	78ba      	ldrb	r2, [r7, #2]
 8009b32:	78f9      	ldrb	r1, [r7, #3]
 8009b34:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009b36:	9302      	str	r3, [sp, #8]
 8009b38:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009b3c:	9301      	str	r3, [sp, #4]
 8009b3e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009b42:	9300      	str	r3, [sp, #0]
 8009b44:	4623      	mov	r3, r4
 8009b46:	f7f8 fa09 	bl	8001f5c <HAL_HCD_HC_Init>
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009b4e:	7bfb      	ldrb	r3, [r7, #15]
 8009b50:	4618      	mov	r0, r3
 8009b52:	f000 f8bf 	bl	8009cd4 <USBH_Get_USB_Status>
 8009b56:	4603      	mov	r3, r0
 8009b58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b5a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	3714      	adds	r7, #20
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd90      	pop	{r4, r7, pc}

08009b64 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b084      	sub	sp, #16
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
 8009b6c:	460b      	mov	r3, r1
 8009b6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b70:	2300      	movs	r3, #0
 8009b72:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009b74:	2300      	movs	r3, #0
 8009b76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009b7e:	78fa      	ldrb	r2, [r7, #3]
 8009b80:	4611      	mov	r1, r2
 8009b82:	4618      	mov	r0, r3
 8009b84:	f7f8 faa2 	bl	80020cc <HAL_HCD_HC_Halt>
 8009b88:	4603      	mov	r3, r0
 8009b8a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009b8c:	7bfb      	ldrb	r3, [r7, #15]
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f000 f8a0 	bl	8009cd4 <USBH_Get_USB_Status>
 8009b94:	4603      	mov	r3, r0
 8009b96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b98:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	3710      	adds	r7, #16
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}

08009ba2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009ba2:	b590      	push	{r4, r7, lr}
 8009ba4:	b089      	sub	sp, #36	@ 0x24
 8009ba6:	af04      	add	r7, sp, #16
 8009ba8:	6078      	str	r0, [r7, #4]
 8009baa:	4608      	mov	r0, r1
 8009bac:	4611      	mov	r1, r2
 8009bae:	461a      	mov	r2, r3
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	70fb      	strb	r3, [r7, #3]
 8009bb4:	460b      	mov	r3, r1
 8009bb6:	70bb      	strb	r3, [r7, #2]
 8009bb8:	4613      	mov	r3, r2
 8009bba:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8009bca:	787c      	ldrb	r4, [r7, #1]
 8009bcc:	78ba      	ldrb	r2, [r7, #2]
 8009bce:	78f9      	ldrb	r1, [r7, #3]
 8009bd0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009bd4:	9303      	str	r3, [sp, #12]
 8009bd6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009bd8:	9302      	str	r3, [sp, #8]
 8009bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bdc:	9301      	str	r3, [sp, #4]
 8009bde:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009be2:	9300      	str	r3, [sp, #0]
 8009be4:	4623      	mov	r3, r4
 8009be6:	f7f8 fa95 	bl	8002114 <HAL_HCD_HC_SubmitRequest>
 8009bea:	4603      	mov	r3, r0
 8009bec:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009bee:	7bfb      	ldrb	r3, [r7, #15]
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	f000 f86f 	bl	8009cd4 <USBH_Get_USB_Status>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009bfa:	7bbb      	ldrb	r3, [r7, #14]
}
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	3714      	adds	r7, #20
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bd90      	pop	{r4, r7, pc}

08009c04 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b082      	sub	sp, #8
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
 8009c0c:	460b      	mov	r3, r1
 8009c0e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009c16:	78fa      	ldrb	r2, [r7, #3]
 8009c18:	4611      	mov	r1, r2
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	f7f8 fd76 	bl	800270c <HAL_HCD_HC_GetURBState>
 8009c20:	4603      	mov	r3, r0
}
 8009c22:	4618      	mov	r0, r3
 8009c24:	3708      	adds	r7, #8
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}

08009c2a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009c2a:	b580      	push	{r7, lr}
 8009c2c:	b082      	sub	sp, #8
 8009c2e:	af00      	add	r7, sp, #0
 8009c30:	6078      	str	r0, [r7, #4]
 8009c32:	460b      	mov	r3, r1
 8009c34:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8009c3c:	2b01      	cmp	r3, #1
 8009c3e:	d103      	bne.n	8009c48 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009c40:	78fb      	ldrb	r3, [r7, #3]
 8009c42:	4618      	mov	r0, r3
 8009c44:	f000 f872 	bl	8009d2c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009c48:	20c8      	movs	r0, #200	@ 0xc8
 8009c4a:	f7f7 fe35 	bl	80018b8 <HAL_Delay>
  return USBH_OK;
 8009c4e:	2300      	movs	r3, #0
}
 8009c50:	4618      	mov	r0, r3
 8009c52:	3708      	adds	r7, #8
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}

08009c58 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009c58:	b480      	push	{r7}
 8009c5a:	b085      	sub	sp, #20
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
 8009c60:	460b      	mov	r3, r1
 8009c62:	70fb      	strb	r3, [r7, #3]
 8009c64:	4613      	mov	r3, r2
 8009c66:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009c6e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009c70:	78fa      	ldrb	r2, [r7, #3]
 8009c72:	68f9      	ldr	r1, [r7, #12]
 8009c74:	4613      	mov	r3, r2
 8009c76:	011b      	lsls	r3, r3, #4
 8009c78:	1a9b      	subs	r3, r3, r2
 8009c7a:	009b      	lsls	r3, r3, #2
 8009c7c:	440b      	add	r3, r1
 8009c7e:	3317      	adds	r3, #23
 8009c80:	781b      	ldrb	r3, [r3, #0]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d00a      	beq.n	8009c9c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009c86:	78fa      	ldrb	r2, [r7, #3]
 8009c88:	68f9      	ldr	r1, [r7, #12]
 8009c8a:	4613      	mov	r3, r2
 8009c8c:	011b      	lsls	r3, r3, #4
 8009c8e:	1a9b      	subs	r3, r3, r2
 8009c90:	009b      	lsls	r3, r3, #2
 8009c92:	440b      	add	r3, r1
 8009c94:	333c      	adds	r3, #60	@ 0x3c
 8009c96:	78ba      	ldrb	r2, [r7, #2]
 8009c98:	701a      	strb	r2, [r3, #0]
 8009c9a:	e009      	b.n	8009cb0 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009c9c:	78fa      	ldrb	r2, [r7, #3]
 8009c9e:	68f9      	ldr	r1, [r7, #12]
 8009ca0:	4613      	mov	r3, r2
 8009ca2:	011b      	lsls	r3, r3, #4
 8009ca4:	1a9b      	subs	r3, r3, r2
 8009ca6:	009b      	lsls	r3, r3, #2
 8009ca8:	440b      	add	r3, r1
 8009caa:	333d      	adds	r3, #61	@ 0x3d
 8009cac:	78ba      	ldrb	r2, [r7, #2]
 8009cae:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009cb0:	2300      	movs	r3, #0
}
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	3714      	adds	r7, #20
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbc:	4770      	bx	lr

08009cbe <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009cbe:	b580      	push	{r7, lr}
 8009cc0:	b082      	sub	sp, #8
 8009cc2:	af00      	add	r7, sp, #0
 8009cc4:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	f7f7 fdf6 	bl	80018b8 <HAL_Delay>
}
 8009ccc:	bf00      	nop
 8009cce:	3708      	adds	r7, #8
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bd80      	pop	{r7, pc}

08009cd4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009cd4:	b480      	push	{r7}
 8009cd6:	b085      	sub	sp, #20
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	4603      	mov	r3, r0
 8009cdc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009cde:	2300      	movs	r3, #0
 8009ce0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009ce2:	79fb      	ldrb	r3, [r7, #7]
 8009ce4:	2b03      	cmp	r3, #3
 8009ce6:	d817      	bhi.n	8009d18 <USBH_Get_USB_Status+0x44>
 8009ce8:	a201      	add	r2, pc, #4	@ (adr r2, 8009cf0 <USBH_Get_USB_Status+0x1c>)
 8009cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cee:	bf00      	nop
 8009cf0:	08009d01 	.word	0x08009d01
 8009cf4:	08009d07 	.word	0x08009d07
 8009cf8:	08009d0d 	.word	0x08009d0d
 8009cfc:	08009d13 	.word	0x08009d13
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009d00:	2300      	movs	r3, #0
 8009d02:	73fb      	strb	r3, [r7, #15]
    break;
 8009d04:	e00b      	b.n	8009d1e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009d06:	2302      	movs	r3, #2
 8009d08:	73fb      	strb	r3, [r7, #15]
    break;
 8009d0a:	e008      	b.n	8009d1e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009d0c:	2301      	movs	r3, #1
 8009d0e:	73fb      	strb	r3, [r7, #15]
    break;
 8009d10:	e005      	b.n	8009d1e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009d12:	2302      	movs	r3, #2
 8009d14:	73fb      	strb	r3, [r7, #15]
    break;
 8009d16:	e002      	b.n	8009d1e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009d18:	2302      	movs	r3, #2
 8009d1a:	73fb      	strb	r3, [r7, #15]
    break;
 8009d1c:	bf00      	nop
  }
  return usb_status;
 8009d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d20:	4618      	mov	r0, r3
 8009d22:	3714      	adds	r7, #20
 8009d24:	46bd      	mov	sp, r7
 8009d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2a:	4770      	bx	lr

08009d2c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b084      	sub	sp, #16
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	4603      	mov	r3, r0
 8009d34:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009d36:	79fb      	ldrb	r3, [r7, #7]
 8009d38:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009d3a:	79fb      	ldrb	r3, [r7, #7]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d102      	bne.n	8009d46 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009d40:	2300      	movs	r3, #0
 8009d42:	73fb      	strb	r3, [r7, #15]
 8009d44:	e001      	b.n	8009d4a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8009d46:	2301      	movs	r3, #1
 8009d48:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009d4a:	7bfb      	ldrb	r3, [r7, #15]
 8009d4c:	461a      	mov	r2, r3
 8009d4e:	2101      	movs	r1, #1
 8009d50:	4803      	ldr	r0, [pc, #12]	@ (8009d60 <MX_DriverVbusFS+0x34>)
 8009d52:	f7f8 f883 	bl	8001e5c <HAL_GPIO_WritePin>
}
 8009d56:	bf00      	nop
 8009d58:	3710      	adds	r7, #16
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd80      	pop	{r7, pc}
 8009d5e:	bf00      	nop
 8009d60:	40020800 	.word	0x40020800

08009d64 <malloc>:
 8009d64:	4b02      	ldr	r3, [pc, #8]	@ (8009d70 <malloc+0xc>)
 8009d66:	4601      	mov	r1, r0
 8009d68:	6818      	ldr	r0, [r3, #0]
 8009d6a:	f000 b82d 	b.w	8009dc8 <_malloc_r>
 8009d6e:	bf00      	nop
 8009d70:	2000002c 	.word	0x2000002c

08009d74 <free>:
 8009d74:	4b02      	ldr	r3, [pc, #8]	@ (8009d80 <free+0xc>)
 8009d76:	4601      	mov	r1, r0
 8009d78:	6818      	ldr	r0, [r3, #0]
 8009d7a:	f000 b8f5 	b.w	8009f68 <_free_r>
 8009d7e:	bf00      	nop
 8009d80:	2000002c 	.word	0x2000002c

08009d84 <sbrk_aligned>:
 8009d84:	b570      	push	{r4, r5, r6, lr}
 8009d86:	4e0f      	ldr	r6, [pc, #60]	@ (8009dc4 <sbrk_aligned+0x40>)
 8009d88:	460c      	mov	r4, r1
 8009d8a:	6831      	ldr	r1, [r6, #0]
 8009d8c:	4605      	mov	r5, r0
 8009d8e:	b911      	cbnz	r1, 8009d96 <sbrk_aligned+0x12>
 8009d90:	f000 f8ae 	bl	8009ef0 <_sbrk_r>
 8009d94:	6030      	str	r0, [r6, #0]
 8009d96:	4621      	mov	r1, r4
 8009d98:	4628      	mov	r0, r5
 8009d9a:	f000 f8a9 	bl	8009ef0 <_sbrk_r>
 8009d9e:	1c43      	adds	r3, r0, #1
 8009da0:	d103      	bne.n	8009daa <sbrk_aligned+0x26>
 8009da2:	f04f 34ff 	mov.w	r4, #4294967295
 8009da6:	4620      	mov	r0, r4
 8009da8:	bd70      	pop	{r4, r5, r6, pc}
 8009daa:	1cc4      	adds	r4, r0, #3
 8009dac:	f024 0403 	bic.w	r4, r4, #3
 8009db0:	42a0      	cmp	r0, r4
 8009db2:	d0f8      	beq.n	8009da6 <sbrk_aligned+0x22>
 8009db4:	1a21      	subs	r1, r4, r0
 8009db6:	4628      	mov	r0, r5
 8009db8:	f000 f89a 	bl	8009ef0 <_sbrk_r>
 8009dbc:	3001      	adds	r0, #1
 8009dbe:	d1f2      	bne.n	8009da6 <sbrk_aligned+0x22>
 8009dc0:	e7ef      	b.n	8009da2 <sbrk_aligned+0x1e>
 8009dc2:	bf00      	nop
 8009dc4:	20000954 	.word	0x20000954

08009dc8 <_malloc_r>:
 8009dc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009dcc:	1ccd      	adds	r5, r1, #3
 8009dce:	f025 0503 	bic.w	r5, r5, #3
 8009dd2:	3508      	adds	r5, #8
 8009dd4:	2d0c      	cmp	r5, #12
 8009dd6:	bf38      	it	cc
 8009dd8:	250c      	movcc	r5, #12
 8009dda:	2d00      	cmp	r5, #0
 8009ddc:	4606      	mov	r6, r0
 8009dde:	db01      	blt.n	8009de4 <_malloc_r+0x1c>
 8009de0:	42a9      	cmp	r1, r5
 8009de2:	d904      	bls.n	8009dee <_malloc_r+0x26>
 8009de4:	230c      	movs	r3, #12
 8009de6:	6033      	str	r3, [r6, #0]
 8009de8:	2000      	movs	r0, #0
 8009dea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009dee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009ec4 <_malloc_r+0xfc>
 8009df2:	f000 f869 	bl	8009ec8 <__malloc_lock>
 8009df6:	f8d8 3000 	ldr.w	r3, [r8]
 8009dfa:	461c      	mov	r4, r3
 8009dfc:	bb44      	cbnz	r4, 8009e50 <_malloc_r+0x88>
 8009dfe:	4629      	mov	r1, r5
 8009e00:	4630      	mov	r0, r6
 8009e02:	f7ff ffbf 	bl	8009d84 <sbrk_aligned>
 8009e06:	1c43      	adds	r3, r0, #1
 8009e08:	4604      	mov	r4, r0
 8009e0a:	d158      	bne.n	8009ebe <_malloc_r+0xf6>
 8009e0c:	f8d8 4000 	ldr.w	r4, [r8]
 8009e10:	4627      	mov	r7, r4
 8009e12:	2f00      	cmp	r7, #0
 8009e14:	d143      	bne.n	8009e9e <_malloc_r+0xd6>
 8009e16:	2c00      	cmp	r4, #0
 8009e18:	d04b      	beq.n	8009eb2 <_malloc_r+0xea>
 8009e1a:	6823      	ldr	r3, [r4, #0]
 8009e1c:	4639      	mov	r1, r7
 8009e1e:	4630      	mov	r0, r6
 8009e20:	eb04 0903 	add.w	r9, r4, r3
 8009e24:	f000 f864 	bl	8009ef0 <_sbrk_r>
 8009e28:	4581      	cmp	r9, r0
 8009e2a:	d142      	bne.n	8009eb2 <_malloc_r+0xea>
 8009e2c:	6821      	ldr	r1, [r4, #0]
 8009e2e:	1a6d      	subs	r5, r5, r1
 8009e30:	4629      	mov	r1, r5
 8009e32:	4630      	mov	r0, r6
 8009e34:	f7ff ffa6 	bl	8009d84 <sbrk_aligned>
 8009e38:	3001      	adds	r0, #1
 8009e3a:	d03a      	beq.n	8009eb2 <_malloc_r+0xea>
 8009e3c:	6823      	ldr	r3, [r4, #0]
 8009e3e:	442b      	add	r3, r5
 8009e40:	6023      	str	r3, [r4, #0]
 8009e42:	f8d8 3000 	ldr.w	r3, [r8]
 8009e46:	685a      	ldr	r2, [r3, #4]
 8009e48:	bb62      	cbnz	r2, 8009ea4 <_malloc_r+0xdc>
 8009e4a:	f8c8 7000 	str.w	r7, [r8]
 8009e4e:	e00f      	b.n	8009e70 <_malloc_r+0xa8>
 8009e50:	6822      	ldr	r2, [r4, #0]
 8009e52:	1b52      	subs	r2, r2, r5
 8009e54:	d420      	bmi.n	8009e98 <_malloc_r+0xd0>
 8009e56:	2a0b      	cmp	r2, #11
 8009e58:	d917      	bls.n	8009e8a <_malloc_r+0xc2>
 8009e5a:	1961      	adds	r1, r4, r5
 8009e5c:	42a3      	cmp	r3, r4
 8009e5e:	6025      	str	r5, [r4, #0]
 8009e60:	bf18      	it	ne
 8009e62:	6059      	strne	r1, [r3, #4]
 8009e64:	6863      	ldr	r3, [r4, #4]
 8009e66:	bf08      	it	eq
 8009e68:	f8c8 1000 	streq.w	r1, [r8]
 8009e6c:	5162      	str	r2, [r4, r5]
 8009e6e:	604b      	str	r3, [r1, #4]
 8009e70:	4630      	mov	r0, r6
 8009e72:	f000 f82f 	bl	8009ed4 <__malloc_unlock>
 8009e76:	f104 000b 	add.w	r0, r4, #11
 8009e7a:	1d23      	adds	r3, r4, #4
 8009e7c:	f020 0007 	bic.w	r0, r0, #7
 8009e80:	1ac2      	subs	r2, r0, r3
 8009e82:	bf1c      	itt	ne
 8009e84:	1a1b      	subne	r3, r3, r0
 8009e86:	50a3      	strne	r3, [r4, r2]
 8009e88:	e7af      	b.n	8009dea <_malloc_r+0x22>
 8009e8a:	6862      	ldr	r2, [r4, #4]
 8009e8c:	42a3      	cmp	r3, r4
 8009e8e:	bf0c      	ite	eq
 8009e90:	f8c8 2000 	streq.w	r2, [r8]
 8009e94:	605a      	strne	r2, [r3, #4]
 8009e96:	e7eb      	b.n	8009e70 <_malloc_r+0xa8>
 8009e98:	4623      	mov	r3, r4
 8009e9a:	6864      	ldr	r4, [r4, #4]
 8009e9c:	e7ae      	b.n	8009dfc <_malloc_r+0x34>
 8009e9e:	463c      	mov	r4, r7
 8009ea0:	687f      	ldr	r7, [r7, #4]
 8009ea2:	e7b6      	b.n	8009e12 <_malloc_r+0x4a>
 8009ea4:	461a      	mov	r2, r3
 8009ea6:	685b      	ldr	r3, [r3, #4]
 8009ea8:	42a3      	cmp	r3, r4
 8009eaa:	d1fb      	bne.n	8009ea4 <_malloc_r+0xdc>
 8009eac:	2300      	movs	r3, #0
 8009eae:	6053      	str	r3, [r2, #4]
 8009eb0:	e7de      	b.n	8009e70 <_malloc_r+0xa8>
 8009eb2:	230c      	movs	r3, #12
 8009eb4:	6033      	str	r3, [r6, #0]
 8009eb6:	4630      	mov	r0, r6
 8009eb8:	f000 f80c 	bl	8009ed4 <__malloc_unlock>
 8009ebc:	e794      	b.n	8009de8 <_malloc_r+0x20>
 8009ebe:	6005      	str	r5, [r0, #0]
 8009ec0:	e7d6      	b.n	8009e70 <_malloc_r+0xa8>
 8009ec2:	bf00      	nop
 8009ec4:	20000958 	.word	0x20000958

08009ec8 <__malloc_lock>:
 8009ec8:	4801      	ldr	r0, [pc, #4]	@ (8009ed0 <__malloc_lock+0x8>)
 8009eca:	f000 b84b 	b.w	8009f64 <__retarget_lock_acquire_recursive>
 8009ece:	bf00      	nop
 8009ed0:	20000a98 	.word	0x20000a98

08009ed4 <__malloc_unlock>:
 8009ed4:	4801      	ldr	r0, [pc, #4]	@ (8009edc <__malloc_unlock+0x8>)
 8009ed6:	f000 b846 	b.w	8009f66 <__retarget_lock_release_recursive>
 8009eda:	bf00      	nop
 8009edc:	20000a98 	.word	0x20000a98

08009ee0 <memset>:
 8009ee0:	4402      	add	r2, r0
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	d100      	bne.n	8009eea <memset+0xa>
 8009ee8:	4770      	bx	lr
 8009eea:	f803 1b01 	strb.w	r1, [r3], #1
 8009eee:	e7f9      	b.n	8009ee4 <memset+0x4>

08009ef0 <_sbrk_r>:
 8009ef0:	b538      	push	{r3, r4, r5, lr}
 8009ef2:	4d06      	ldr	r5, [pc, #24]	@ (8009f0c <_sbrk_r+0x1c>)
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	4604      	mov	r4, r0
 8009ef8:	4608      	mov	r0, r1
 8009efa:	602b      	str	r3, [r5, #0]
 8009efc:	f7f7 fbf8 	bl	80016f0 <_sbrk>
 8009f00:	1c43      	adds	r3, r0, #1
 8009f02:	d102      	bne.n	8009f0a <_sbrk_r+0x1a>
 8009f04:	682b      	ldr	r3, [r5, #0]
 8009f06:	b103      	cbz	r3, 8009f0a <_sbrk_r+0x1a>
 8009f08:	6023      	str	r3, [r4, #0]
 8009f0a:	bd38      	pop	{r3, r4, r5, pc}
 8009f0c:	20000a94 	.word	0x20000a94

08009f10 <__errno>:
 8009f10:	4b01      	ldr	r3, [pc, #4]	@ (8009f18 <__errno+0x8>)
 8009f12:	6818      	ldr	r0, [r3, #0]
 8009f14:	4770      	bx	lr
 8009f16:	bf00      	nop
 8009f18:	2000002c 	.word	0x2000002c

08009f1c <__libc_init_array>:
 8009f1c:	b570      	push	{r4, r5, r6, lr}
 8009f1e:	4d0d      	ldr	r5, [pc, #52]	@ (8009f54 <__libc_init_array+0x38>)
 8009f20:	4c0d      	ldr	r4, [pc, #52]	@ (8009f58 <__libc_init_array+0x3c>)
 8009f22:	1b64      	subs	r4, r4, r5
 8009f24:	10a4      	asrs	r4, r4, #2
 8009f26:	2600      	movs	r6, #0
 8009f28:	42a6      	cmp	r6, r4
 8009f2a:	d109      	bne.n	8009f40 <__libc_init_array+0x24>
 8009f2c:	4d0b      	ldr	r5, [pc, #44]	@ (8009f5c <__libc_init_array+0x40>)
 8009f2e:	4c0c      	ldr	r4, [pc, #48]	@ (8009f60 <__libc_init_array+0x44>)
 8009f30:	f000 f864 	bl	8009ffc <_init>
 8009f34:	1b64      	subs	r4, r4, r5
 8009f36:	10a4      	asrs	r4, r4, #2
 8009f38:	2600      	movs	r6, #0
 8009f3a:	42a6      	cmp	r6, r4
 8009f3c:	d105      	bne.n	8009f4a <__libc_init_array+0x2e>
 8009f3e:	bd70      	pop	{r4, r5, r6, pc}
 8009f40:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f44:	4798      	blx	r3
 8009f46:	3601      	adds	r6, #1
 8009f48:	e7ee      	b.n	8009f28 <__libc_init_array+0xc>
 8009f4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f4e:	4798      	blx	r3
 8009f50:	3601      	adds	r6, #1
 8009f52:	e7f2      	b.n	8009f3a <__libc_init_array+0x1e>
 8009f54:	0800a038 	.word	0x0800a038
 8009f58:	0800a038 	.word	0x0800a038
 8009f5c:	0800a038 	.word	0x0800a038
 8009f60:	0800a03c 	.word	0x0800a03c

08009f64 <__retarget_lock_acquire_recursive>:
 8009f64:	4770      	bx	lr

08009f66 <__retarget_lock_release_recursive>:
 8009f66:	4770      	bx	lr

08009f68 <_free_r>:
 8009f68:	b538      	push	{r3, r4, r5, lr}
 8009f6a:	4605      	mov	r5, r0
 8009f6c:	2900      	cmp	r1, #0
 8009f6e:	d041      	beq.n	8009ff4 <_free_r+0x8c>
 8009f70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f74:	1f0c      	subs	r4, r1, #4
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	bfb8      	it	lt
 8009f7a:	18e4      	addlt	r4, r4, r3
 8009f7c:	f7ff ffa4 	bl	8009ec8 <__malloc_lock>
 8009f80:	4a1d      	ldr	r2, [pc, #116]	@ (8009ff8 <_free_r+0x90>)
 8009f82:	6813      	ldr	r3, [r2, #0]
 8009f84:	b933      	cbnz	r3, 8009f94 <_free_r+0x2c>
 8009f86:	6063      	str	r3, [r4, #4]
 8009f88:	6014      	str	r4, [r2, #0]
 8009f8a:	4628      	mov	r0, r5
 8009f8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f90:	f7ff bfa0 	b.w	8009ed4 <__malloc_unlock>
 8009f94:	42a3      	cmp	r3, r4
 8009f96:	d908      	bls.n	8009faa <_free_r+0x42>
 8009f98:	6820      	ldr	r0, [r4, #0]
 8009f9a:	1821      	adds	r1, r4, r0
 8009f9c:	428b      	cmp	r3, r1
 8009f9e:	bf01      	itttt	eq
 8009fa0:	6819      	ldreq	r1, [r3, #0]
 8009fa2:	685b      	ldreq	r3, [r3, #4]
 8009fa4:	1809      	addeq	r1, r1, r0
 8009fa6:	6021      	streq	r1, [r4, #0]
 8009fa8:	e7ed      	b.n	8009f86 <_free_r+0x1e>
 8009faa:	461a      	mov	r2, r3
 8009fac:	685b      	ldr	r3, [r3, #4]
 8009fae:	b10b      	cbz	r3, 8009fb4 <_free_r+0x4c>
 8009fb0:	42a3      	cmp	r3, r4
 8009fb2:	d9fa      	bls.n	8009faa <_free_r+0x42>
 8009fb4:	6811      	ldr	r1, [r2, #0]
 8009fb6:	1850      	adds	r0, r2, r1
 8009fb8:	42a0      	cmp	r0, r4
 8009fba:	d10b      	bne.n	8009fd4 <_free_r+0x6c>
 8009fbc:	6820      	ldr	r0, [r4, #0]
 8009fbe:	4401      	add	r1, r0
 8009fc0:	1850      	adds	r0, r2, r1
 8009fc2:	4283      	cmp	r3, r0
 8009fc4:	6011      	str	r1, [r2, #0]
 8009fc6:	d1e0      	bne.n	8009f8a <_free_r+0x22>
 8009fc8:	6818      	ldr	r0, [r3, #0]
 8009fca:	685b      	ldr	r3, [r3, #4]
 8009fcc:	6053      	str	r3, [r2, #4]
 8009fce:	4408      	add	r0, r1
 8009fd0:	6010      	str	r0, [r2, #0]
 8009fd2:	e7da      	b.n	8009f8a <_free_r+0x22>
 8009fd4:	d902      	bls.n	8009fdc <_free_r+0x74>
 8009fd6:	230c      	movs	r3, #12
 8009fd8:	602b      	str	r3, [r5, #0]
 8009fda:	e7d6      	b.n	8009f8a <_free_r+0x22>
 8009fdc:	6820      	ldr	r0, [r4, #0]
 8009fde:	1821      	adds	r1, r4, r0
 8009fe0:	428b      	cmp	r3, r1
 8009fe2:	bf04      	itt	eq
 8009fe4:	6819      	ldreq	r1, [r3, #0]
 8009fe6:	685b      	ldreq	r3, [r3, #4]
 8009fe8:	6063      	str	r3, [r4, #4]
 8009fea:	bf04      	itt	eq
 8009fec:	1809      	addeq	r1, r1, r0
 8009fee:	6021      	streq	r1, [r4, #0]
 8009ff0:	6054      	str	r4, [r2, #4]
 8009ff2:	e7ca      	b.n	8009f8a <_free_r+0x22>
 8009ff4:	bd38      	pop	{r3, r4, r5, pc}
 8009ff6:	bf00      	nop
 8009ff8:	20000958 	.word	0x20000958

08009ffc <_init>:
 8009ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ffe:	bf00      	nop
 800a000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a002:	bc08      	pop	{r3}
 800a004:	469e      	mov	lr, r3
 800a006:	4770      	bx	lr

0800a008 <_fini>:
 800a008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a00a:	bf00      	nop
 800a00c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a00e:	bc08      	pop	{r3}
 800a010:	469e      	mov	lr, r3
 800a012:	4770      	bx	lr
